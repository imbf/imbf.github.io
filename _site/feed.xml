<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Green Frog Developer</title>
    <description>객체지향을 사랑하고 클린코드에 관심이 많습니다. 질문을 좋아하고 생각하는 것을 좋아합니다.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 17 Dec 2020 00:35:48 +0900</pubDate>
    <lastBuildDate>Thu, 17 Dec 2020 00:35:48 +0900</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>[기술 면접 준비 - 9일차] 네트워크 &amp; 인증</title>
        <description>&lt;hr /&gt;

&lt;h1 id=&quot;네트워크&quot;&gt;네트워크&lt;/h1&gt;

&lt;h3 id=&quot;쿠키와-세션이-등장하게-된-이유를-아시나요&quot;&gt;쿠키와 세션이 등장하게 된 이유를 아시나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HTTP는 클라이언트가 요청을 한 후 응답을 받으면 그 연결을 끊어 버리는 특징인 connectionless와 통신이 끝나면 상태를 유지하지 않는 특징인 stateless를 해결하기 위해서 쿠키와 세션이 등장하게 되었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;쿠키는-무엇인가요&quot;&gt;쿠키는 무엇인가요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;쿠키란 클라이언트의 로컬에 저장되는 키-값이 들어있는 작은 데이터 파일을 의미합니다.&lt;/strong&gt; 쿠키에는 유효 시간을 지정할 수 있으며, 쿠키의 유효 시간이 남을 경우 브라우저가 종료되도 스토리지에 남아있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;쿠키 동작 방식&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;클라이언트가 페이지를 요청&lt;/li&gt;
  &lt;li&gt;서버에서 쿠키를 생성&lt;/li&gt;
  &lt;li&gt;HTTP 헤더에 쿠키를 포함 시켜 응답 (Set-Cookie)&lt;/li&gt;
  &lt;li&gt;브라우저에서 쿠키를 저장&lt;/li&gt;
  &lt;li&gt;쿠키가 존재하면 요청을 할 경우 HTTP 헤더에 쿠키를 함께 보내서 요청 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;팝업, 자동 로그인, 장바구니 등의 기능을 구현할 때 쿠키를 사용합니다.&lt;/p&gt;

&lt;h3 id=&quot;세션이란-무엇인가요&quot;&gt;세션이란 무엇인가요??&lt;/h3&gt;

&lt;p&gt;세션은 인증과정에서 보통 쿠키를 기반으로 하고 있지만, &lt;strong&gt;클라이언트의 상태 정보를 서버 메모리에 저장하는 기술을 의미합니다.&lt;/strong&gt; &lt;u&gt;서버 메모리에서 관리하기 때문에 사용자 수가 많을 경우 성능 저하의 요인&lt;/u&gt;이 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;세션 동작 방식&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;클라이언트가 서버에 접속 시 세션 ID를 발급&lt;/li&gt;
  &lt;li&gt;클라이언트는 세션 ID를 쿠키를 사용해 저장 (쿠키 이름 : JSESSIONID)&lt;/li&gt;
  &lt;li&gt;클라이언트가 서버에 다시 접속 시 이 쿠키를 이용해서 세션 ID값을 서버에 전달&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;세션과-쿠키의-차이는-무엇인가요&quot;&gt;세션과 쿠키의 차이는 무엇인가요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;세션과 쿠키의 가장 큰 차이는 사용자의 상태 정보가 어디에 저장되어 있느냐의 차이 입니다.&lt;/strong&gt; 쿠키는 클라이언트 로컬에 저장되고 세션은 서버 메모리에서 저장합니다.&lt;/p&gt;

&lt;h3 id=&quot;세션-쿠키-방식의-장단점은-무엇인가요&quot;&gt;세션 쿠키 방식의 장단점은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;세션 ID는 유의미한 값을 갖지 않기 때문에 HTTP 헤더나 바디에 직접 계정정보를 담아 전송하는 것 보다 보안에 강하다.&lt;/li&gt;
  &lt;li&gt;세션 ID는 고유의 ID값이기 때문에 서버 메모리에서 바로 검색할 수 있어 성능 향상을 기대할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;가로챈 쿠키 즉, 세션 ID를 가지고 해커가 동일한 요청을 보낼 경우 진짜 사용자 인지 해커인지 구분할 수가 없다. (세션 유효시간을 짧게 설정, HTTPS 프로토콜 사용)&lt;/li&gt;
  &lt;li&gt;세션 저장소는 서버의 메모리를 사용하기 때문에 동시 사용자가 많을 수록 서버의 부하가 심하게 걸린다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;토큰-기반-인증-방식은-무엇인가요&quot;&gt;토큰 기반 인증 방식은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;인증에 필요한 정보들을 암호화시킨 토큰을 통해서 인증을 하는 방식&lt;/strong&gt;을 의미합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;토큰 인증 동작 방식&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;클라이언트가 로그인 한다.&lt;/li&gt;
  &lt;li&gt;서버는 사용자를 확인하고 Access Token을 발급해 사용자에게 응답해준다.&lt;/li&gt;
  &lt;li&gt;사용자는 Access Token을 받아 쿠키와 같은 곳에 저장한 후, 인증이 필요한 요청마다 토큰을 헤더에 실어 보낸다.&lt;/li&gt;
  &lt;li&gt;서버는 해당 토큰을 검증하고 적절한 토큰일 경우 사용자에 알맞는 데이터를 보낸다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;토큰-기반-인증-방식의-장단점은-무엇인가요&quot;&gt;토큰 기반 인증 방식의 장단점은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;세션/쿠키와 달리 토큰은 별도의 저장소 관리가 필요 없고 검증만 하면 되기 때문에 추가 저장소가 필요 없습니다.&lt;/li&gt;
  &lt;li&gt;Facebook이나 Google에서 지원해주는 다양한 서비스도 토큰 기반으로 진행되기 때문에 관련 기능을 확장하기 용이합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;토큰의 경우도 세션 ID와 마찬가지로 탈취되었을 경우 진짜 사용자인지 해커인지 구분할 수 없습니다. (HTTPS 프토콜을 사용, 토큰 유효기간을 짧게 한다.(Refresh Token 사용))&lt;/li&gt;
  &lt;li&gt;토큰의 길이는 세션 ID보다 훨씬 길기 떄문에 많은 요청이 발생할 수록 오버헤드도 많이 발생합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;jwt는-무엇인가요&quot;&gt;JWT는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;JWT란 Json Web Token의 줄임말로써 Json 포맷을 통해 사용자에 대한 속성을 저장하는 Web Token이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/interview/naver-interview-preparation8-1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JWT의 구조는 &lt;strong&gt;Header, Payload, Signature&lt;/strong&gt;의 3부분으로 이루어 지며 각각의 역할을 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Header: Signature를 해싱하기 위한 알고리즘이나 토큰의 타입을 지정하는 부분&lt;/li&gt;
  &lt;li&gt;Payload: 토큰에서 사용할 정보의 조각들인 Claim으로 구성되어 있다.
    &lt;ul&gt;
      &lt;li&gt;Payload에 담는 정보의 ‘한 조각’을 Claim이라고 부르고, 이는 key/value의 한 쌍으로 이루어져 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Signature: 토큰을 인코딩하거나 유효성 검증을 할 때 사용하는 고유한 암호화 코드이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jwt를-사용하신-이유가-있나요&quot;&gt;JWT를 사용하신 이유가 있나요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;토큰 기반 인증을 위해 토큰 생성이 가장 간단하면서도 만료 기간과 같은 다양한 기능 명세가 존재했기 때문에 사용하였습니다.&lt;/strong&gt; 또한 자바 단에 JWT Token을 생성하고 검증할 수 있는 라이브러리가 잘 형성 되어있었기 때문에 사용하기도 하였습니다.&lt;/p&gt;

&lt;h3 id=&quot;jwt의-단점은-무엇인가요&quot;&gt;JWT의 단점은 무엇인가요??&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;일단 JWT는 상태 정보를 저장하지 않기 때문에 한번 발행된 토큰은 임의로 삭제할 수 없습니다. 고로 적절한 토큰 만료 기간을 넣어줘야 했습니다.&lt;/li&gt;
  &lt;li&gt;JWT 토큰은 Header, Payload, Signature등 3부분으로 이루어 졌고 전체적으로 길이가 길기 때문에 많은 요청과 응답이 발생할 경우 성능에 영향을 줄 수 있습니다.&lt;/li&gt;
  &lt;li&gt;JWT의 Payload 자체는 암호화 된 것이 아니라 인코딩 된 것이기 떄문에 암호화에 신경 쓰거나, 중요 데이터를 넣지 않아야 합니다.&lt;/li&gt;
  &lt;li&gt;Token 기반의 인증과 마찬가지로 Token을 탈취 당했을 경우 사용자 식별을 할 수 없었습니다. 이를 위해 HTTPS나 적절한 만료 기간을 설정했어야만 했습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;oauth&quot;&gt;OAuth&lt;/h3&gt;

&lt;p&gt;OAuth란 특정 애플리케이션이 다른 애플리케이션의 정보에 대해 접근 권한을 부여할 수 있는 공통적인 수단으로서 접근 위임을 위한&lt;/p&gt;

&lt;h3 id=&quot;osi-7-레이어는-무엇인가&quot;&gt;OSI 7 레이어는 무엇인가??&lt;/h3&gt;

&lt;p&gt;OSI 7 레이어는 아래와 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;물리 계층(Physical Layer)&lt;/strong&gt; : 한 비트를 노드에서 다음 노드로 전송해주는 서비스를 담당한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;링크 계층(Link Layer)&lt;/strong&gt; : 물리 계층을 통해 송수신되는 정보의 오류와 흐름을 관리하여 안전한 정보의 전달을 수행할 수 있도록 도와주는 서비스를 담당한다. (MAC)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;네트워크 계층(Network Layer)&lt;/strong&gt; : 데이터를 목적지까지 가장 안전하고 빠르게 전달하는 라우팅과 포워딩 서비스를 담당한다. (IP)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;전송 계층(Transport Layer)&lt;/strong&gt; : End to End 사용자들이 신뢰성있는 데이터를 주고받을 수 있게 도와준다. (TCP, UDP)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;세션 계층(Session Layer)&lt;/strong&gt; : 양 끝단의 응용 프로세스가 통신(동시 송수신, 반이중, 전이중)을 관리하기 위한 방법을 제공한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;표현 계층(Presentation Layer)&lt;/strong&gt; : 코드 간의 번역을 담당하여 데이터의 형식상 차이를 다루는 부담을 응용 계층으로부터 덜어 준다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;응용 계층(Application Layer)&lt;/strong&gt; : 응용 프로세스와 직접 관계하여 일반적인 응용 서비스를 수행한다. (HTTP, DNS, SSH)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;왜-osi-7-레이어로-나누었을까&quot;&gt;왜 OSI 7 레이어로 나누었을까??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;네트워크를 7계층으로 나눈 이유는 네트워킹 과정을 단계별로 파악할 수 있어 이상이 발생했을 경우에 다른 레이어의 장비 및 소프트웨어를 건들지 않고도 이상이 생긴 단계만 고칠 수 있게끔&lt;/strong&gt; 해준다. 즉, &lt;strong&gt;하나의 네트워크를 다음과 같이 7개의 레이어로 분리하면서 레이어간에 결합도는 낮추고 응집도는 올려 유지보수에 강하게 만들려는 목적&lt;/strong&gt;이다.&lt;/p&gt;

&lt;h3 id=&quot;http는-무엇인가&quot;&gt;HTTP는 무엇인가?&lt;/h3&gt;

&lt;p&gt;HTTP는 어플리케이션 계층 프로토콜의 한 종류로써 TCP/IP 기반의 신뢰적인 프로토콜입니다. 주로 브라우저와 서버간의 통신을 하기 위해 자주 사용합니다.&lt;/p&gt;

&lt;p&gt;헤더 필드로는 Content-Legth, Content-Type, Connection, User-Agent, Accept, Status Code 등이 존재합니다.&lt;/p&gt;

&lt;p&gt;http status code는 HTTP Response의 필드 중에 하나인데 순서는 아래와 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1xx: 요청을 받았으며 작업을 계속한다.&lt;/li&gt;
  &lt;li&gt;2xx: 클라이언트가 요청한 동작을 수신하고 이해했으며 성공적으로 처리했음을 가리킨다.&lt;/li&gt;
  &lt;li&gt;3xx: 클라이언트는 요청을 마치기 위해 추가 동작을 취해야 한다는 것을 의미하구요&lt;/li&gt;
  &lt;li&gt;4xx: 클라이언트의 요청에 오류가 있다는 것을 말합니다.&lt;/li&gt;
  &lt;li&gt;5xx: 클라이언트 요청은 이상이 없지만 이를 처리하는 서버에 문제가 있다는 것을 말합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dns-서비스는-무엇인가&quot;&gt;DNS 서비스는 무엇인가??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;DNS란 Host의 Domain Name을 Host의 IP로 변환해주는 서비스를 말합니다.&lt;/strong&gt; DNS 서버들은 계층구조로 구현된 분산 데이터베이스로 주요 구성 요소로써 Root, Top Level Domain(TLD), Authoritative, Local DNS Server가 존재합니다.&lt;/p&gt;

&lt;p&gt;DNS 서비스 과정 (캐싱 x)&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Host가 gaia.cs.umass.edu의 IP주소를 Local DNS서버에게 요청을 보낸다.&lt;/li&gt;
  &lt;li&gt;Local DNS서버는 루트 DNS 서버에게 Domain Name을 보내고 루트 DNS 서버는 edu를 인식한 후 TLD 서버의 주소를 넘겨준다&lt;/li&gt;
  &lt;li&gt;Local DNS서버는 TLD서버에게 Domain Name을 보내고 TLD 서버는 unmass.edu를 인식한 후 Authoritative 서버의 주소를 넘겨준다.&lt;/li&gt;
  &lt;li&gt;Local DNS서버는 Authoritative 서버에게 Domain Name을 보내고 gaia.cs.umass.edu에 해당하는 Ip주소를 얻어온다.&lt;/li&gt;
  &lt;li&gt;변환된 Ip 주소를 Host에게 넘겨주고 Host는 이 IP를 사용해서 어플리케이션 간에 통신 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;tcp와-udp의-차이는-무엇인가&quot;&gt;TCP와 UDP의 차이는 무엇인가?&lt;/h3&gt;

&lt;p&gt;UDP는 비신뢰적이고 비연결형 서비스를 제공하는 프로토콜이구요 TCP는 신뢰적이고 연결형 서비스를 제공하는 프로토콜 입니다. UDP는 주로 DNS나, IPTV등에서 사용하고 TCP는 HTTP 등에서 사용됩니다.&lt;/p&gt;

&lt;h3 id=&quot;3-way-handshake에-대해서-알고-잇나요&quot;&gt;3 Way-HandShake에 대해서 알고 잇나요??&lt;/h3&gt;

&lt;p&gt;3 Way-Handshake 란 전송 제어 프로토콜(TCP)에서 통신을 하는 장치간 서로 연결이 잘 되어있는지 확인하는 과정, 방법이다.&lt;/p&gt;

</description>
        <pubDate>Wed, 16 Dec 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2020/12/16/NAVER-Interview-Preparation-8.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2020/12/16/NAVER-Interview-Preparation-8.html</guid>
        
        <category>Introduction</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[기술 면접 준비 - 8일차] 자기소개 &amp; 동아리 회장 및 해커톤 활동</title>
        <description>&lt;h1 id=&quot;자기소개&quot;&gt;자기소개&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;안녕하세요 “깊은 생각과 고민을 통해 공유하는 것을 좋아하는” 서버 개발자 배종진입니다. 저는 객체지향과 자바를 가장 좋아하고 잘 다룰 수 있으며 관련 프로젝트 경험으로는 Pinpoint batch 모듈에 webhook 기능을 개발한 경험과 Spring Boot 기반의 api 서버를 개발해본 경험이 있습니다. 이 외에도 다양한 프로젝트 및 스터디를 통해서 코드의 품질에 대해서도 항상 고민하고 있으며 더 나은 코드를 위해 토론하는 과정 자체를 좋아합니다. 전남대학교 소프트웨어 개발 동아리 회장과 교내 최초 온라인 해커톤 운영을 통해 전남대학교 개발 생태계에 이바지한 경험이 있으며 주어진 환경에서 최선의 변화를 항상 시도하고 즐겨하는 편입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;저의 이러한 역량을 바탕으로 네이버 예약&amp;amp;주문 플랫폼 팀에 입사하여 최고의 글로벌 예약&amp;amp;주문 서비스 플랫폼을 만들고 싶습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;좋은-품질의-코드&quot;&gt;좋은 품질의 코드&lt;/h1&gt;

&lt;h3 id=&quot;좋은-품질의-코드에-대해서-말씀-하셨는데-종진님이-생각하시는-좋은-품질의-코드란-무엇일까요&quot;&gt;좋은 품질의 코드에 대해서 말씀 하셨는데 종진님이 생각하시는 좋은 품질의 코드란 무엇일까요??&lt;/h3&gt;

&lt;p&gt;코드란 특정 문제를 해결하기 위해서 작성하는 것이라고 생각합니다. 이러한 문제들은 대부분 요구사항 등을 통해서 발생하기 마련이기 때문에 &lt;strong&gt;현재의 요구사항을 만족하면서 불확실한 미래의 요구사항까지 유연하게 대처할 수 있는 코드를 좋은 품질의 코드&lt;/strong&gt;라고 생각합니다.&lt;/p&gt;

&lt;h3 id=&quot;그렇다면-종진님이-좋아하시는-객체-지향에서-좋은-품질의-코드란-무엇일까요&quot;&gt;그렇다면 종진님이 좋아하시는 객체 지향에서 좋은 품질의 코드란 무엇일까요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;객체 지향에서 좋은 품질의 코드란, 관련 도메인 지식들을 깊게 이해하고 이를 객체들의 협력으로 잘 녹여낸 코드&lt;/strong&gt;를 의미합니다. 즉, 깊은 도메인 지식을 기반으로 코드를 작성 했을 때 도메인 구조가 완전히 바뀌지 않는 이상 추후 변경에 유연하게 대처할 수 있다고 생각합니다.&lt;/p&gt;

&lt;h3 id=&quot;품질이-좋지-않는-코드를-어떻게-좋은-품질의-코드로-바꿀-수-있을까요&quot;&gt;품질이 좋지 않는 코드를 어떻게 좋은 품질의 코드로 바꿀 수 있을까요?&lt;/h3&gt;

&lt;p&gt;여러 관점에서 다양한 방법이 있을 것 같습니다. 내부 로직에서 병목이 발생한다면 모니터링을 통해 특정 로직을 추적해서 &lt;strong&gt;리팩토링&lt;/strong&gt;을 할 수도 있겠구요 만약 설계 자체에서 모듈간의 결합도가 높아 코드 수정만으로는 도저히 안되겠는 경우에는 &lt;strong&gt;재설계&lt;/strong&gt;를 하는 등 다양한 방법으로 품질을 올릴 수 있을 것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;그렇다면-방금-refactoring에-대해서-말씀해-주셨는데-refactoring-이란-무엇인가요&quot;&gt;그렇다면 방금 Refactoring에 대해서 말씀해 주셨는데 Refactoring 이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;외부동작을 바꾸지 않으면서 내부 구조를 개선하는 방법&lt;/strong&gt;이라고 생각합니다. 이에 앞서서 &lt;strong&gt;어디까지가 외부 동작인지 bound를 먼저 설정&lt;/strong&gt;할 필요가 있고 &lt;strong&gt;관련 테스트를 작성을 해서 리팩토링 후에도 동일한 동작을 한다는 것을 검증&lt;/strong&gt;할 필요가 있을 것 같습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;소프트웨어-개발-동아리-회장&quot;&gt;소프트웨어 개발 동아리 회장&lt;/h1&gt;

&lt;h3 id=&quot;종진님이-소프트웨어-개발-동아리-회장을-하시면서-얻은-부분이-있나요&quot;&gt;종진님이 소프트웨어 개발 동아리 회장을 하시면서 얻은 부분이 있나요??&lt;/h3&gt;

&lt;p&gt;동아리 회장을 하면서 책임감이나 리더쉽 등의 부분에서도 많이 배우고 느꼈지만 가장 가치있게 얻었던 점은 &lt;strong&gt;지식 공유의 힘&lt;/strong&gt;에 대해서 많이 배울 수 있어서 좋았다고 생각합니다. 저희 동아리는 일주일에 한번 주간발표를 진행합니다. 이 발표는 각 팀별로 프로젝트 진행 과정에서 문제를 해결한 경험이나, 기술을 학습하고 적용하면서 일어난 이슈 및 경험들에 대해서 발표하는 시간입니다.&lt;/p&gt;

&lt;p&gt;이 행사에서 &lt;strong&gt;저는 다른 사람 발표를 통해 시야를 넓힐 수 있었고 직접 발표를 준비하면서 제 지식의 깊이도 늘릴 수 있었습니다.&lt;/strong&gt; 이러한 지식의 선순환 구조에서 지식 공유의 힘을 느꼈고 현재에도 지식의 선순환 구조를 구축하기위해 열심히 노력하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;종진님이-소프트웨어-개발-동아리-회장을-하시면서-가장-힘들었던-부분이-무엇이었나요&quot;&gt;종진님이 소프트웨어 개발 동아리 회장을 하시면서 가장 힘들었던 부분이 무엇이었나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;가장 힘들었던 부분은 많은 규칙과 규정 속에서 발생했던 예외케이스 때문에 힘들었던 것 같습니다.&lt;/strong&gt; 나름 저희가 많은 부분을 고려해서 규칙과 규정을 세웠지만 항상 예외적인 케이스들이 생겼고 이 중심에 회원들이 있었기 때문에 “이걸 어떻게 처리해야하지?”, “동아리 뿐만 아니라 회원들에게 도움이 될 수 있는 방향은 무엇일까?” 에 대해서 매번 고민하고 결정하는 과정이 리더로써 가장 힘들었던 것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;어떻게-그러한-문제를-해결하셨나요&quot;&gt;어떻게 그러한 문제를 해결하셨나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;관련 당사자와 수 많은 대화를 통해서 동아리의 본질을 보려고 노력했더니 해결할 수 있었습니다.&lt;/strong&gt; 저희 동아리의 본질은 조직의 성장과 개인의 성장 모두를 목표로 하는 동아리 입니다.&lt;/p&gt;

&lt;p&gt;즉, 조직의 성장을 위해서 개인의 성장을 방해하면 안됬었고, 개인의 성장을 위해서 조직의 성장을 방해하면 안됬었습니다. 이러한 본질을 보는 시각을 통해서 동아리 뿐만 아니라 개인의 성장까지 함께 이룰 수 있는 대안들을 매번 찾았고 이에 대한 결과로써 (제 입으로 말하긴 창피하지만) 저희 동아리는 전남대학교 최고의 IT 개발동아리가 되었고, 회원들은 네이버, 카카오, 배민, 쿠팡 등 IT 서비스 업계에 많이 진출할 수 있었습니다.&lt;/p&gt;

&lt;h3 id=&quot;오프라인으로-동아리를-운영하시면서-어려운-점은-없었나요&quot;&gt;오프라인으로 동아리를 운영하시면서 어려운 점은 없었나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;가장 어려웠던 점은 한 순간에 오프라인 행사를 온라인으로 전체 전환하는 것이 가장 어려웠던 것 같습니다.&lt;/strong&gt; 동아리 원들에게 Slack, Google Meets, Git등 온라인 협업 도구등을 더 자세히 교육 시켜야만했고 비대면으로 행사로 인해 약해진 동아리원들간의 유대감과 친목 형성을 위해 새롭고 재미있는 행사들을 매번 운영해야하는 부담감이 조금 있었던 것 같습니다. (동아리 원들이 직접 만든 게임으로 행사를 진행하기도 했었구요!)&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;해커톤-운영-경험&quot;&gt;해커톤 운영 경험&lt;/h1&gt;

&lt;p&gt;주제: 비대면 환경에서 빅데이터/클라우드 자원을 활용한 서비스 아이디어&lt;/p&gt;

&lt;h3 id=&quot;온라인-해커톤을-왜-운영-하시게-되었나요&quot;&gt;온라인 해커톤을 왜 운영 하시게 되었나요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;교내 온라인 해커톤을 운영하게 된 이유는 지방에 위치한 저희 학교 학생들에게 다양한 경험 제공하고 전남대학교 개발 생태계를 활성화 시키기 위해서 해커톤을 처음으로 시작하였습니다.&lt;/strong&gt; 지방에 거주하는 학생들은 상대적으로 수도권에 비해서 해커톤과 같은 대회에 대한 정보가 많이 부족합니다. 혹여 정보를 얻어 대회에 참여하더라도 거의 모든 경우 수도권까지 올라가야하거나 온라인으로 참여해야 했었습니다. &lt;strong&gt;이러한 학생들에게 해커톤이 무엇인지에 대해서 알려주고 교내에서 직접 대회까지 열어 이를 기반으로 학생들 사이에서 IT 지식들이 잘 공유되어지는 개발 생태계를 만드는 것이 저희의 목적이었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;해커톤을-운영하시면서-뭘-얻을-수-있었나요&quot;&gt;해커톤을 운영하시면서 뭘 얻을 수 있었나요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;코로나와 같이 주어진 환경에 굴복하지 않고 항상 도전하고 변화할 수 있다는 자신감과 즐거음울 얻게 해준 것이 가장 인상적이었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;이걸-하면서-팀원들과의-불화는-없었던가&quot;&gt;이걸 하면서 팀원들과의 불화는 없었던가?&lt;/h3&gt;

&lt;p&gt;불화라고 할 정도의 팀 내부 갈등은 없었구요 제가 &lt;strong&gt;의사결정 방식을 다수결 보다는 명확한 이유와 근거를 통해서 항상 결정했기 떄문에 매번 회의 시간이 길어져서 팀 내에서 불만이 좀 많았던점 이게 가장 큰 불화&lt;/strong&gt;였던 것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;기술을-도입한-경험은-없나요&quot;&gt;기술을 도입한 경험은 없나요??&lt;/h3&gt;

&lt;p&gt;해커톤도 일종의 프로젝트라고 할 수 있는데 저희가 어떻게 하면 해커톤 프로젝트를 생산성 있게 관리할 수 있을까? 에 대해서 깊게 고민하고 논의 한 결과 &lt;strong&gt;칸반 기반의 소프트웨어로 프로젝트를 진행상황을 관리하고 공유하면 생산성 향상 측면에서 많은 장점을 얻을 수 있겠다 싶어 Trello를 해커톤 팀에 도입&lt;/strong&gt;하게 되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;오프라인-환경에서-운영하시느라-불편한-점은-없었나요&quot;&gt;오프라인 환경에서 운영하시느라 불편한 점은 없었나요?&lt;/h3&gt;

&lt;p&gt;당연히 불편한점은 많았습니다. 매번 저희는 오프라인으로 회의를 진행했는데 회의실을 구하는 것도 너무 어려웠구요. &lt;strong&gt;해커톤 관련 행사들을 모두 온라인으로 진행 해야 되었기 때문에 예외 상황들이 많이 발생해서 이를 미리 예측하고 시나리오를 작성하고 거의 모든 행사에 이러한 작업들을 수차례 반복하는 것이 좀 불편&lt;/strong&gt;했던 것 같습니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Dec 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2020/12/15/NAVER-Interview-Preparation-7.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2020/12/15/NAVER-Interview-Preparation-7.html</guid>
        
        <category>Introduction</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[기술 면접 준비 - 6일차] Github Pages Blog</title>
        <description>&lt;h1 id=&quot;github-pages-blog&quot;&gt;Github Pages Blog&lt;/h1&gt;

&lt;h3 id=&quot;github-pages란-무엇인가&quot;&gt;Github Pages란 무엇인가??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;GitHub Pages란 Github 저장소의 내용을 웹페이지로 만들어 주는 정적 웹 사이트 호스팅 서비스&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;h3 id=&quot;tistory-velog-등-다양한-글쓰기-플랫폼이-존재하는데-왜-github-pages를-사용했는가&quot;&gt;Tistory, Velog 등 다양한 글쓰기 플랫폼이 존재하는데 왜 Github Pages를 사용했는가?&lt;/h3&gt;

&lt;p&gt;말씀하신대로 글쓰기 플랫폼은 아주 다양하고 편리한 기능들을 지원해 줍니다. 이러한 기능들을 사용해서 나만의 멋진 블로그를 만들 수 있지만 &lt;strong&gt;모든 기능이 플랫폼에 종속&lt;/strong&gt;되어 있기 때문에 자유자재로 나만의 특징을 가진 블로그를 만들기에는 한계가 존재한다고 생각했습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;어렵지만 난 개발자니까 할 수 있을꺼다 라고 생각해서 좀 더 로우 레벨인 Github pages로 나만의 블로그를 만들었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;아주-좋은-접근인-것-같다-그렇다면-어떤-정적-사이트-생성기를-활용하여-github-pages-서비스를-이용했는가&quot;&gt;아주 좋은 접근인 것 같다. 그렇다면 어떤 정적 사이트 생성기를 활용하여 Github Pages 서비스를 이용했는가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll이라고 하는 Ruby 언어 기반의 정적 사이트 생성기&lt;/strong&gt;를 사용했습니다.&lt;/p&gt;

&lt;h3 id=&quot;왜-jekyll을-사용-했는가&quot;&gt;왜 Jekyll을 사용 했는가??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;일단 Github Pages가 Jekyll을 기본 엔진&lt;/strong&gt;으로 하기 때문에 사용한 것도 있지만, 마음에 드는 템플릿이 대부분 Jekyll을 사용하기 때문에 Jekyll을 사용해서 Github Pages 서비스를 이용하였습니다.&lt;/p&gt;

&lt;h3 id=&quot;jekyll을-사용하는데-어려움이-없었는가&quot;&gt;Jekyll을 사용하는데 어려움이 없었는가??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;첫 블로깅 환경을 구성하는데 어려움&lt;/strong&gt;이 있었습니다. 정적 사이트 생성기라서 단순할 줄 알았지만 생각보다 복잡했고 어떤 모듈이 어떠한 역할을 하는지에 대해 파악하는데 어려웠습니다.&lt;/p&gt;

&lt;h3 id=&quot;어떻게-어려움을-극복하게-되었는가&quot;&gt;어떻게 어려움을 극복하게 되었는가??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;템플릿을 만든 사람이 사용자 친화적으로 코드 작성 및 모듈화를 해줘서 구조를 파악하는데 많은 도움&lt;/strong&gt;이 되었습니다. 그래도 모르는 부분은 &lt;strong&gt;직접 모듈 하나 하나를 뜯어보거나 공식 문서&lt;/strong&gt;를 통해서 이슈를 해결했던 것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;구체적으로-어려움이-무엇이었는가&quot;&gt;구체적으로 어려움이 무엇이었는가??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;제가 원하는 디자인의 블로그&lt;/strong&gt;를 만들면서 이슈가 발생했습니다. &lt;strong&gt;블로그의 메인 컬러라는 property가 존재했고, 이는 블로그의 메인 컬러 뿐만 아니라 텍스트의 색깔에도 종속&lt;/strong&gt;되어 있었습니다. 이를 해결하기 위해 저는 &lt;strong&gt;properties파일에서 메인 컬러 Property를 배경 Color와 텍스트 색깔 property를 나누었고 관련 코드를 바꿈&lt;/strong&gt;으로써 제가 원하는 디자인을 가진 블로그를 만들 수 있었습니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Dec 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2020/12/14/NAVER-Interview-Preparation-6.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2020/12/14/NAVER-Interview-Preparation-6.html</guid>
        
        <category>GitHub-Pages</category>
        
        <category>Blog</category>
        
        <category>Jekyll</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[기술 면접 준비 - 5일차] 스마트 도어락 (Mobius)</title>
        <description>&lt;h1 id=&quot;스마트-도어락-smart-doorlock&quot;&gt;스마트 도어락 (Smart Doorlock)&lt;/h1&gt;

&lt;h3 id=&quot;스마트-도어락-프로젝트를-진행하셨는데-스마트-도어락이-무엇인가요&quot;&gt;스마트 도어락 프로젝트를 진행하셨는데 스마트 도어락이 무엇인가요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;스마트 도어락이란 IoT 오픈소스 서버 플랫폼인 Mobius를 활용한 사용자의 완벽한 외출을 도와주는 IoT 플랫폼입니다.&lt;/strong&gt; 자택 현관문 내부에 존재하는 기존의 도어락 본체는 제거하고 그 자리에 터치식 디스플레이를 설치하여 &lt;strong&gt;사용자에게 외출시에 필요한 날씨 및 미세먼지 등의 다양한 정보를 제공하고 가스 밸브 및 전등과 같은 가전들을 등록해 상태확인 및 제어할 수 있는 기능을 가진 IoT 플랫폼&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;h3 id=&quot;모비우스-플랫폼을-사용하셨다고-했는데-모비우스-플랫폼은-무엇인가요&quot;&gt;모비우스 플랫폼을 사용하셨다고 했는데 모비우스 플랫폼은 무엇인가요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;모비우스란 oneM2M 표준을 기반으로한 오픈소스 IoT 서버 플랫폼입니다.&lt;/strong&gt; Mobius는 다양한 도메인 IoT 애플리케이션에 대한 미들웨어로써 oneM2M표준에 해당하는 공통 서비스 기능인 CSE와 AE 등록, 데이터 관리, 구독/알림 서비스, 보안 등을 제공합니다.&lt;/p&gt;

&lt;h3 id=&quot;onem2m이란-무엇인가요-표준을-말씀하시는-건가요&quot;&gt;oneM2M이란 무엇인가요? 표준을 말씀하시는 건가요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;oneM2M이란 말 그대로 one + M2M의 합성어로 Machine간의 통신을 하나의 인프라 환경에 통합하기 위한 플랫폼 개발 표준화 단체 및 표준입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;!-- **산업별로 파편화된 서비스 플랫폼 개발 구조에서 벗어나 응용서비스 인프라 환경을 통합하는 사물인터넷 공동서비스 플랫폼 개발을 위한 표준화 단체 및 표준입니다.** --&gt;

&lt;h3 id=&quot;방금-말씀하신-in은-무엇인가요&quot;&gt;방금 말씀하신 IN은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;IN 이란 Infrastructure Node를 의미하는 것으로 인프라 도메인에 위치한 IN-CSE를 포함하는 서버 기기&lt;/strong&gt;를 의미합니다.&lt;/p&gt;

&lt;h3 id=&quot;방금-말씀하신-cse는-무엇인가요&quot;&gt;방금 말씀하신 CSE는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSE란 Common Service Entity의 줄임말로 oneM2M 서비스 플랫폼에서 공통적으로 제공되어야하는 서비스 기능을 제공하는 미들웨어&lt;/strong&gt;를 말합니다.&lt;/p&gt;

&lt;h3 id=&quot;미들웨어란-무엇인가요&quot;&gt;미들웨어란 무엇인가요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;미들웨어란 OS와 응용 소프트웨어 중간에서 조정과 중개의 역할을 수행하는 소프트웨어&lt;/strong&gt;를 말하구요 미들웨어를 사용하면 응용 소프트웨어가 운영체제로부터 제공받는 서비스 이외에 추가적인 서비스를 받을 수 있습니다.&lt;/p&gt;

&lt;p&gt;ex) 메시지 처리 소프트웨어, 데이터베이스 시스템&lt;/p&gt;

&lt;h3 id=&quot;방금-말씀하신-adn이란-무엇인가요&quot;&gt;방금 말씀하신 ADN이란 무엇인가요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ADN이란 Application Dedicated Node의 줄임말로 필드 도메인에 위치한 ADN-AE를 포함하고 CSE를 포함하지 않는 논리적 기기&lt;/strong&gt;를 말합니다.&lt;/p&gt;

&lt;h3 id=&quot;방금-말씀하신-ae란-무엇인가요&quot;&gt;방금 말씀하신 AE란 무엇인가요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;AE란 Application Entitiy의 줄임말로 M2M(Machine to Machine)서비스를 제공하기 위한 논리적인 엔티티&lt;/strong&gt;를 의미합니다.&lt;/p&gt;

&lt;h3 id=&quot;cube와-tas는-무엇인가요&quot;&gt;&amp;amp;Cube와 TAS는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&amp;amp;Cube는 IoT 디바이스에 탑재되는 S/W 플랫폼으로 IN-CSE와 연동할 수 있도록 지원하는 소프트웨어&lt;/strong&gt;입니다. &lt;strong&gt;TAS란 실제 사물을 디바이스에 연결하기 위한 S/W로써 사물과 &amp;amp;Cube간의 연결통로를 만드는 역할&lt;/strong&gt;을 한다.&lt;/p&gt;

&lt;p&gt;즉, 사물과 &amp;amp;Cube를 Tas로써 연결하고 사물과 IN-CSE 즉, Mobius를 &amp;amp;Cube로써 연결할 수 있게 해줍니다.&lt;/p&gt;

&lt;h3 id=&quot;nodejs를-in-ae로-사용한-이유가-있나요&quot;&gt;Node.js를 IN-AE로 사용한 이유가 있나요??&lt;/h3&gt;

&lt;p&gt;꼭 Node.js를 사용해야만하는 특별한 이유는 없었구요, &lt;strong&gt;마감까지 프로젝트를 빠르게 빌드업&lt;/strong&gt; 시키기 위해서 사용했던 것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;nodejs의-특징에-대해서-알고-있나요&quot;&gt;Node.js의 특징에 대해서 알고 있나요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Node.js란 자바스크립트를 사용하고 Non-blocking I/O와 단일-스레드 이벤트 루프를 통한 높은 처리 성능&lt;/strong&gt;을 가지고 있습니다. 또한 &lt;strong&gt;내장 HTTP 서버 라이브러리를 포함&lt;/strong&gt;하고 있어 웹 서버에서 아파치 등의 별도의 소프트웨어 없이 동작하는 것이 가능하기 때문에 빠르게 프로토타입을 제작 가능합니다.&lt;/p&gt;

&lt;h3 id=&quot;non-blocking-io란-무엇인가요&quot;&gt;Non-blocking I/O란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;여러 I/O 가 실행될 때 하나의 I/O가 다른 I/O에 의해서 block되지 않고 병렬로써 실행&lt;/strong&gt;되는 것을 의미합니다.&lt;/p&gt;
</description>
        <pubDate>Sun, 13 Dec 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2020/12/13/NAVER-Interview-Preparation-5.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2020/12/13/NAVER-Interview-Preparation-5.html</guid>
        
        <category>Smart-Doorlock</category>
        
        <category>Mobius</category>
        
        <category>Node.js</category>
        
        <category>oneM2M</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[기술 면접 준비 - 4일차] 자료구조 &amp; Spring MVC</title>
        <description>&lt;h1 id=&quot;자료구조-data-structure&quot;&gt;자료구조 (Data Structure)&lt;/h1&gt;

&lt;h3 id=&quot;array-란-무엇인가요&quot;&gt;Array 란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Array는 가장 기본적인 자료 구조이며, 논리적 저장 순서와 물리적 저장 순서가 일치 합니다.&lt;/strong&gt; 원소의 인덱스 값을 알고 있으면 검색에 O(1)이 걸리지만 삽입이나 삭제등이 필요한 경우 원소들을 shift해줘야 하기 때문에 O(n)의 시간이 걸립니다.&lt;/p&gt;

&lt;h3 id=&quot;linked-list&quot;&gt;Linked List&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;모든 노드들을 링크로 연결한 리스트를 말합니다.&lt;/strong&gt; 이 경우 삭제와 삽입은 O(1)만에 해결할 수 있지만, 원하는 위치에 원소를 삽입하거나 삭제하는 경우 이를 Search하는 시간이 필요하므로 O(n)의 시간이 걸립니다.&lt;/p&gt;

&lt;h3 id=&quot;선형-자료구조와-비선형-자료구조의-차이는-무엇인가요&quot;&gt;선형 자료구조와 비선형 자료구조의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;선형 자료구조는 데이터 요소들이 저장되어 있는 모습을 표현했을 때 직선이고, 비선형 자료구조는 데이터 요소들이 저장되어 있는 모습을 표현했을 때 직선이 아닌 것을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;선형 자료구조의 대표적인 예는 Array, Queue 등이 있고, 비선형 자료구조의 대표적인 예는 Tree, Graph등이 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;stack&quot;&gt;Stack&lt;/h3&gt;

&lt;p&gt;선형 자료구조의 일종으로 &lt;strong&gt;Last In First Out(LIFO)&lt;/strong&gt;의 특징을 가지고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;queue&quot;&gt;Queue&lt;/h3&gt;

&lt;p&gt;선형 자료구조의 일종으로 &lt;strong&gt;First In First Out(FIFO)&lt;/strong&gt;의 특징을 가지고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;tree&quot;&gt;Tree&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;트리는 비선형 자료구조로서 node들과 이를 연결하는 edge들로 구성되어 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;트리는 하나의 루트 노드를 갖는다.&lt;/li&gt;
  &lt;li&gt;트리에는 싸이클이 존재할 수 없습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;binary-tree&quot;&gt;Binary Tree&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;이진 트리란 각 노드가 최대 두개의 자식을 갖는 트리를 말합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;완전 이진 트리: 마지막 레벨을 제외하고 모든 레벨이 완전히 채워져 있고 마지막 레벨의 노드가 왼쪽에서 오른쪽으로 채워지는 이진 트리&lt;/li&gt;
  &lt;li&gt;진 이진 트리 : 모든 노드가 0개 또는 2개의 자식 노드를 갖는 이진 트리&lt;/li&gt;
  &lt;li&gt;포화 이진 트리 : 모든 레벨에 노드과 꽉 찬 이진 트리를 가르킨다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;binary-search-tree&quot;&gt;Binary Search Tree&lt;/h3&gt;

&lt;p&gt;중복된 데이터를 갖는 노드가 없다는 가정하에 말씀드리겠습니다. &lt;strong&gt;부모 노드가 왼쪽 자식보다 크고 오른쪽 자식보다는 작은 규칙을 만족하는 이진 트리를 Binary Search Tree&lt;/strong&gt; 라고 합니다. Binary Search Tree에서 탐색, 삽입, 삭제 연산의 시간 복잡도는 O(h) 즉, 높이에 비례합니다. 하지만 완전 이진 트리인 경우에 O(log n)으로 표현할 수도 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;heap&quot;&gt;Heap&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;힙(heap)은 최대 또는 최소를 빠르게 찾아내기 위해 만들어진 완전이진트리를 기본으로 한 자료구조로서 부모노드와 자식 노드간에 대소관계가 성립한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;힙의 시간복잡도는 최대 및 최소를 검색 시간복잡도는 O(1)입니다. 하지만 heapify의 시간 복잡도는 O(log N)이기 때문에 고민해 봄직 하다.&lt;/p&gt;

&lt;h3 id=&quot;heap과-bst의-차이는-무엇인가요&quot;&gt;Heap과 BST의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;힙은 최대 및 최소를 찾는데 (O(1)) 좋지만, BST는 모든 원소들을 찾는데 (O(log n)) 유용합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;red-black-tree&quot;&gt;Red Black Tree&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Red Black Tree란 자가 균형 이진 탐색 트리의 한 종류로써 이진 탐색 트리의 단점인 편향성을 색깔을 통해서 보완하기 위한 자료구조이다.&lt;/strong&gt; 검색, 삽입, 삭제의 시간 복잡도는 O(log n)이다.&lt;/p&gt;

&lt;h3 id=&quot;hash-table&quot;&gt;Hash Table&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Hash Table이란, 임의의 길이를 가진 키를 고정된 길이의 Hash Code로 변환시켜서 저장하는 자료구조를 의미&lt;/strong&gt;하구요 연산시 시간복잡도는 O(1)입니다.&lt;/p&gt;

&lt;h3 id=&quot;hash-function&quot;&gt;Hash Function&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;해시란 임의의 길이를 가진 데이터를 고정된 길이를 가진 데이터로 매핑 하는 함수를 해시 함수&lt;/strong&gt;라고 하며 이로부터 얻어진 값을 해시 값, 해시 코드, 짧게 말해서 해시라고도 합니다. 항상 Collision 즉, 서로 다른 두 개의 키가 같은 인덱스로 hashing되는 경우를 조심하는 알고리즘을 구현해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;graph란-무엇인가요&quot;&gt;Graph란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Node들과 이를 연결하는 Edge들을 모아 놓은 자료구조이다.&lt;/strong&gt; 방향 및 비방향 그래프 모두 존재하며, 사이클 및 self-loop 가 존재해도 상관 없다.&lt;/p&gt;

&lt;p&gt;그래프의 구현 방법에는 인접 행렬과, 인접 리스트 등이 존재한다.&lt;/p&gt;

&lt;h3 id=&quot;그래프-탐색에는-어떠한-방법이-존재하나요&quot;&gt;그래프 탐색에는 어떠한 방법이 존재하나요?&lt;/h3&gt;

&lt;p&gt;그래프는 따로 규칙이 존재하지 않기 때문에 &lt;strong&gt;모든 정점을 탐색&lt;/strong&gt;해야만 하구요, &lt;strong&gt;특정 정점을 기준으로 넓게 탐색하기 전에 깊게 탐색하는 방법인 DFS&lt;/strong&gt;와 &lt;strong&gt;깊게 탐색하기 전에 넓게 탐색하는 방법인 BFS&lt;/strong&gt;가 존재합니다.&lt;/p&gt;

&lt;p&gt;DFS와 BFS를 인접리스트로 구현할 경우에 시간복잡도는 O(V+E) 이구요, 인접 행렬로써 구현할 경우에 시간복잡도는 O(V^2)입니다.&lt;/p&gt;

&lt;h3 id=&quot;minimum-spanning-tree란-무엇인가요&quot;&gt;Minimum Spanning Tree란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spanning Tree란 그래프 G의 모든 V가 Cycle 없이 연결된 형태를 말하구요, 여러 Spanning Tree 중 Edge의 가중치의 합이 가장 작은 것을 Minimum Spanning Tree&lt;/strong&gt;라고 합니다.&lt;/p&gt;

&lt;h3 id=&quot;minimum-spanning-tree를-구하는-방법에는-무엇이-있나요&quot;&gt;Minimum Spanning Tree를 구하는 방법에는 무엇이 있나요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MST를 구하는 방법 중 탐욕적인 방법으로 Edge 값이 가장 작은 것부터 탐색하는 Kruskal Algorithm과 Prim Algorithm이 존재합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Kruskal의 시간 복잡도는 O(ElogE)이고, Prim Algorithm의 시간 복잡도는 O(ElogV)이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;spring-mvc&quot;&gt;Spring MVC&lt;/h1&gt;

&lt;h3 id=&quot;mvc-패턴이란-무엇인가요&quot;&gt;MVC 패턴이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MVC 패턴이란 웹 어플리케이션에서 자주 사용하는 디자인 패턴으로 시스템을 크게 Model, View, Controller로 나누어 모듈간에 결합도를 낮추고 응집도를 높이기 위해 사용하는 패턴&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Controller란 요청을 받아서 모델, 뷰와의 상호작용을 통해 적절한 응답을 제공해주는 중계자&lt;/strong&gt;의 역할을 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;모델은 시스템에서 사용하는 도메인 모델&lt;/strong&gt; 등을 의미합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;뷰는 사용자에게 제공하는 화면&lt;/strong&gt; 등을 의미합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-mvc의-구조에-대해서-설명해-주실-수-있나요&quot;&gt;Spring MVC의 구조에 대해서 설명해 주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring MVC의 시작은 DispatcherServlet이라고 할 수 있습니다. DispatcherServlet은 사용자의 HTTP 요청을 처리하기 위하여 등록된 핸들러로 디스패치하여 매핑 및 예외 처리 기능을 제공&lt;/strong&gt;합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DispatcherServlet으로 요청이 들어왔을 때 웹 서버의 대략적인 과정은 다음과 같습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;DispatcherServlet으로 HTTP Request가 들어온다.&lt;/li&gt;
  &lt;li&gt;DispatcherServlet은 HandlerMapping을 통해서 요청 URL 등의 정보와 맵핑되는 적절한 Controller를 검색한다.&lt;/li&gt;
  &lt;li&gt;DispatcherServlet은 HandlerAdapter를 통해 HandlerMapping에서 결정된 핸들러 정보를 통해서 컨트롤러를 호출한다.&lt;/li&gt;
  &lt;li&gt;Controller는 요청을 받아 적절한 비즈니스 로직을 태운다.&lt;/li&gt;
  &lt;li&gt;비즈니스 로직이 끝난 후 사용자에게 응답 할 View의 이름을 DispatcherServlet을 통해서 View Resolver로 전달한다.&lt;/li&gt;
  &lt;li&gt;View Resolver는 View name에 해당하는 view를 검색한다. (prefix, suffix, resource path)&lt;/li&gt;
  &lt;li&gt;응답 받을 View가 존재한다면 DispatcherServlet으로 View를 가져오고 사용자에게 응답한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;servlet이란-무엇인가요&quot;&gt;Servlet이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HTTP 서블릿이란 자바단에서 클라이언트의 요청을 처리하고 응답을 제공하는 객체라고 할 수 있습니다.&lt;/strong&gt; 서블릿 하나당 스레드 하나가 할당 된다.&lt;/p&gt;

&lt;h3 id=&quot;spring-mvc를-위한-필수-설정&quot;&gt;Spring MVC를 위한 필수 설정&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Web Deployment Descriptor(web.xml)이란 클라이언트가 어떤 URL을 요청했을 때 어떤 Servlet 파일을 실행시킬 것인지를 매핑해놓은 파일이다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Servlet 설정&lt;/li&gt;
  &lt;li&gt;ContextConfigLocation 설정 : Context Loader가 load할 수 있는 설정 파일의 위치 명시&lt;/li&gt;
  &lt;li&gt;Filter 설정&lt;/li&gt;
  &lt;li&gt;SpringSecurityFilterChain&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Spring MVC Configuration Files&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;dispatcher-servlet.xml&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Controller 관련&lt;/li&gt;
      &lt;li&gt;mvc:annotation-driven 설정&lt;/li&gt;
      &lt;li&gt;Component-scan 관련&lt;/li&gt;
      &lt;li&gt;정적인 data 위치 mapping&lt;/li&gt;
      &lt;li&gt;ViewResolver 관련 (prefix, suffix, …)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;applicationContext.xml&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;DataSource 주입&lt;/li&gt;
      &lt;li&gt;Properties 등록&lt;/li&gt;
      &lt;li&gt;tx:annotation-driven 설정 (어노테이션 기반 트랜잭션 동작 설정)&lt;/li&gt;
      &lt;li&gt;Session Factory 등록 및 TransactionManager 설정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-boot-mvc와-spring-mvc의-차이&quot;&gt;Spring Boot MVC와 Spring MVC의 차이&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring Boot기반 MVC는 기존에 Spring MVC에서 필수적으로 설정해야 하는 톰캣설정 및 web.xml에 관련된 설정을 스프링 부트의 내부모듈에 의해서 구동시 자동설정&lt;/strong&gt; 해준다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@SpringBootApplication 어노테이션은 @ComponentScan, @EnableAutoConfiguration, @Configuration 에노테이션&lt;/strong&gt; 등으로 이루어져 있는데 이게 핵심이다.&lt;/p&gt;

&lt;p&gt;HttpMessageConverter, ViewResolver, Resource, jar 등, 톰캣 설정 및 web.xml에 관련된 설정을 스프링 부트의 내부모듈에 의해서 구동시 자동설정 해준다.&lt;/p&gt;

&lt;h3 id=&quot;spring-boot-설정-관련-이슈는-있었는가&quot;&gt;Spring Boot 설정 관련 이슈는 있었는가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring Boot MVC의 자동 설정에 가장 중요한 클래스는 WebMvcAutoConfiguration&lt;/strong&gt;인데 위에  @ConditionalOnMissingBean(WebMvcConfigurationSupport.class)와 같은 애노테이션이 있었습니다.&lt;/p&gt;

&lt;p&gt;즉, WebMvcConfigurationSupport Bean이 존재하면 WebMvcAutoConfiguration bean이 생성되지 않아 web mvc 자동 설정이 되지 않는다는 이야기 입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;우리는 Spring Boot MVC에 설정을 추가하기 위해서는 WebMvcConfigurer를 상속받아서 빈으로 만들어야 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 설정이 추가되는 코드는 &lt;strong&gt;DelegatingWebMvcConfiguration&lt;/strong&gt; 클래스의 로직에서 WebMvcConfigurer Bean들을 주입받고 이를 Spring MVC 설정에 추가합니다.&lt;/p&gt;

&lt;h3 id=&quot;spring-mvc에서-spring-boot-starter가-해주는-것들은-무엇인가요&quot;&gt;Spring MVC에서 Spring Boot Starter가 해주는 것들은 무엇인가요??&lt;/h3&gt;

&lt;p&gt;프로젝트의 pom.xml을 보면 일단 가져오는 &lt;strong&gt;프로젝트 의존성 부터 차이&lt;/strong&gt;가 존재한다. &lt;strong&gt;spring mvc는 spring 프로젝트의 spring-webmvc라는 의존성&lt;/strong&gt;을 가져오고, &lt;strong&gt;spring boot mvc는 spring boot 프로젝트의 spring-boot-starter-web&lt;/strong&gt;을 가져온다.&lt;/p&gt;

&lt;p&gt;spring boot starter web은 기본적인 spring mvc를 사용하기 위한 많은 설정을 자동화 해주고 애노테이션 기반으로 프로젝트의 설정을 할 수 있도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;spring boot web mvc가 해주는 설정들은 다음과 같다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;내장된 웹 애플리케이션 서버(Tomcat, Jetty, Undertow)&lt;/li&gt;
  &lt;li&gt;의존성을 손쉽게 관리할 수 있는 Project Object Model&lt;/li&gt;
  &lt;li&gt;설정의 표준화와 자동화
    &lt;ul&gt;
      &lt;li&gt;Spring Framework의 수 많은 XML 기반의 설정을 Spring Boot의 자동 설정으로 제거하거나 properties 형식과 JavaConfig 형식으로 대체&lt;/li&gt;
      &lt;li&gt;각종 Filter, ViewResolver, DispatcherServlet설정, ComponentScan, Annoation기반 설정 등을 자동으로 설정해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-mvc와-was의-관계&quot;&gt;Spring MVC와 WAS의 관계&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;클라이언트는 tomcat에게 요청을 보내고 tomcat은 URL 및 기타 정보에 따라(web.xml) 처리를 위해 요청을 보낼 서블릿&lt;/strong&gt;을 결정합니다. spring web mvc에서 이 서블릿은 대부분 DispatcherServlet을 의미하고 이를 통해 Controller단으로 들어와 비즈니스 로직을 태운 뒤 적절한 모델을 만들어 뷰에 랜더링한 후 톰캣에게 다시 전송되고 톰캣은 클라이언트에게 다시 전송합니다.&lt;/p&gt;

&lt;h3 id=&quot;executable-jar-file&quot;&gt;Executable Jar File&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring Boot maven plugin을 사용하면 Spring Boot loader가 Tomcat이 내재된 실행가능한 Jar파일을 생성&lt;/strong&gt;해준다. 우리는 이를 통해 jar 파일만 실행시키면 되는 것이니 스프링을 구성할 때 매우 편리하다.&lt;/p&gt;

&lt;h3 id=&quot;spring-mvc에서-exception-이-발생하면-어떻게-되는가&quot;&gt;Spring MVC에서 Exception 이 발생하면 어떻게 되는가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;request mapping 또는 request handler로 부터 예외가 발생하면 DispatcherServlet은 HandlerExceptionResolver구현체가 예외를 처리해 적절한 응답을 클라이언트에게 보낸다.&lt;/strong&gt; 나는 Jackson 사용간에 Deserialize에서 에러 발생을 경험해 보았기 때문에 &lt;strong&gt;DefaultHandlerExceptionResolver&lt;/strong&gt;가 400번 상태 코드를 맵핑해서 사용자에게 응답해주었다.&lt;/p&gt;

&lt;h3 id=&quot;spring-message-converter는-어떻게-동작하는가&quot;&gt;Spring Message Converter는 어떻게 동작하는가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring Boot는 HttpMessageConvertersAutoConfiguration을 이용해서 Converter 서비스도 자동 구성해줌으로 이를 이용하면 된다. Json Parsing을 위해 MappingJackson2HttpMessageConverter가 사용된다.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 12 Dec 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2020/12/12/NAVER-Interview-Preparation-4.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2020/12/12/NAVER-Interview-Preparation-4.html</guid>
        
        <category>Data-Structure</category>
        
        <category>Spring-MVC</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[기술 면접 준비 - 3일차] 자바 &amp; 객체 지향 프로그래밍</title>
        <description>&lt;h1 id=&quot;java&quot;&gt;Java&lt;/h1&gt;

&lt;h3 id=&quot;java-8을-많이-공부하셨다고-했는데-java-8의-특징이-뭔가요&quot;&gt;Java 8을 많이 공부하셨다고 했는데 Java 8의 특징이 뭔가요?&lt;/h3&gt;

&lt;p&gt;Java 8은 Java에 &lt;strong&gt;함수형 프로그래밍이 처음으로 도입된 버젼&lt;/strong&gt;이며 새롭게 도입된 기능으로는 &lt;strong&gt;Stream API, Lamda 표현식, Method Reference, Default Method, Optional Class&lt;/strong&gt; 등이 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;stream-api란-무엇인가요&quot;&gt;Stream API란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Stream API란 자바에서의 일련의 데이터 요소인 배열이나 컬렉션 등의 데이터를 처리하기 위한 API 입니다.&lt;/strong&gt; Stream API의 특징은 멀티 스레드를 활용해서 병렬로 연산을 수행할 수 있고, 내부 반복으로 연산을 수행하기 때문에 코드가 매우 간단해진다는 것을 알 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;lamda-expression은-무엇인가요&quot;&gt;Lamda Expression은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Lamda Expression이란 Functional Interface를 구현하는 객체를 만들지 않고도 메서드로 전달할 수 있는 익명 함수를 단순화한 것입니다.&lt;/strong&gt; 즉, 특정 메소드의 사용을 위해서 일회용 객체를 만들지 않아도 됨으로 성능면에서 좋다고 생각합니다.&lt;/p&gt;

&lt;h3 id=&quot;functional-interface란-무엇인가요&quot;&gt;Functional Interface란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Functional Interface란 정확히 하나의 추상 메서드가 정의된 인터페이스&lt;/strong&gt;를 의미합니다. 예로는 Predicate, Comparator, Runnable 인터페이스등이 존재합니다.&lt;/p&gt;

&lt;h3 id=&quot;method-reference는-무엇인가요&quot;&gt;Method Reference는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;람다 표현식 직접 작성하는 대신해 기존의 메서드 정의를 이용하는 방법&lt;/strong&gt;입니다. 기존의 메서드의 정의와 동일한 람다 표현식을 매번 작성하는 불편함에서 나온 기법이며, 가독성을 높일 수 있다고 생각합니다. 하지만, 저는 아직은 잘 익숙하지 않아서 IDE에 도움을 많이 받고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;optional-클래스는-무엇인가요&quot;&gt;Optional 클래스는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;Optional 클래스란 Java 8에서 새롭게 등장한 클래스이구요 &lt;strong&gt;util 패키지&lt;/strong&gt; 속해 있습니다. &lt;strong&gt;Optional 클래스는 자바 프로그래머들이 가장 자주 접하는 예외인 NPE를 관리 하기 위해 기존 객체를 감싼 Wrapper Class 입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;default-method-란-무엇인가요&quot;&gt;Default Method 란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;메서드 구현을 포함하는 인터페이스를 정의하기 위해 사용되어집니다.&lt;/strong&gt; 이 인터페이스를 구현하는 클래스는 인터페이스에 디폴트 메소드도 상속받게 되기 때문에 서브클래스는 최소한의 메소드만 구현해도 됩니다. &lt;strong&gt;즉, 인터페이스는 서브클래스가 구현해야 하는 최소한의 인터페이스를 유지할 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;추상-클래스와-인터페이스의-차이는-무엇인가요&quot;&gt;추상 클래스와 인터페이스의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;추상 클래스와 인터페이스의 가장 큰 차이는 사용법에서 존재한다고 생각합니다. &lt;strong&gt;추상 클래스는 멤버와, 메소드 명세, 구현 등 모든 부분이 상속이 되기 때문에 대부분의 경우 코드의 재사용을 위해서 사용되는 경우가 많고, 인터페이스는 메소드 Java 8 이전에는 명세만 상속되었기 때문에 메소드 명세의 상속을 위해서 사용&lt;/strong&gt;된다고 생각합니다. 또한 단일 상속을 지원하는 자바의 특성상 클래스를 상속하는 추상화 계층이 많아질 수록 결합도가 증가하기 때문에 도메인에 맞추어서 잘 사용해야 한다고 생각합니다.&lt;/p&gt;

&lt;h3 id=&quot;오버라이딩과-오버로딩의-차이는-무엇인가요&quot;&gt;오버라이딩과 오버로딩의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;오버라이딩이란 서브클래스가 상속받은 메소드를 클래스에 맞게 재구현 하는 것을 의미&lt;/strong&gt;하구요 &lt;strong&gt;오버로딩이란 동일한 메서드 이름이지만 매개 변수 타입이나 개수가 다른 즉, 다른 명세를 가진 함수를 같은 클래스 내에 만드는 것을 의미&lt;/strong&gt;합니다.&lt;/p&gt;

&lt;h3 id=&quot;업캐스팅과-다운캐스팅의-차이는-무엇인가요&quot;&gt;업캐스팅과 다운캐스팅의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;일단 Java에서는 슈퍼 클래스의 변수에 서브 클래스의 객체가 들어가는 것을 업캐스팅&lt;/strong&gt;이라구 하구요, &lt;strong&gt;업캐스팅 된 변수의 타입을 서브 클래스로 변경하는 것을 다운 캐스팅&lt;/strong&gt;이라고 합니다. &lt;u&gt;서브 클래스 객체는 슈퍼 클래스의 메소드 명세를 상속 받기 때문에 슈퍼 클래스의 변수에 들어가 슈퍼 클래스 인 것처럼 사용될 수 있는 것은 당연하구요, 업 캐스팅 된 변수의 타입이 다시 서브 클래스로 돌아와 본인의 클래스 객체인 것처럼 사용할 수 있는 것도 당연합니다.&lt;/u&gt;&lt;/p&gt;

&lt;h3 id=&quot;제네릭은-이란-무엇인가&quot;&gt;제네릭은 이란 무엇인가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;제네릭은 클래스나 메소드에서 사용할 내부 데이터 타입을 컴파일 시에 미리 지정하는 방법입니다.&lt;/strong&gt; 이를 통해서 클래스나 메소드 내부에서 사용되는 객체의 타입 안정성을 높일 수 있습니다. 기존에는 Object객체를 사용 했지만 이제는 &amp;lt;T&amp;gt;를 사용함으로써 컴파일 시에 타입을 지정할 수 있게 되었고 다운 캐스팅이 필요없게 되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;어디에서-제네릭을-보았나요&quot;&gt;어디에서 제네릭을 보았나요??&lt;/h3&gt;

&lt;p&gt;여러 프로젝트를 진행하면서 제네릭을 보았는데, 특히 Pinpoint 프로젝트를 진행하면서 제네릭을 보았던 경험이 기억에 남습니다. Checker 도메인이 검색하는 Metric 타입을 제네릭 와일드 카드로 지정해 놓고 이를 상속해 서브 타입의 Checker에서 제네릭 타입을 설정해 구현한 경험이 생각 납니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이를 통해 얻었던 장점은 특정 Metric을 검색하는 Checker 클래스를 여러개 만들 필요가 없었고, 컴파일 시에 타입 에러를 받을 수 있어서 확실한 장점이 있었지만, 처음 코드를 보는 사람들한테는 조금 어렵게 보여 가독성 측면에서는 좋지 않았던 것 같습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;자바-컬렉션에-대해서-설명해-주실-수-있나요&quot;&gt;자바 컬렉션에 대해서 설명해 주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;자바에서 컬렉션이란 데이터의 집합, 그룹을 의미하며 이를 저장하고 연산할 수 있는 집합을 의미합니다.&lt;/strong&gt; &lt;strong&gt;Collection 프레임워크는 크게 두개로 나눌 수 있는데요 순서나 집합적인 저장 공간의 명세를 나타내는 Collection 인터페이스와 키와 값으로 데이터를 핸들링하는 명세를 정의하는 Map 인터페이스로 나눌 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Set, List, Queue 인터페이스가 Collection 인터페이스를 상속해서 각 특성에 맞게 명세를 구체화하고 HashMap, TreeMap 등이 Map 인터페이스를 구현해서 컬렉션 프레임 워크를 형성합니다.&lt;/p&gt;

&lt;h3 id=&quot;set-list-queue의-차이를-설명해-주실-수-있나요&quot;&gt;Set, List, Queue의 차이를 설명해 주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;List 인터페이스는 객체의 순서가 있고, 원소가 중복될 수 있는 명세&lt;/strong&gt;를 가지고 있으며 구현체는 ArrayList(동기화 보장 x)가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Queue 인터페이스는 객체를 입력한 순서대로 저장하며, 원소가 중복될 수 있는 명세&lt;/strong&gt;를 가지고 있으며 구현체로는 LinkedList 등이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set 인터페이스는 객체의 순서가 없으며, 동일한 원소를 중복 저장 할 수 없는 명세&lt;/strong&gt;를 가지고 있으며 구현체로는 HashSet, TreeSet 등이 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;linkedlist와-arraylist의-차이는-무엇인가요&quot;&gt;LinkedList와 ArrayList의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ArrayList는 내부적으로 특정 데이터 타입의 배열에서 데이터를 관리하고, LinkedList는 노드에 데이터를 저장하고 앞 뒤 노드의 주소값을 연결지어 데이터를 관리&lt;/strong&gt;합니다.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;삽입 및 삭제시 LinkedList는 O(1)의 시간이 걸리고, ArrayList는 O(n)의 시간이 걸립니다. 하지만 인덱스를 통해서 검색시 ArrayList는 O(1)의 시간이 걸리고 링크르 리스트는 O(n)의 시간이 걸립니다.&lt;/u&gt;&lt;/p&gt;

&lt;h3 id=&quot;hashmap은-무엇인가요&quot;&gt;HashMap은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HashMap은 Hashing을 사용해서 Map 데이터를 관리 및 연산하는 데이터 구조를 의미합니다.&lt;/strong&gt; key 값을 hash 함수를 이용해서 hash code로 바꾸고 이를 저장해서 hashcode를 기반으로 검색하는 자료구조 입니다.&lt;/p&gt;

&lt;h3 id=&quot;hashmap과-hashtable의-차이를-아시나요&quot;&gt;HashMap과 HashTable의 차이를 아시나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HashTable은 동기화 기능을 제공해 주기 때문에 멀티 스레드 환경에서 스레드 세이프하고, HashMap은 동기화 기능을 제공해 주지 않기 때문에 멀티 스레드 환경에서 스레드 세이프 하지 않습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;arraylist와-vector의-차이는&quot;&gt;ArrayList와 Vector의 차이는?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ArrayList와 Vector의 차이는 동기화 제공해주는 자료구조의 차이라고 생각합니다. Vector는 멀티스레드 환경에서 스레드 세이프하고, ArrayList는 스레드세이프 하지 않습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;treemap과-treeset의-차이는&quot;&gt;TreeMap과 TreeSet의 차이는?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;TreeSet과 TreeMap은 둘다 Red Black Tree를 기반으로 이루어져 있습니다. 가장 큰 차이라고 하면 Set과 Map의 차이&lt;/strong&gt; 입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;red black tree는 balanced binary search tree의 한 종류 로써 BST에서 발생하는 불균형 문제를 색깔을 통해서 자체적으로 해결하는 자료구조 입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;garbage-collection이란-무엇인가요&quot;&gt;Garbage Collection이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;가비지 콜렉션이랑 자동 메모리 관리를 구현한 것입니다. 더 이상 사용하지 않는 객체들이 차지하는 Heap 메모리를 관리한다고 알고 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;객체-지향-프로그래밍oop&quot;&gt;객체 지향 프로그래밍(OOP)&lt;/h1&gt;

&lt;h3 id=&quot;객체-지향-프로그래밍이란-무엇인가요&quot;&gt;객체 지향 프로그래밍이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;객체 지향 프로그래밍이란 데이터와 프로세스를 동일한 모듈인 객체에 위치하도록 만들어 객체 간의 협력을 통해서 프로그래밍하는 방식이다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;절차-지향-프로그래밍이란-무엇인가요&quot;&gt;절차 지향 프로그래밍이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;절차 지향 프로그래밍이란 데이터와 프로세스를 별도의 모듈에 위치시키고 위에서부터 순차적으로 실행하는 프로그래밍 방식이다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;객체-지향의-3대-특징인-캡슐화-상속-다형성에-대해서-설명해주세요&quot;&gt;객체 지향의 3대 특징인 캡슐화, 상속, 다형성에 대해서 설명해주세요&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;캡슐화란 데이터와 프로세스를 하나의 객체에 위치하도록 만드는 것을 말한다.&lt;/strong&gt; 이를 통해 객체는 자율적으로 다른 객체들과 협력할 수 있는 객체가 되며 자연스레 시스템의 결합도는 떨어지고 응집도는 올라가게 된다. 이의 결과로서 시스템 전체는 유지보수하기 쉬워지고 추후 변경에 유연하게 대처할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;상속이란 부모 객체의 특징을 그대로 물려받는 것을 의미하고, 자바에서는 인터페이스 상속과 클래스 상속으로 나뉜다.&lt;/strong&gt; 이를 통해 모듈의 재사용성이 높아지고, 다형성을 구현할 수 있다. 하지만 무분별한 상속의 남용은 시스템의 결합도를 올려 추후 변경에 유연하게 대응하지 못하기 때문에 자제해야한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;객체지향에서 다형성이란 같은 요청으로부터 응답이 객체의 타입에 따라 다르게 나타나는 것을 의미합니다.&lt;/strong&gt; 이를 통해 객체지향은 더 유연한 설계를 가질 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;object와-class의-차이는-무엇인가요&quot;&gt;Object와 Class의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Class는 시스템의 정적인 구성요소를 나타내는 것이구요, Object는 클래스의 인스턴스로써 시스템의 동적인 구성 요소&lt;/strong&gt;를 나타냅니다.&lt;/p&gt;

&lt;h3 id=&quot;추상화란-무엇인가요&quot;&gt;추상화란 무엇인가요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;추상화란 특정 개념이나 개체를 보았을 때 특정 관점에서 관심있거나 중요한 부분만 추려내는 작업을 의미합니다.&lt;/strong&gt; 즉, OOP에서 중요한 정보만 객체의 인터페이스로써 표시하고 구현 세부 정보를 숨길 수 있는 OOP의 매우 중요한 기능입니다.&lt;/p&gt;

&lt;h3 id=&quot;디자인-패턴이란-무엇인가요&quot;&gt;디자인 패턴이란 무엇인가요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;소프트웨어를 설계할 때 특정 문맥에서 자주 발생하는 고질적인 문제들이 또 발생했을 때 재사용할 수 있는 설계 패턴&lt;/strong&gt;을 의미합니다.&lt;/p&gt;

&lt;h3 id=&quot;singleton-pattern에-대해서-설명해주세요&quot;&gt;Singleton Pattern에 대해서 설명해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Singleton 패턴이란 시스템에서 인스턴스가 오직 1개만 생성되어야 하는 경우에 사용되는 패턴입니다. 하지만 동시성 문제를 꼭 고려&lt;/strong&gt;해야만 합니다.&lt;/p&gt;

&lt;p&gt;자바와 스프링의 싱글톤 차이점은, 싱글톤 객체의 생명주기가 다르다는 것입니다. &lt;strong&gt;자바에서 싱글톤 객체의 범위는 클래스 로더가 기준이지만, 스프링에서는 어플리케이션 컨텍스트가 기준이 됩니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링에서 빈을 등록할 때 범위(scope)를 지정할 수 잇는데 디폴트가 Singleton이고, prototype, request, session 등이 존재합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;prototype: 컨테이너에 빈을 요청할 때마다 매번 새로운 객체를 만드는 범위를 의미합니다.&lt;/li&gt;
  &lt;li&gt;request: HTTP 요청 하나당 하나의 객체를 만드는 범위를 의미합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;proxy-pattern에-대해서-설명해주세요&quot;&gt;Proxy Pattern에 대해서 설명해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;프록시 패턴이란 특정 객체를 대신해서 프록시 객체가 해당 역할을 수행해주는 것을 의미합니다.(다형성)&lt;/strong&gt; 특정 인터페이스를 상속받는 A 클래스와 Proxy 클래스가 존재하고 Proxy 클래스 내부적으로 A 객체를 사용한다면 인터페이스의 특정 메소드 명세를 사용 했을 때 프록시처럼 동작하게 만들 수 있겠군!&lt;/p&gt;

&lt;h3 id=&quot;association-vs-composition-vs-aggregation의-차이는-무엇인가요&quot;&gt;Association vs Composition vs Aggregation의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;Associaton의 부분 집합으로 Aggregation과 Composition이 존재한다.&lt;/p&gt;

&lt;p&gt;Composition은 A클래스에서 B를 Composition 한다고 했을 때 A가 죽으면 B도 죽는다.&lt;/p&gt;

&lt;p&gt;Aggregation은 A클래스에서 B를 Aggregation 한다고 했을 때 A가 죽어도 B는 죽지 않는다.&lt;/p&gt;

&lt;h3 id=&quot;decorator-pattern에-대해서-설명해주세요&quot;&gt;Decorator Pattern에 대해서 설명해주세요&lt;/h3&gt;

&lt;p&gt;데코레이터 패턴은 프록시 패턴과 구현 방법은 비슷하지만 프록시 패턴은 클라이언트가 최종적으로 돌려 받는 반환값을 조작하지 않고 그대로 전달하는 반면 &lt;strong&gt;데코레이터 페턴은 클라이언트가 받는 반환값에 장식을 덧입힌다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;특정 인터페이스를 상속받는 A 클라스와 Decorator 클래스가 존재하고 Decorator 클래스 내부에서 A 클래스 객체를 사용한다면 인터페이스의 특정 메소드 명세를 사용 했을 때 A 클라스 객체의 반환값에 추가적으로 장식을 덧 붙일 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;adapter-pattern에-대해서-설명해주세요&quot;&gt;Adapter Pattern에 대해서 설명해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;어댑터 패턴은 클래스의 인터페이스를 사용자가 기대하는 다른 인터페이스로 변환하는 패턴입니다.&lt;/strong&gt; 호환성이 없는 인터페이스 때문에 함께 동작할 수 없는 클래스들이 함께 작동하도록 해줍니다.&lt;/p&gt;

&lt;h3 id=&quot;template-method-pattern에-대해서-설명해주세요&quot;&gt;Template Method Pattern에 대해서 설명해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;템플릿 메서드 패턴(Template Method Pattern)이란 알고리즘의 구조를 바꾸지 않고 서브클래스에서 알고리즘의 특정 단계를 재정의하는 것을 의미한다. 즉, 상속을 통해 슈퍼클래스의 기능을 확장할 때 사용하는 가장 대표적인 방법이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ex) Pinpoint의 Checker Domain에서 자주 볼 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;strategy-pattern에-대해서-설명해주세요&quot;&gt;Strategy Pattern에 대해서 설명해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Strategy Pattern이란 전략 객체를 통해서 알고리즘의 구조를 바꿀 수 있는 디자인 패턴을 의미합니다.&lt;/strong&gt; Strategy 인터페이스를 구성하고 이를 구현하는 StrategyA, StrategyB의 구현체를 다르게 함으로써 전략 패턴을 만들 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;객체-지향-설계-5원칙은-무엇인가요&quot;&gt;객체 지향 설계 5원칙은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;객체 지향 설계 5원칙은 SOLID원칙이라고 불리기도 하는데요, &lt;strong&gt;시스템의 결합도는 낮추고 응집도를 높이는 고전 원칙을 객체 지향 관점에서 5가지 원칙으로 재정립&lt;/strong&gt; 한 것입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;단일 책임 원칙(Single Resposibility, SRP)&lt;/strong&gt;: 한 클래스는 하나의 책임만 가지며 그 책임을 완전히 캡슐화해야 한다는 원칙입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;개방 폐쇄 원칙(Open Closed Principle, OCP)&lt;/strong&gt;: 소프트웨어 요소(메서드, 클래스, 모듈)는 확장에 대해 열려 있어야 하고, 수정(변경)에 대해서는 닫혀 있어야 한다는 원칙입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;리스코프 치환 원칙(Liskov Substitution Principle, LSP)&lt;/strong&gt;: 서브 클래스의 인스턴스는 슈퍼 클래스의 인스턴스로 치환할 수 있어야 한다는 원칙입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;인터페이스 분리 원칙(Interface Separation Principle, ISP)&lt;/strong&gt;: 클라이언트가 자신이 이용하지 않는 메서드에 의존하지 않아야 한다는 원칙입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;의존 역전 원칙(Dependency Inversion Principle, DIP)&lt;/strong&gt;: 특정 소프트웨어 요소를 개발하면서 자신보다 변하기 쉬운 것에 의존하지 말라는 원칙입니다. 즉, 추상적인 것에 의존하라는 원칙입니다.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 11 Dec 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2020/12/11/NAVER-Interview-Preparation-3.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2020/12/11/NAVER-Interview-Preparation-3.html</guid>
        
        <category>Java</category>
        
        <category>OOP</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[기술 면접 준비 - 2일차] Spring Framework &amp;&amp; Database</title>
        <description>&lt;h1 id=&quot;spring-framework&quot;&gt;Spring Framework&lt;/h1&gt;

&lt;h3 id=&quot;spring을-많이-공부하셨다고-했는데-spring-framework가-무엇인지-저희에게-설명해-주실-수-있나요&quot;&gt;Spring을 많이 공부하셨다고 했는데, Spring Framework가 무엇인지 저희에게 설명해 주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;스프링 프레임워크란 자바를 위한 오픈소스 애플리케이션 프레임워크로서 &lt;strong&gt;자바 기반 엔터프라이즈 애플리케이션 개발을 위해 다양한 서비스를 제공해주는 프레임워크&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;h3 id=&quot;spring-framework의-특징은-무엇인가요&quot;&gt;Spring Framework의 특징은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;Spring Framework에는 여러 가지 특징이 존재하지만 대표적인 특징을 뽑자면 &lt;strong&gt;IoC, AOP, PSA&lt;/strong&gt;라고 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IoC란 Inversion of Control의 줄임말으로 개발자가 작성한 프로그램의 제어권이 개발자가 아닌 프레임워크에 넘어가 스프링에서 사용자의 코드를 호출하는 것을 말합니다.&lt;/strong&gt; 이는 사실 Spring Framework만의 특징은 아니고, 많은 프로그램들이 IoC를 적용하고 있습니다. &lt;strong&gt;IoC는 DI와 DL에 의해 구현되는데 DI는 클래스 및 계층간에 필요한 의존관계를 빈 설정 정보를 바탕으로 IoC Container가 자동으로 연결해주는 것을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AOP란 Aspect Oriented Programming의 줄임말로 여러 모듈에서 공통적으로 사용하는 기능을 추출하여 핵심 로직에 영향을 끼치지 않게 공통 기능을 끼워 넣는 개발 형태를 의미합니다.&lt;/strong&gt; AOP의 사용 예로는 로깅, 트랜잭션, 보안 등이 있습니다. (사실 이는 자바의 상속이나 합성을 이용해서 구현할 수 있지만, 프로그래머가 작성하는 클래스간의 결합도가 높아진다는 측면에서 좋지는 않다고 생각합니다.) (컴파일 타임, 로드 타임, 런타임 등에서 AOP를 적용 가능하다고 알고 있습니다.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PSA란 Portable Service Abstraction의 줄임말로 추상화 계층을 사용해서 특정 기술을 내부에 숨기고 개발자에게 편의성을 제공하며 제공되는 기술을 다른 기술 스택으로 간편하게 바꿀 수 있는 확장성을 갖고 있는 것이 PSA입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;그렇다면-ioc-conatiner에-대해서는-알고-있나요&quot;&gt;그렇다면 IoC Conatiner에 대해서는 알고 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;IoC 컨테이너란 Bean 즉, IoC Container에서 관리하는 객체의 생성과 관계설정, 사용, 제거 등의 전체 라이프 사이클을 관리해주는 작업을 하는 컨테이너를 IoC 컨테이너라고 부릅니다.&lt;/strong&gt; IoC Container의 대표적인 명세는 BeanFactory인데 요즘은 이를 상속하는 ApplicationContext를 사용하는 추세입니다. ApplicationContext는 Bean Factory의 기능 뿐만 아니라, 메세지 다국화, 이벤트 발행 기능, 리소스 로딩 기능 등의 여러 기능을 명세하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;spring-ioc-container의-bean-등록-방법에는-무엇이-있는가&quot;&gt;Spring IoC Container의 Bean 등록 방법에는 무엇이 있는가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;xml 설정파일을 이용해서 Bean 등록, @Annotatation을 통해 Bean 등록하는 방법 등이 존재합니다.&lt;/strong&gt; 하지만 Annotation 기반의 Bean 등록시에는 Component Scan을 꼭 필요로 하는데요, Component Scan을 직접 등록해 줄 수도 있겠지만 Spring Boot는 Component Scan까지 자동으로 구성해줘, 너무 잘 사용하고 있습니다!!!&lt;/p&gt;

&lt;h3 id=&quot;spring-boot-이야기를-하셨는데-spring-boot와-spring-framework의-차이점은-무엇인가요&quot;&gt;Spring Boot 이야기를 하셨는데, Spring Boot와 Spring Framework의 차이점은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;스프링 부트와 스프링 프레임워크의 가장 큰 차이는 Auto Configuration의 차이인 것 같습니다.&lt;/strong&gt; 한 예로써 Spring MVC 프로젝트를 Spring Framework 기반으로 구성을 한다면, 컴포넌트 스캔, bean 설정, Dispatcher Servlet 설정, View Resolver, JDBC 설정, 웹 jar 설정 등의 다양한 설정을 해야하지만 이를 Spring Boot 기반으로 구성함으로써 초기 개발 환경 세팅에 걸리는 리소스를 많이 아낄 수 있다고 생각합니다.&lt;/p&gt;

&lt;p&gt;스프링 부트 프로젝트를 생성할 시 스프링 부트에서는 내장 서블릿 컨테이너인 톰캣(tomcat)이 자동적으로 설정됩니다.&lt;/p&gt;

&lt;h3 id=&quot;web-server-vs-web-application-server의-차이를-아시나요&quot;&gt;Web Server vs Web Application Server의 차이를 아시나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Web Server는 클라이언트로부터 HTTP 요청을 받아 정적인 컨텐츠인 HTML, image file, css 등을 제공하는 서버&lt;/strong&gt;를 말합니다. Web Server의 예로는 Apach Server, Nginx 등이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web Application Server는 DB 조회나 다양한 로직 처리를 요구하는 동적인 컨텐츠를 제공하기 위해 만들어진 Application Server&lt;/strong&gt;를 말합니다. HTTP를 통해 컴퓨터나 장치에 애플리케이션을 수행해주는 미들웨어입니다. WAS는 Web Container 혹은 Servlet Container라고도 불리며 대표적인 예로는 Tomcat, Jetty 등이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web Server와 WAS를 분리하는 이유는 자원 이용의 효율성 및 장애 극복, 배포 및 유지보수의 편의성을 위해 분리합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;spring-bean을-주입받는-방법에는-무엇이-있나요&quot;&gt;Spring Bean을 주입받는 방법에는 무엇이 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;@Autowired 애노테이션으로 필드에 주입받을 수도 있구요, 생성자를 통해서 주입 받을 수 있고, setter를 통해서 주입 받을 수 있습니다.&lt;/strong&gt; Bean이 주입 될 때 같은 이름 및 같은 타입의 빈이 존재한다면 @Primary 애노테이션으로 우선순위 설정할 수 있고, @Qulifier 애노테이션으로 Bean 이름을 통해서 주입 받을 수 있고, 해당 타입의 빈을 모두 List를 통해서 주입 받을 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;database-system&quot;&gt;Database System&lt;/h1&gt;

&lt;h3 id=&quot;데이터베이스를-사용하는-이유는-무엇인가요&quot;&gt;데이터베이스를 사용하는 이유는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;데이터베이스가 등장하기 전에 데이터는 파일 시스템을 이용하여 관리되었습니다. &lt;strong&gt;이로 인해 데이터의 종속성 문제와 무결성 문제가 발생하였으며 이를 해결하기 위한 데이터베이스 시스템이 등장하게 되었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;데이터베이스의-특징은-무엇인가요&quot;&gt;데이터베이스의 특징은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;데이터베이스의 특징은 크게 5가지로 나눌 수 있고 이는 &lt;strong&gt;데이터의 독립성, 무결성, 보안성, 일관성, 중복 최소화&lt;/strong&gt;를 의미합니다.&lt;/p&gt;

&lt;h3 id=&quot;primary-key-foreign-key-entity-relation-모델에-대해서-설명해주세요&quot;&gt;Primary Key, Foreign Key, Entity Relation 모델에 대해서 설명해주세요&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Primary Key는 테이블에서 각 Row를 유일하게 구분하는 Column을 의미&lt;/strong&gt;하구요, &lt;strong&gt;Foreign Key는 하나의 테이블에 있는 Column중 다른 테이블의 행(row)을 식별할 수 있는 키&lt;/strong&gt;를 말한다. &lt;strong&gt;Entity Relation은 데이터베이스 설계에서 엔티티간의 관계를 표시해주기 위한 모델&lt;/strong&gt;을 의미한다.&lt;/p&gt;

&lt;h3 id=&quot;쿼리-문제&quot;&gt;쿼리 문제&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/interview/naver-interview-preparation2-1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;테이블 생성 - 테이블 명은 ‘student’로 할 것&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CREATE TABLE student (name VARCHAR(10) NOT NULL, num INT NOT NULL, pnum VARCHAR(20) NOT NULL, address VARCHAR(10) NOT NULL, email VARCHAR(10) NOT NULL, sec VARCHAR(2) NOT NULL, PRIMARY KEY(num));&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;테이블 수정 - 대학교(university)를 추가하고 null 값을 허용하게 하라&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ALTER TABLE student ADD university VARCHAR(10) NULL;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;데이터 삽입 - 임의의 데이터 2개를 추가하라&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;INSERT INTO student (name, num, pnum, address, email, sex) VALUES (“홍길동”, 11, 010-1111-1111, “서울시”, “kim@com”, “여”);&lt;/li&gt;
  &lt;li&gt;INSERT INTO student (name, num, pnum, address, email, sex) VALUES (“홍길동”, 11, 010-1111-1111, “서울시”, “kim@com”, “여”);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;데이터 수정 - 홍길동의 핸드폰 번호를 010-5555-5555로 변경하라&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;UPDATE student SET pnum=”010-5555-5555” WHERE name=”홍길동”;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;데이터 검색&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;전체 자료 조회 : SELECT * FROM student;&lt;/li&gt;
  &lt;li&gt;학번이 3번보다 이상인 사람들의 이름과 학번을 조회 : SELECT name, num FROM student WHERE num &amp;gt;= 3 ORDER BY num DESC;&lt;/li&gt;
  &lt;li&gt;김자로 시작하는 학생의 이름을 조회 : SELECT name FROM student WHERE name LIKE ‘김%’;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;ORDER BY xx DESC (내림차순)&lt;/li&gt;
    &lt;li&gt;ORDER BY xx ASC (오름차순)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;데이터 삭제&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모든 자료(행) : DELETE FROM students;&lt;/li&gt;
  &lt;li&gt;특정 자료(행) : DELETE FROM students WHERE name=”홍길동”;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;join이란-무엇인가&quot;&gt;Join이란 무엇인가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Join 이란 2개 이상의 테이블에서 조건에 맞는 데이터를 추출하기 위하여 사용하는 쿼리문&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;h3 id=&quot;조인에는-어떠한-종류들이-있는가&quot;&gt;조인에는 어떠한 종류들이 있는가?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Inner Join: 2개 이상의 테이블에서 교집합만을 추출&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;ex) SELECT A.name, B.age FROM tableA A INNER JOIN tableB B ON A.no_emp = B.no_emp&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Left Join: 2개 이상의 테이블에서 from에 해당하는 부분을 추출&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;ex) SELECT A.name, B.age FROM tableA A LEFT JOIN tableB B ON A.no_emp = B.no_emp&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Right Join : 2개 이상의 테이블에서 from과 join하는 테이블에 해당하는 부분을 추출&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;ex) SELECT A.name, B.age FROM tableA A RIGHT JOIN tableB B ON A.no_emp = B.no_emp&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Outer Join : 아웃터 조인 또는 풀 조인이라고 불림, 2개 이상의 테이블에서 모든 테이블에 해당하는 부분을 추출&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;ex) SELECT A.name, B.age FROM tableA A OUTER JOIN tableB B ON A.no_emp = B.no_emp&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인덱스index란-무엇인가요&quot;&gt;인덱스(Index)란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스의 데이터를 빠르게 검색 및 정렬하기 위해서 인덱스를 두는 방법&lt;/strong&gt;입니다. (일반적인 책 뒤에 있는 색인을 보는 방법과 비슷합니다.)&lt;/p&gt;

&lt;h3 id=&quot;dbms에서-사용하고-잇는-index-자료구조는-무엇인가요&quot;&gt;DBMS에서 사용하고 잇는 Index 자료구조는 무엇인가요??&lt;/h3&gt;

&lt;p&gt;대표적으로 B+ Tree 인덱스 알고리즘과, Hash 인덱스 알고리즘이 존재하는 것으로 알고 있습니다. &lt;strong&gt;B+ Tree 인덱스는 칼럼의 값을 변형하지 않고, 원래의 값을 이용해 인덱싱하는 알고리즘이고, Hash 인덱스 알고리즘은 칼럼의 값으로 해시 값을 계산해서 인덱싱하는 알고리즘&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;h3 id=&quot;hash란-무엇인가요&quot;&gt;Hash란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;해시란 임의의 길이를 가진 데이터를 고정된 길이를 가진 데이터로 매핑한 값입니다.&lt;/strong&gt; 이렇게 매핑 하는 함수를 해시 함수라고 하며 이로부터 얻어진 값을 해시 값, 해시 코드, 짧게 말해서 해시라고도 합니다.&lt;/p&gt;

&lt;p&gt;해시의 단점은 정렬할 수 없고, 순서에 따라 값을 가져올 수도 없기 때문에 &lt;u&gt;상하관계가 있거나, 순서가 중요한 데이터의 경우 Hash와 어울리지 않는다는 것이 단점&lt;/u&gt;입니다. 또한 Hash Function의 의존도가 높고, 공간 효율성이 떨어진다는 점이 단점입니다. 하지만 평균 데이터 처리의 시간복잡도는 O(1)(상수 시간)에 가깝기 때문에 사용하기 빠릅니다.&lt;/p&gt;

&lt;h3 id=&quot;트랜잭션transaction이란-무엇인가요&quot;&gt;트랜잭션(Transaction)이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;트랜잭션은 데이터베이스의 상태를 변환시키는 하나의 논리적 기능을 수행하기 위한 작업의 단위 또는 한꺼번에 모두 수행되어야 할 일련의 연산들&lt;/strong&gt;을 의미한다.&lt;/p&gt;

&lt;h3 id=&quot;트랜잭션transaction의-성질은-무엇인가요&quot;&gt;트랜잭션(Transaction)의 성질은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;트랜잭션의 성질은 ACID라고 불리는 &lt;strong&gt;원자성(Atomicity), 일관성(Consistency), 독립성(Isolation), 지속성(Durability)&lt;/strong&gt;이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;원자성은 트랜잭션의 연산이 데이터베이스에 모두 반영되든지 아니면 전혀 반영되지 않아야 한다라는 것을 의미합니다.&lt;/li&gt;
  &lt;li&gt;일관성은 트랜잭션이 그 실행을 성공적으로 완료된 다음의 상태에서도 데이터베이스느 언제나 일관성 있는 데이터를 보장해야 한다는 것을 의미합니다.&lt;/li&gt;
  &lt;li&gt;독립성은 각각의 트랜잭션은 서로 간섭없이 독립적으로 수행되어야 한다는 것을 의미합니다.&lt;/li&gt;
  &lt;li&gt;지속성은 성공적으로 완료된 트랜잭션의 결과는 영구적으로 데이터베이스에 작업의 결과가 저장되어야 한다는 것을 의미합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;정규화는-무엇인가요&quot;&gt;정규화는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;정규화란 데이터베이스에서 중복을 최소화하고 갱신 이상을 없애기 위해 하나의 테이블을 둘 이상으로 분리하는 작업&lt;/strong&gt;이다. 갱신 이상에는 삽입 이상, 삭제 이상, 수정 이상 등을 포함한다.&lt;/p&gt;

&lt;h3 id=&quot;정규형에는-무엇이-있는가&quot;&gt;정규형에는 무엇이 있는가?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1차 정규형: 각 로우마다 컬럼의 값이 1개씩만 있어야 하는 형태를 의미합니다. 이를 컬럼이 원자값(Atomic Value)를 갖는다고 합니다.
    &lt;ul&gt;
      &lt;li&gt;각 로우의 컬럼이 값이 1개 이상일 경우 1차 정규형을 만족하지 못한다고 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2차 정규형: &lt;strong&gt;주키가 합성키&lt;/strong&gt;며 부분종속(기본키 중에 특정 컬럼에만 종속된 컬럼)이 없어야 한다는 것입니다. 테이블의 모든 컬럼이 완전 함수적 종속을 만족하는 것입니다.
    &lt;ul&gt;
      &lt;li&gt;주키가 합성키이며, 기본키 중에서 특정 컬럼에만 종속된 컬럼이 있을 경우 2차 정규형을 만족하지 못한다고 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3차 정규형: 어떠한 비주요 애트리뷰트도 기본키에 대해서 이행적으로 종속되지 않으면 제 3 정규형을 만족한다고 볼 수 있다. 즉, X-&amp;gt;Y, Y-&amp;gt;Z의 경우에 의해서 추론될 수 있는 X-&amp;gt;Z의 종속관계가 없는 경우를 의미한다.
    &lt;ul&gt;
      &lt;li&gt;일반 컬럼이 다른 일반 컬럼에 종속되는 경우 제 3정규형을 만족하지 못한다고 볼 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BCNF 정규형: 3차 정규형을 만족하면서 모든 결정자가 후보키 집합에 속한 정규형입니다.
    &lt;ul&gt;
      &lt;li&gt;ex) 일반 컬럼이 후보키를 결정하는 경우에 3차 정규형을 만족하면서 BCNF는 만족하지 않는 경우이다. =&amp;gt; 테이블 분리가 필요하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nosql이란-무엇인가요&quot;&gt;NoSQL이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;관계형 데이터 모델을 지양하며 대량의 분산된 데이터를 저장하고 조회하는데 특화되어있으며 스키마 없이 사용 가능하거나 느슨한 스키마를 제공하는 저장소를 말합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NoSQL은 SQL보다 덜 제한적인 일관성 모델을 이용하는 데이터의 저장 및 검색을 위한 매커니즘을 제공합니다.&lt;/li&gt;
  &lt;li&gt;단순 검색 및 추가 작업을 위한 매우 최적화된 key-value 저장 공간을 사용합니다.&lt;/li&gt;
  &lt;li&gt;빅데이터 시대에 따라 많은 양의 데이터를 효율적으로 처리하기 위해 등장하였습니다.&lt;/li&gt;
  &lt;li&gt;분산형 구조를 통해 여러 대의 서버에 분산해 저장하고, 분산시에는 데이터를 상호 복제에 특정 서버에 장애가 발생했을 때에도 데이터의 유실이나 서비스 중지가 없는 형태의 구조를 갖고 있습니다.&lt;/li&gt;
  &lt;li&gt;HBase, MongoDB 등이 있습니다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 10 Dec 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2020/12/10/NAVER-Interview-Preparation-2.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2020/12/10/NAVER-Interview-Preparation-2.html</guid>
        
        <category>Spring</category>
        
        <category>Framework</category>
        
        <category>Database</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[기술 면접 준비 - 1일차] 운영체제</title>
        <description>&lt;h1 id=&quot;기술-면접-준비-1일차-포스팅---운영체제&quot;&gt;기술 면접 준비 1일차 포스팅 - 운영체제&lt;/h1&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;코어-core&quot;&gt;코어 (Core)&lt;/h2&gt;

&lt;h3 id=&quot;코어란-무엇인가요&quot;&gt;코어란 무엇인가요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CPU의 기본 계산 단위&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;프로세스-process&quot;&gt;프로세스 (Process)&lt;/h2&gt;

&lt;h3 id=&quot;프로세스는-무엇인가요&quot;&gt;프로세스는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;프로세스란 실행 중인 프로그램을 의미하고 보조저장장치로부터 메모리에 적재되어 &lt;strong&gt;CPU의 할당을 받을 수 있는 단위&lt;/strong&gt;를 말합니다.&lt;/p&gt;

&lt;h4 id=&quot;프로세스의-메모리-구조는-어떻게-되죠&quot;&gt;프로세스의 메모리 구조는 어떻게 되죠??&lt;/h4&gt;

&lt;p&gt;프로세스는 기본적으로 실행 코드가 저장되는 &lt;strong&gt;text 영역&lt;/strong&gt;, 전역 변수 등을 수록하는 &lt;strong&gt;data 영역&lt;/strong&gt;, 프로세스 실행 중에 동적으로 할당되는 메모리인 &lt;strong&gt;heap 영역&lt;/strong&gt;, 함수의 매개변수, 복귀 주소와 로컬 변수와 같은 임시 자료를 갖는 &lt;strong&gt;stack 영역&lt;/strong&gt;으로 이루어져 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;프로세스는-운영체제에-어떻게-저장-되죠&quot;&gt;프로세스는 운영체제에 어떻게 저장 되죠??&lt;/h4&gt;

&lt;p&gt;프로세스는 &lt;strong&gt;PCB&lt;/strong&gt;라는 자료구조를 통해서 저장되어집니다. PCB란 Process Control Block의 줄임말으로 특정 &lt;strong&gt;프로세스에 대한 중요한 정보를 저장하고 있는 운영체제의 자료구조&lt;/strong&gt;이고 이는 &lt;u&gt;PID, Process Status, PC, CPU 레지스터, CPU 스케줄링 정보&lt;/u&gt; 등으로 구성되어 집니다.&lt;/p&gt;

&lt;h3 id=&quot;스레드-thread&quot;&gt;스레드 (Thread)&lt;/h3&gt;

&lt;h4 id=&quot;스레드란-무엇인가요&quot;&gt;스레드란 무엇인가요?&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;스레드는 프로세스의 CPU 이용을 위한 기본 단위&lt;/strong&gt;로 프로세스의 주소 공간이나 자원등을 공유해 프로세스를 여러 실행 흐름으로 실행시킬 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;멀티-스레딩이란-무엇인가요&quot;&gt;멀티 스레딩이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;하나의 프로세스를 다수의 실행 단위 즉, 여러개의 스레드로 구분&lt;/strong&gt;하여 프로세스의 자원을 공유해 &lt;strong&gt;처리 능력을 향상&lt;/strong&gt; 시키는 것을 멀티스레딩이라고 합니다.&lt;/p&gt;

&lt;h4 id=&quot;스택을-스레드마다-독립적으로-할당하는-이유가-있나요&quot;&gt;스택을 스레드마다 독립적으로 할당하는 이유가 있나요?&lt;/h4&gt;

&lt;p&gt;스택은 함수의 인자, 복귀 주소, 지역 변수 등을 저장하기 위해 사용되는 메모리 공간이므로 &lt;strong&gt;스택 메모리 공간이 독립적이라는 것은 독립적인 함수 호출이 가능하다는 것이고 이는 독립적인 실행 흐름이 추가&lt;/strong&gt;되는 것이기 때문에 프로세스를 여러 실행 흐름으로 만들기 위해서는 스레드에 스택을 독립적으로 할당해야 합니다.&lt;/p&gt;

&lt;h4 id=&quot;pc-register를-스레드마다-독립적으로-할당하는-이유&quot;&gt;PC Register를 스레드마다 독립적으로 할당하는 이유&lt;/h4&gt;

&lt;p&gt;PC 값은 다음에 실행될 명령어의 주소를 나타내므로 &lt;strong&gt;프로세스의 개별 실행 흐름인 스레드가 독립적으로 명령어들을 실행하기 위해선 스레드에 PC 레지스터가 독립적으로 할당&lt;/strong&gt;되어야 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;멀티-스레드-multithread&quot;&gt;멀티 스레드 (MultiThread)&lt;/h2&gt;

&lt;h3 id=&quot;멀티-스레드의-장단점은-무엇인가요&quot;&gt;멀티 스레드의 장단점은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;멀티 스레드를 통해 하나의 실행 흐름인 프로세스를 여러 개의 실행 흐름으로 만들 수 있습니다. 이를 통해 프로세스의 처리 능력 향상과 자원의 소모가 줄어드는 것을 기대할 수 있습니다. 하지만 여러 개의 스레드가 동일한 자원을 접근할 경우 경쟁 조건이 발생할 수 있으며 동기화를 신경 써줘야 합니다.&lt;/strong&gt; 스레드간의 동기화를 위한 동기화 기법들은 매우 다양하며 잘못 사용할 경우 병목 현상을 발생시킬 수 있어 이를 사용하기 위해 많은 자원이 필요하다는 것이 단점입니다.&lt;/p&gt;

&lt;h3 id=&quot;멀티-스레드와-멀티-프로세스의-차이는-무엇인가요&quot;&gt;멀티 스레드와 멀티 프로세스의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;멀티 스레드와 멀티 프로세스의 차이는 여러 실행흐름을 프로세스를 통해서 만드느냐 아니면 프로세스 내의 스레드를 통해서 만드느냐의 차이입니다.&lt;/strong&gt; 이 두가지 기법 다 동시에 여러 작업을 수행한다는 점에서 목적은 같지만, 서로 장단점이 존재하기 때문에 개발 도메인에서 적합한지, 단점이 뭐가 있고, 장점은 뭐가 있는지, 왜 이 기법을 사용해야 하는지에 대해 팀 내에서 깊게 논의 한 후 시스템에 적용해야 한다고 생각합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;스케줄러-scheduler&quot;&gt;스케줄러 (Scheduler)&lt;/h2&gt;

&lt;h3 id=&quot;프로세스-스케줄러란-무엇인가요&quot;&gt;&lt;strong&gt;프로세스 스케줄러란 무엇인가요??&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;멀티 프로세스 기법을 사용하는 시스템은 프로세스의 실행 순서를 스케줄링 해야만 합니다. 이러한 &lt;strong&gt;프로세스의 실행 순서를 스케줄링하는 도구를 프로세스 스케줄러&lt;/strong&gt;라고 합니다.&lt;/p&gt;

&lt;h3 id=&quot;프로세스-스케줄러에는-어떠한-것들이-존재하죠&quot;&gt;&lt;strong&gt;프로세스 스케줄러에는 어떠한 것들이 존재하죠?&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;프로그램이 저장되어 있는 디스크에서 메모리로 프로세스 스케줄링을 담당하는 Job Schduler, CPU와 메모리 사이의 스케줄링을 담당하는 CPU Schecudler, 메모리에서 디스크로 프로세스 스케줄링을 담당하는 Swapper등이 있는걸로 알고 있습빈다.&lt;/p&gt;

&lt;h3 id=&quot;cpu-스케줄러란-무엇인가요&quot;&gt;CPU 스케줄러란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ready Queue에 있는 프로세스들을 스케줄링하는 스케줄러를 CPU 스케줄러&lt;/strong&gt;라고 합니다.&lt;/p&gt;

&lt;h3 id=&quot;cpu-스케줄러의-기법에는-어떤게-있을까요&quot;&gt;CPU 스케줄러의 기법에는 어떤게 있을까요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;먼저 Ready Queue에 들어온 프로세스를 먼저 처리하는 First Come Fist Serve(FCFS) 스케줄링 기법&lt;/strong&gt;, &lt;strong&gt;CPU Burst Time이 짧은 프로세스를 먼저 처리하는 Shortest Job First(SJF) 스케줄링 기법&lt;/strong&gt;, SJF 기법 기반으로 &lt;strong&gt;새로운 프로세스가 도착할 때마다 새로운 스케줄링이 이루어져 가장 짧은 프로세스를 먼저 처리하는 Shortest Remaining time First(SRT) 기법&lt;/strong&gt;, &lt;strong&gt;프로세스에 우선순위를 부여하여 우선순위가 높은 프로세스를 먼저 처리하는 Priority Schduling 기법&lt;/strong&gt;, &lt;strong&gt;프로세스에 CPU 할당 시간을 정해 놓아 CPU를 할당하는 방법인 Round Robin 기법&lt;/strong&gt; 등이 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;동기와-비동기의-차이는-무엇인가요&quot;&gt;동기와 비동기의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;동기는 요청과 동시에 결과가 일어나는 경우를 동기라고 표현하고, 비동기는 요청과 결과가 동시에 일어나지 않는 경우를 비동기라고 표현한다.&lt;/p&gt;

&lt;h3 id=&quot;block과-non-block의-차이는-무엇인가요&quot;&gt;block과 non-block의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;요청에 대한 응답을 얻기 까지 다른 실행 흐름들이 기다리는 것을 blocking이라고 하고, 다른 실행 흐름이 요청에 대한 응답을 대기하지 않고 자유롭게 CPU나 메모리 등을 이용하는 상황을 non-blocking 이라고 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;프로세스-동기화-process-synchronization&quot;&gt;프로세스 동기화 (Process Synchronization)&lt;/h2&gt;

&lt;h3 id=&quot;critical-section은-무엇인가요&quot;&gt;Critical Section은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;동일한 자원을 동시에 접근하는 작업을 실행하는 코드 영역을 Critical Section&lt;/strong&gt; 이라고 합니다.&lt;/p&gt;

&lt;h3 id=&quot;critical-section-problem을-해결하기-위한-조건이-무엇일까요&quot;&gt;Critical Section Problem을 해결하기 위한 조건이 무엇일까요?&lt;/h3&gt;

&lt;p&gt;Critical Section Problem을 해결하기 위한 조건은 첫 번째 &lt;strong&gt;특정 프로세스가 Critical Section을 수행하고 있다면 다른 프로세스는 이 Critical Section에 들어오지 못하게 하는 상호 배제(Mutual Exclusion)&lt;/strong&gt; 조건입니다.&lt;/p&gt;

&lt;p&gt;두 번째는 Critical Section에서 실행중인 프로세스가 없고, &lt;strong&gt;별도의 동작이 없는 프로세스들만 Critical Section 진입 후보 프로세스로서 참여할 수 있다는 조건인 Progress&lt;/strong&gt; 입니다.&lt;/p&gt;

&lt;p&gt;세 번째는 &lt;strong&gt;특정 프로세스가 Ciritcal Section에 진입 신청 후 받아들여지기까지 기간이 한정되어야 함을 나타내는 Bounded Waiting&lt;/strong&gt; 입니다.&lt;/p&gt;

&lt;h3 id=&quot;critical-section-problem을-해결하기-위한-기법에는-무엇이-있나요&quot;&gt;Critical Section Problem을 해결하기 위한 기법에는 무엇이 있나요?&lt;/h3&gt;

&lt;p&gt;첫 번째는 &lt;strong&gt;하드웨어 기반 해결책인 Lock&lt;/strong&gt;입니다. Critical Section에 진입하기전에 Lock을 얻고, Critical Section에서 빠져 나올 때 Lock을 방출함으로써 프로세스간에 동기화를 유지합니다.&lt;/p&gt;

&lt;p&gt;두 번째는 &lt;strong&gt;Semaphores 입니다. 소프트웨어 상에서 Ciritcal Section 문제를 해결하기 위한 동기화 도구&lt;/strong&gt;이며, 두 개의 프로세스 사이에서 동기화를 유지할 수 있는 이진 세마포와 프로세스 세개 이상의 프로세스 사이에서 동기화를 유지할 수 있는 카운팅 세마포가 있습니다.&lt;/p&gt;

&lt;p&gt;세 번째는 &lt;strong&gt;모니터 입니다. 모니터는 고급 언어의 설계 구조물로서, 개발자의 코드를 상호배제 하게끔 만든 추상화된 데이터 형태&lt;/strong&gt; 입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;메모리-관리-전략&quot;&gt;메모리 관리 전략&lt;/h2&gt;

&lt;h3 id=&quot;swapping-이란-무엇인가요&quot;&gt;Swapping 이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Swapping 이란 메모리의 관리를 위해 사용되는 기법&lt;/strong&gt;입니다. CPU 할당 시간이 끝난 프로세스의 메모리를 보조기억장치(하드디스크)로 내보내고 다른 프로세스를 메모리로 불러 들이는 것을 의미합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이러한 과정을 swap (스왑시킨다) 이라 한다. &lt;strong&gt;주 기억장치(RAM)으로 불러오는 과정을 swap-in, 보조 기억장치로 내보내는 과정을 swap-out&lt;/strong&gt; 이라 한다. swap 에는 큰 디스크 전송시간이 필요하기 때문에 현재에는 메모리 공간이 부족할 때 Swapping이 시작된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;swapping을-하면서-발생하는-문제점에-대해서-알고-있나요&quot;&gt;Swapping을 하면서 발생하는 문제점에 대해서 알고 있나요?&lt;/h3&gt;

&lt;p&gt;대표적으로 &lt;strong&gt;단편화(Fragmentation) 문제&lt;/strong&gt;를 들 수 있습니다. 프로세스들이 메모리에 적재되고 제거되는 일이 반복되다보면 메모리 사이에 사용 하지 못할 만큼의 작은 자유 공간들이 늘어나게 되는데 이를 단편화라고 합니다.&lt;/p&gt;

&lt;p&gt;단편화의 종류는 크게 외부 단편화와 내부 단편화로 나눌 수 있습니다. &lt;strong&gt;외부 단편화란 메모리에서 프로세스 사이 사이 남는 공간들을 의미하는 것이고, 내부 단편화란 프로세스가 사용하는 메모리 공간에서 남는 부분을 의미하는 것입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;그렇다면-외부-단편화를-해소하기-위한-방법은-무엇이-있을까요&quot;&gt;그렇다면 외부 단편화를 해소하기 위한 방법은 무엇이 있을까요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;압축&lt;/strong&gt;이 있을 것 같습니다. 외부 단편화를 해소하기 위해 프로세스가 사용하는 메모리 공간들을 한쪽으로 몰아, 자유 공간을 확보하는 방법론 이지만, &lt;u&gt;작업효율이 좋지 않아 잘 사용하지 않습니다.&lt;/u&gt;&lt;/p&gt;

&lt;h3 id=&quot;그렇다면-또-다른-외부-단편화-문제를-해결할-수-있는-방법은-무엇인가요&quot;&gt;그렇다면 또 다른 외부 단편화 문제를 해결할 수 있는 방법은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;대표적인 예로는 메모리 공간이 연속적이어야 한다는 제약을 없애는 &lt;strong&gt;페이징 기법&lt;/strong&gt;을 들 수 있습니다. &lt;strong&gt;물리 메모리를 Frame 이라는 고정 크기로 분리하고, 논리 메모리는 페이지라 불리는 고정 크기의 블록으로 분리하는 기법입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이러한 페이징 기법을 통해 논리 메모리는 물리 메모리에 저장될 때, 연속되어 저장될 필요가 없고 물리 메모리의 남는 프레임에 적절히 배치됨으로 외부 단편화를 해결할 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;즉, 하나의 프로세스가 사용하는 공간을 여러개의 페이지로 나뉘어서 논리 메모리에서 관리하고, 개별 페이지는 순서에 상관없이 물리 메모리에 있는 프레임에 mapping되어 저장하는 방법입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;하지만 페이지의 크기는 정해져 있기 때문에 내부 단편화는 발생할 수 있다고 생각합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;세그멘테이션이란-무엇입니까&quot;&gt;세그멘테이션이란 무엇입니까?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;세그멘테이션은 프로세스를 물리적 크기의 단위가 아닌 논리적 내용의 단위인 세그먼트로 분할하고 메모리를 할당하며 주소를 변환하는 기법이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;세그먼트들의 크기가 서로 다르기 때문에 메모리를 페이징 기법에서처럼 미리 분할해 둘 수 없고, &lt;strong&gt;메모리에 적재될 때 빈 공간을 찾아 할당하는 사용자 관점의 가상 메모리 관리 기법이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;세그먼트의 단위가 다르기 때문에 메모리에 서로 다른 크기를 가진 여러 세그먼트를 저장할 시 외부 단편화가 생기는 문제점이 존재해 잘 사용하지는 않습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;가상-메모리-virtual-memory&quot;&gt;가상 메모리 (Virtual Memory)&lt;/h2&gt;

&lt;h3 id=&quot;가상-메모리란-무엇인가&quot;&gt;가상 메모리란 무엇인가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;가상 메모리란 프로세스 전체가 메모리 내에 올라오지 않더라도 실행이 가능하도록 하는 기법&lt;/strong&gt;이며, 프로그램이 물리 메모리보다 커도 된다는 주요 장점이 있다.&lt;/p&gt;

&lt;h3 id=&quot;왜-가상-메모리가-나오게-되었는가&quot;&gt;왜 가상 메모리가 나오게 되었는가?&lt;/h3&gt;

&lt;p&gt;실행되는 코드의 전부를 물리 메모리에 존재시켜야 했고, 메모리 용량보다 큰 프로그램은 실행시킬 수 없었다. 또한 멀티 프로세스상에서 여러 프로그램을 동시에 메모리에 올리기에는 용량의 한계와, 페이지 교체등의 성능 이슈가 발생했기 때문에 이를 해결하기 위해 가상 메모리 기법이 나오게 되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;가상-메모리를-통해서-우리는-어떤-장점을-얻을-수-있는가&quot;&gt;가상 메모리를 통해서 우리는 어떤 장점을 얻을 수 있는가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;프로그램의 일부분만 메모리에 올릴 수 있게 되었고 이를 통해 물리 메모리 크기에 제약을 받지 않게 되었습니다. 고로 더 많은 프로그램을 동시에 실행할 수 있게 되었다. 또한 swap에 필요한 입출력이 줄었기 때문에 프로그램들이 빠르게 실행된다는 장점을 가지고 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;가상-메모리는-어떻게-동작하는가&quot;&gt;가상 메모리는 어떻게 동작하는가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;가상 메모리는 실제의 물리 메모리 개념과 사용자의 논리 메모리 개념을 분리한 것으로 정리할 수 있다.&lt;/strong&gt; 이로써 작은 메모리를 가지고도 얼마든지 큰 가상 주소 공간을 프로그래머에게 제공할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;가상 주소 공간이란 한 프로세스가 메모리에 저장되는 논리적인 모습을 가상메모리에 구현한 공간&lt;/strong&gt;이다. 프로세스가 요구하는 메모리 공간을 가상메모리에서 제공함으로써 현재 직접적으로 필요치 않는 메모리 공간은 실제 물리 메모리에 올리지 않는 것으로 물리 메모리를 절약할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;가상 메모리는 시스템 라이브러리가 여러 프로세스들 사이에 공유될 수 있도록 합니다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;프로세스들이 메모리를 공유하는 것을 가능하게 하고, 프로세스들은 공유 메모리를 통해 통신할 수 있다&lt;/strong&gt;. 이 또한, 각 프로세스들은 각자 자신의 주소 공간처럼 인식하지만, 실제 물리 메모리는 공유되고 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;요구-페이징-demand-paging이란-무엇인가&quot;&gt;요구 페이징 (Demand Paging)이란 무엇인가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;프로그램 실행 시작 시에 프로그램 전체를 디스크에서 물리 메모리에 적재하는 대신, 초기에 필요한 것들만 적재하는 전략을 요구 페이징이라 하며 가상 메모리 시스템에서 많이 사용된다.&lt;/strong&gt; 요구 페이징을 사용하는 가상 메모리에서는 &lt;strong&gt;실행과정에서 필요해질 때 페이지들이 적재된다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;페이지-교체-알고리즘이란-무엇인가&quot;&gt;페이지 교체 알고리즘이란 무엇인가?&lt;/h3&gt;

&lt;p&gt;요구 페이징에서 언급된대로 프로그램 실행시에 모든 항목이 물리 메모리에 올라오지 않기 때문에, &lt;strong&gt;프로세스의 동작에 필요한 페이지를 요청하는 과정에서 page fault가 발생하게 되면, 원하는 페이지를 보조저장장치에서 가져오게 되는 것을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;페이지-교체-알고리즘의-순서는-어떻게-되는가&quot;&gt;페이지 교체 알고리즘의 순서는 어떻게 되는가?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;디스크에서 필요한 페이지의 위치를 찾는다.&lt;/li&gt;
  &lt;li&gt;빈 페이지 프레임을 찾는다.
    &lt;ul&gt;
      &lt;li&gt;페이지 교체 알고리즘을 통해 희생될(victim) 페이지를 고른다.&lt;/li&gt;
      &lt;li&gt;희생될 페이지를 디스크에 기록하고, 관련 페이지 테이블을 수정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;새롭게 비워진 페이지 테이블 내 프레임에 새 페이지를 읽어오고, 프레임 테이블을 수정한다.&lt;/li&gt;
  &lt;li&gt;사용자 프로세스 재 시작&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;페이지-교체-알고리즘에는-어떠한-것들이-있는가&quot;&gt;페이지 교체 알고리즘에는 어떠한 것들이 있는가?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;FIFO 페이지 교체 : 먼저 물리 메모리에 들어온 페이지 순서대로 페이지 교체 시점에 먼저 나가게 된다.&lt;/li&gt;
  &lt;li&gt;최적 페이지 교체 : 앞으로 가장 오랫동안 사용되지 않을 페이지를 찾아 교체하는 알고리즘이다.&lt;/li&gt;
  &lt;li&gt;LRU (Least Recently Used) 페이지 교체 : 가장 오랫동안 사용되지 않은 페이지를 선택하여 교체한다. (최적 알고리즘 근사 알고리즘)&lt;/li&gt;
  &lt;li&gt;LFU (Least Frequently Used) 페이지 교체 : 참조 횟수가 가장 적은 페이지를 교체하는 방법이다.&lt;/li&gt;
  &lt;li&gt;MFU (Most Frequently Used) 페이지 교체 : 참조 횟수가 가장 많은 페이지를 교체하는 방법이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;캐시cache&quot;&gt;캐시(Cache)&lt;/h2&gt;

&lt;h3 id=&quot;캐시-메모리란-무엇인가&quot;&gt;캐시 메모리란 무엇인가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;캐시 메모리란 속도가 빠른 장치와 느린 장치간의 속도차에 따른 병목 현상을 줄이기 위한 범용 메모리이다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;캐시-메모리에서-가장-신경써야-하는-문제는-무엇인가&quot;&gt;캐시 메모리에서 가장 신경써야 하는 문제는 무엇인가?&lt;/h3&gt;

&lt;p&gt;캐시 메모리의 역할을 수행하기 위해서는 CPU가 어떤 데이터를 원할 것인가를 예측할 수 있어야 한다. &lt;strong&gt;즉, 적중률(hit rate)을 극대화 시켜야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;적중률hit-rate을-극대화-시키기-위해-어떻게-해야-하는가&quot;&gt;적중률(hit rate)을 극대화 시키기 위해 어떻게 해야 하는가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;적중률을 극대화 시키기 위해 데이터 지역성(Locality)의 원리를 사용한다.&lt;/strong&gt; 즉, Locality란 기억 장치 내의 정보를 균일하게 Access 하는 것이 아닌 어느 한 순간에 특정 부분을 집중적으로 참조하는 특성인 것이다.&lt;/p&gt;

&lt;h3 id=&quot;지역성은-어떻게-나뉘는가&quot;&gt;지역성은 어떻게 나뉘는가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;데이터 지역성은 대표적으로 시간 지역성(Temporal Locality)과 공간 지역성(Spatial Locality)으로 나뉘고 이는 다음과 같다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;시간 지역성 : 최근에 참조된 주소의 내용은 곧 다음에 다시 참조되는 특성.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;공간 지역성 : 대부분의 실제 프로그램이 참조된 주소와 인접한 주소의 내용이 다시 참조되는 특성&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 26 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2020/11/26/NAVER-Interview-Preparation-1.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2020/11/26/NAVER-Interview-Preparation-1.html</guid>
        
        <category>Operating-System</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[Jenkins로 CI/CD 구축하기 - 1] Ubuntu(18.04)에 Jenkins 설치하기</title>
        <description>&lt;p&gt;이번 포스팅에서는 Ubuntu(18.04)에 Jenkins를 설치하고 환경 설정까지 하는 방법을 공유하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://imbf.github.io/devops/2020/10/28/What-is-The-DevOps.html&quot;&gt;DevOps가 무엇인가?&lt;/a&gt; 에 대해서는 이전 포스팅에서 다루었고, 이번부턴 Jenkins로 CI/CD 구축하기 시리즈를 시작하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;이번 포스팅은 시리즈의 첫 번째 주제인 &lt;strong&gt;Ubuntu(18.04)에 Jenkins 설치하고 환경 설정하기&lt;/strong&gt; 입니다. &lt;strong&gt;Ubuntu(18.04)에 Jenkins를 설정하고 관련 환경을 구성하면서 겪었던 이슈 및 방법&lt;/strong&gt;에 대해서 공유할 예정입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;내가 지식을 받았을 때 처럼 나의 지식과 경험이 누군가에게는 도움이 되길 간절히 소망합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;ubuntu1804에-jenkins-설치하기&quot;&gt;Ubuntu(18.04)에 Jenkins 설치하기&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;는 사용자의 편의성에 초점을 맞춘 &lt;strong&gt;Linux 배포판&lt;/strong&gt;입니다. 고로 우리는 Ubuntu를 사용할 때 Linux와 비슷하게 여겨도 큰 상관이 없습니다.&lt;u&gt;(특정 기능 사용시 다른 배포판(CentOS 등)과 사용하는 명령어가 다르긴 하다.)&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;Ubuntu 18.04는 Ubuntu에서 2년마다 발표하는 LTS(Long Term Support)중의 하나이며, 이 OS 환경에서 Jenkins를 설치하는 방법을 소개할 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;우리는 Jenkins 버전 중 현재 가장 최신의 Long Term Support(LTS) Release를 설치할 예정이며 과정은 아래와 같습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-jenkins-설치를-위해-repository-key-추가&quot;&gt;1. Jenkins 설치를 위해 Repository key 추가&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;키가 잘 추가 되었다면 &lt;strong&gt;OK&lt;/strong&gt;라는 문구를 보실 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;2-서버의-sourceslist에-jenkins-패키지-저장소를-추가&quot;&gt;2. 서버의 sources.list에 Jenkins 패키지 저장소를 추가&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ &amp;gt; \
    /etc/apt/sources.list.d/jenkins.list'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-패키지-인덱스-정보-업데이트&quot;&gt;3. 패키지 인덱스 정보 업데이트&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-jenkins-패키지-설치&quot;&gt;4. Jenkins 패키지 설치&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;여기까지 잘 따라 오셨다면 Jenkins는 잘 설치 되었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-java-jdk-8-설치&quot;&gt;5. Java JDK 8 설치&lt;/h3&gt;

&lt;p&gt;하지만 Jenkins를 실행하기 위해서는 특정 버젼의 &lt;strong&gt;Java JDK&lt;/strong&gt;가 필요함으로 설치해주도록 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install openjdk-8-jdk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Java JDK 8 버전이 잘 설치 되었을 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;java -version&lt;/code&gt;이라고 bash에 입력해주면 아래와 같은 로그를 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/devops/install-jenkins-in-ubuntu-2.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-jenkins-실행하기&quot;&gt;6. Jenkins 실행하기&lt;/h3&gt;

&lt;p&gt;이제 Jenkins와 Java도 잘 설치 되었음으로 &lt;strong&gt;Jenkins를 실행&lt;/strong&gt;해 보도록 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl start jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Jenkins가 정상적으로 잘 실행 되었다면 아래와 같은 명령어를 bash에 입력할 시 &lt;strong&gt;jenkins service의 상태를 체크&lt;/strong&gt;할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl status jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;저와 같은 로그가 보인다면, Jenkins가 잘 실행 된 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/devops/install-jenkins-in-ubuntu-3.png&quot; style=&quot;width:90%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-jenkins-포트-변경하기&quot;&gt;7. Jenkins 포트 변경하기&lt;/h3&gt;

&lt;p&gt;Jenkins를 실행시켰을 때 기본적으로 8080 포트에서 동작합니다. 하지만 Spring Project의 경우 기본 포트가 8080이기 때문에 중복되어 불편할 수 있음으로 &lt;strong&gt;Jenkins 포트를 9090포트로 바꾸어&lt;/strong&gt; 주도록 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /etc/default/jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 작업은 아주 간단합니다. 아래와 같이 vi 에디터를 사용해서 /etc/default/Jenkins 파일의 &lt;strong&gt;HTTP_PORT를 9090포트로 변경&lt;/strong&gt;해주면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/devops/install-jenkins-in-ubuntu-4.png&quot; style=&quot;width:80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jenkins 포트를 9090으로 변경했다면 &lt;strong&gt;Jenkins를 재실행&lt;/strong&gt; 해주도록 합시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl restart jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;8-방화벽-설정&quot;&gt;8. 방화벽 설정&lt;/h3&gt;

&lt;p&gt;기본적으로 OS는 보안을 위해 방화벽으로 주요 포트 이외의 대부분의 포트에 다른 호스트들의 접근을 막아놓기 마련입니다.&lt;/p&gt;

&lt;p&gt;그래서, &lt;strong&gt;ufw를 사용하여 다른 호스트가 나의 9090포트에 접근할 수 있도록 열어 놓아야 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ufw allow 9090
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;특정 호스트만 나의 9090포트에 접근할 수 있도록 할 수 있지만 이 부분은 생략하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;잘 설정이 되었으면 아래와 같은 명령어를 입력합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ufw status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;명령어 입력시 아래와 같이 9090 포트의 Rule이 생성되었다면 성공입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/devops/install-jenkins-in-ubuntu-5.png&quot; style=&quot;width:80%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;9-jenkins-설정하기&quot;&gt;9. Jenkins 설정하기&lt;/h3&gt;

&lt;p&gt;이제 Jenkins를 실행하기 위한 모든 작업이 끝이 났습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;추가적으로 Jenkins의 초기 설정인 Plugin 설치, 계정 설정, secret key 입력을 진행하도록 하겠습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;브라우저를 통해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://(hostIp or hostName):9090&lt;/code&gt; 에 접속시 아래와 같은 화면을 보실 수 있으며&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/devops/install-jenkins-in-ubuntu-6.png&quot; style=&quot;width:60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;/var/lib/jenkins/secrets/initialAdminPassword 에 가서 password를 복사해서 Administrator password 폼에 입력합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/devops/install-jenkins-in-ubuntu-7.png&quot; style=&quot;width:60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;폼에 Password를 입력하고 Continue를 클릭하면 다음과 같은 &lt;strong&gt;플러그인 설치 화면&lt;/strong&gt;이 나오게 되는데 &lt;strong&gt;본인이 사용하는 플러그인을 잘 모른다면 Install Suggested Plugins를 클릭&lt;/strong&gt;하시면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/devops/install-jenkins-in-ubuntu-8.png&quot; style=&quot;width:60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Install Suggested Plugins 버튼을 클릭하면 &lt;strong&gt;권장 Plugin 설치가 진행되니, Getting Started 게이지가 다 찰 때까지 기다리면 됩니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/devops/install-jenkins-in-ubuntu-9.png&quot; style=&quot;width:60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;플러그인 설치가 완료되면 &lt;strong&gt;계정 설정 페이지&lt;/strong&gt;가 나오게 되는데 폼을 다 채우고 save and Continue 버튼을 클릭합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이 계정 정보는 브라우저를 통해 Jenkins 접속시 항상 입력해야 함으로 꼭 잊어버리지 않아야 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/devops/install-jenkins-in-ubuntu-10.png&quot; style=&quot;width:60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;계정 설정 완료 후 추가적으로 1~2가지 설정을 마치면 아래와 같은 Jenkins 화면을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/devops/install-jenkins-in-ubuntu-11.png&quot; style=&quot;width:60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이를 기반으로 독자 여러분이 본인의 입맛에 맞게끔 Jenkins를 요리해서 사용하면 됩니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이로써 Ubuntu(18.04)에 Jenkins 설치하기 및 관련 환경 구성하기를 마치며 다음에는 &lt;strong&gt;Jenkins에 GitHub Webhook 연동하기&lt;/strong&gt; 포스팅으로써 찾아오도록 하겠습니다.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/devops/2020/11/26/Install-Jenkins-in-Ubuntu(18.04).html</link>
        <guid isPermaLink="true">http://localhost:4000/devops/2020/11/26/Install-Jenkins-in-Ubuntu(18.04).html</guid>
        
        <category>DevOps</category>
        
        <category>CI/CD</category>
        
        <category>Jenkins</category>
        
        <category>Ubuntu</category>
        
        
        <category>DevOps</category>
        
      </item>
    
      <item>
        <title>[Operating System - Chapter 6] 동기화 도구들</title>
        <description>&lt;p&gt;이 포스팅은 공룡책으로 알려진 Operating System Concepts의 6장인 &lt;strong&gt;Synchronization Tools&lt;/strong&gt;를 공부하면서 정리한 포스팅이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;6-동기화-도구들-synchronization-tools&quot;&gt;6. 동기화 도구들 (Synchronization Tools)&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;협력적 프로세스는 시스템 내에서 실행 중인 다른 프로세스의 실행에 영향을 주거나 영향을 받는 프로세스이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 장에서는 논리 주소 공간을 공유하는 협력적 프로세스의 질서 있는 실행을 보장하여, 이를 통해 &lt;strong&gt;데이터의 일관성&lt;/strong&gt;을 유지하는 다양한 메커니즘에 대해 논의하도록 하겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;61-배경-background&quot;&gt;6.1 배경 (Background)&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;우리는 이미 프로세스가 병행하게 또는 병렬로 실행될 수 있다는 것을 알고 있다. 본 장에서는 프로세스가 병행 또는 병렬로 실행될 때 여러 프로세스가 공유하는 &lt;strong&gt;데이터의 무결성&lt;/strong&gt;에 어떤 문제를 일으키는지에 관해 설명한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;동시에 여러 개의 프로세스가 동일한 자료를 접근하여 조작하고, 그 실행 결과가 접근이 발생한 특정 순서에 의존하는 상황을 경쟁 상황(race condition)이라고 한다.&lt;/strong&gt; 경쟁 상황으로부터 보호하기 위해, 우리는 한순간에 하나의 프로세스만이 데이터를 조작하도록 보장해야 한다. 이러한 보장을 위해, 우리는 어떤 형태로든 프로세스들이 동기화되도록 할 필요가 있다.&lt;/p&gt;

&lt;p&gt;또한 다중 코어 시스템의 대두와 더불어 다중 스레드 어플리케이션의 개발에 대한 관심이 증가하고 있다. 다중 스레드 어플리케이션에서는 자원을 공유할 가능성이 매우 높은 여러 스레드가 서로 다른 처리 코어에서 병렬로 실행된다. 이러한 상황에서 race condition은 더 빈번하게 발생할 수 있어, 스레드들이 동기화되도록 할 필요가 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;62-임계구역-문제-the-critical-section-problem&quot;&gt;6.2 임계구역 문제 (The Critical Section Problem)&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;프로세스 동기화에 관한 논의는 소위 임계구역 문제라고 불리는 문제로부터 시작한다. n개의 프로세스 {P0, P1, …, P(n-1)}이 있는 시스템을 고려해 보자.&lt;/p&gt;

&lt;p&gt;각 프로세스는 &lt;strong&gt;임계구역(critical section)&lt;/strong&gt;이라고 부르는 코드를 포함하고 있고, 그 안에서는 적어도 하나 이상의 다른 프로세스와 공유하는 데이터에 접근하고 갱신할 수 있다. 이 시스템의 중요한 특징은 &lt;strong&gt;한 프로세스가 자신의 임계구역에서 수행하는 동안에는 다른 프로세스들은 그들의 임계구역에 들어갈 수 없다는 사실이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;임계구역 문제는 프로세스들이 데이터를 협력적으로 공유하기 위하여 자신들의 활동을 동기화할 때 사용할 수 있는 프로토콜(약속)을 설계하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;각 프로세스는 자신의 임계구역으로 진입하려면 진입 구역(entry section)에서 진입 허가를 요청해야 하고, 임계구역 뒤에는 퇴출 구역(exit section)이 따라올 수 있다. 코드의 나머지 부분들을 총칭하여 나머지 구역(reaminder section)이라고 한다.&lt;/p&gt;

&lt;p&gt;이를 사용하는 프로세스의 일반적인 구조를 나타낸 그림은 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/synchronization-tools-1.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래의 그림에 나와 있는 것처럼 entry section과 exit section은 프로세스의 동기화를 위해서 매우 중요하다.&lt;/p&gt;

&lt;p&gt;임계구역 문제에 대한 해결안은 다음의 &lt;strong&gt;세 가지 요구 조건&lt;/strong&gt;을 충족해야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;상호 배제(mutual exclusion):&lt;/strong&gt; 프로세스 P가 자기의 임계구역에서 실행된다면, 다른 프로세스들은 그들 자신의 임계구역에서 실행될 수 없다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;진행(progress):&lt;/strong&gt; 자기의 임계구역에서 실행되는 프로세스가 없고 그들 자신의 임계구역으로 진입하려고 하는 프로세스들이 있다면, 나머지 구역에서 실행 중이지 않는 프로세스들만 다음에 누가 그 임계구역으로 진입할 수 있는지를 결정하는 데 참여할 수 있으며, 이 선택은 무한정 연기될 수 없다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;한정된 대기(bounded waiting):&lt;/strong&gt; 프로세스가 자기의 임계구역에 진입하려는 요청을 한 후부터 그 요청이 허용될 때까지 다른 프로세스들이 그들 자신의 임계구역에 진입하도록 허용되는 횟수에 한계가 있어야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;임의의 한순간에 많은 커널 모드 프로세스들이 운영체제 안에서 활성화될 수 있기 때문에 운영체제를 구현하는 코드(커널 코드)는 경쟁 조건이 발생하기 쉽다. &lt;u&gt;경쟁 조건이 발생하기 쉬운 커널 자료구조로는 메모리 할당을 관리하는 자료구조, 프로세스 리스트를 유지하는 자료구조, 인터럽트 처리를 위한 자료구조 등이 있다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;운영체제 내에서 임계구역을 다루기 위해서 &lt;strong&gt;선점형 커널&lt;/strong&gt;과 &lt;strong&gt;비선점형 커널&lt;/strong&gt;의 두 가지 일반적인 접근법이 사용된다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;선점형 커널은 프로세스가 커널 모드에서 수행되는 동안 선점되는 것을 허용한다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;선점형 커널에 대해서는 동일한 주장을 할 수 없어 경쟁 조건이 발생할 수 있기 때문에 공유되는 커널 자료구조에서 경쟁 조건이 발생하지 않는다는 것을 보장하도록 신중하게 설계되어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;비선점형 커널은 커널 모드에서 수행되는 프로세스의 선점을 허용하지 않고 커널 모드 프로세스는 커널을 빠져나갈 때까지 또는 봉쇄될 때까지 또는 자발적으로 CPU의 제어를 양보할 때까지 계속 수행된다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;한 순간에 커널 안에서 실행 중인 프로세스는 하나밖에 없으므로 경쟁 조건을 염려할 필요는 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;커널 모드 프로세스가 대기 중인 프로세스에 프로세서를 양도하기 전에 오랫동안 실행할 위험이 적기 때문에 선점형 커널은 더 응답이 민첩할 수 있다. 하지만 선점형 커널을 설계하기 앞서 경쟁 조건을 잘 고려해야만 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;63-peterson의-해결안-petersons-solution&quot;&gt;6.3 Peterson의 해결안 (Peterson’s Solution)&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Peterson 해결안은 Critical Section과 Remainder Section을 번갈아 가며 실행하는 두 개의 프로세스로 한정된다. 보통 프로세스는 P0와 P1로 번호를 매긴다. Peterson의 해결안은 두 프로세스가 두 개의 데이터 항목을 공유하도록 하여 해결한다. 이는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Critical Section으로 진입할 순번을 나타내는 변수&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 각 프로세스가 Critical Section으로 진입할 준비가 되었다는 것을 표현한 배열&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;flag[i]가 참이라면 Pi가 Critical Section으로 진입할 준비가 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Pi의 Peterson 알고리즘은 다음과 같다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/synchronization-tools-2.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Critical Section으로 진입하기 위해서는 Pi는 먼저 flag[i]를 참으로 만들고, turn을 j로 지정한다. 이렇게 함으로써 Pi는 Pj가 Critical Section으로 진입하기를 원한다면 진입 가능하다는 것을 보장한다. 만일 두 프로세스가 동시에 진입하기를 원한다면 진입 turn은 거의 동시에 i와 j로 지정될 것이다. 이 때의 경우 turn의 궁극적인 값이 둘 중 누가 먼저 Critical Section으로 진입할 것인가를 결정한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flag[j]가 false(Pj가 remainder section 수행)가 되거나 turn이 i(Pj는 준비완료됬고, Pi가 Entry Section에서 대기하고 있음)일 경우 Pi는 Critical Section에 들어갈 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Peterson의 해결안이 Ciritical Section 문제를 해결하기 위해선 위에서 명시한 것 처럼 3가지 요구조건을 만족해야 한다. 같이 살펴보자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;상호 배재(Mutual Exclusion)
    &lt;ul&gt;
      &lt;li&gt;flag[2]와 turn 변수에 의해서 하나의 프로세스만 Critical Section에서 연산을 수행할 수 있음으로 Mutual Exclusion는 지켜진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;진행(Progress)
    &lt;ul&gt;
      &lt;li&gt;각 프로세스가 자신이 Critical Section을 수행할 동안 while문에서 다른 프로세스를 유한하게 대기하도록 만드는 방법을 통하여 Progress를 지킬 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;한정된 대기(bounded waiting)
    &lt;ul&gt;
      &lt;li&gt;각 프로세스들은 Critical Section에 진입하려는 요청을 한 후부터 다른 프로세스가 Critical Section을 수행하는 동안 유한하게 대기함으로 bounded waiting 또한 지켜진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Peterson의 해결안은 최신 컴퓨터 아키텍처에서 작동한다고 보장되지 않는다. &lt;u&gt;주된 이유는 시스템 성능을 향상하기 위해 프로세스 또는 컴파일러가 종속성이 없는 읽기 및 쓰기 작업을 재정렬&lt;/u&gt; 할 수 있기 때문이다. 예로 들어, Peterson 해결안의 entry section의 첫 두 문장의 순서를 바꾸게 되면 임계구역 문제를 해결할 수 없다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;64-동기화를-위한-하드웨어-지원-hardware-support-for-synchronization&quot;&gt;6.4 동기화를 위한 하드웨어 지원 (Hardware Support for Synchronization)&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Critical Section 문제의 소프트 웨어 기반 해결책은 최신 컴퓨터 아키텍처에서 작동하지 않을 수 있다.&lt;/p&gt;

&lt;p&gt;이 절에서는 Critical Section 문제를 해결하기 위한 지원을 제공하는 &lt;strong&gt;세 가지 하드웨어 명령&lt;/strong&gt;을 제시한다. 이러한 프리미티브(초기의, 원초적인, …) 연산은 동기화 도구로 직접 사용될 수 있거나 더 추상적인 동기화 기법의 기초 형태로 사용될 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;641-메모리-장벽-memory-barriers&quot;&gt;6.4.1 메모리 장벽 (Memory Barriers)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;컴퓨터 아키텍처가 응용 프로그램에게 제공하는 메모리 접근 시 보장되는 사항을 결정한 방식을 메모리 모델이라고 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;일반적으로 메모리 모델은 두 가지 범주 중 하나에 속한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;강한 순서:&lt;/strong&gt; 한 프로세서의 메모리 변경 결과가 다른 모든 프로세서에 즉시 보임.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;약한 순서:&lt;/strong&gt; 한 프로세서의 메모리 변경 결과가 다른 프로세서에 즉시 보이지 않음.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;컴퓨터 아키텍처는 메모리의 모든 변경 사항을 다른 모든 프로세서로 전파하는 명령어를 제공하여 다른 프로세서에서 실행 중인 스레드에 메모리 변경 사항이 보이는 것을 보장&lt;/strong&gt;한다. 이러한 명령어를 &lt;strong&gt;메모리 장벽(Memory Barriers) 또는 메모리 펜스(Memory Fences)&lt;/strong&gt;라고 한다.&lt;/p&gt;

&lt;p&gt;메모리 장벽 명령어가 실행될 때, 시스템은 후속 적재 또는 저장 연산이 수행되기 전에 모든 적재 및 저장이 완료되도록 한다. 따라서 명령이 재정렬 되더라도 메모리 장벽은 향후 적재 또는 저장 작업이 수행되기 전에 저장 작업이 메모리에서 완료되어 다른 프로세서에 보이도록 한다.&lt;/p&gt;

&lt;p&gt;메모리 장벽은 매우 낮은 수준의 연산으로 간주하며 일반적으로 Mutual Exclusion을 보장하는 특수 코드를 작성할 때 커널 개발자만 사용한다.&lt;/p&gt;

&lt;h4 id=&quot;642-하드웨어-명령어-hardware-instructions&quot;&gt;6.4.2 하드웨어 명령어 (Hardware Instructions)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;많은 현대 기계들은 한 워드(word)의 내용을 검사하고 변경하거나, 두 워드의 내용을 원자적으로 교환(swap)할 수 있는, 즉 인터럽트 되지 않는 하나의 단위로서, 특별한 하드웨어 명령어들을 제공한다.&lt;/strong&gt; 우리는 이들을 사용하여 간단한 방식으로 Critical Section을 해결할 수 있다.&lt;/p&gt;

&lt;p&gt;이 명령어들을 추상적으로 표현하자면 test_and_set()과 compare_and_swap()이 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;test_and_set()&lt;/strong&gt; 명령어는 원자적(atomically)으로 실행된다. 아래의 그림은 test_and_set() 명령어의 정의문이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/synchronization-tools-3.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이를 활용한 Critical Section의 Mutucal Exclsion 해결 알고리즘은 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/synchronization-tools-6.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 알고리즘은 lock이라는 공유 변수가 한 프로세스에서 false일 경우 lock을 true로 만들고 자신은 Critical Section으로 들어간다. Critical Section에서 빠져나온 프로세스가 lock을 false로 만들면 다른 프로세스가 Critical Section에 들어가고 이러한 과정이 반복되는 알고리즘이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;compare_and_swap()&lt;/strong&gt; 명령어는 test_and_set() 명령어와 마찬가지로 두 개의 워드에 원자적인 연산을 하지만 두 워드의 내용 교환에 기반을 둔 다른 기법을 사용한다. 아래의 그림은 compare_and_swap() 명령어의 정의문이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/synchronization-tools-4.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Critical Section 요구 조건을 모두 만족시키는 compare_and_swap() 명령어를 이용한 알고리즘에 대해서 설명하도록 하겠다. 공통 데이터 및 코드는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 프로세스i가 대기하고 있다는 것을 나타내는 배열&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/synchronization-tools-5.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pi가 임계구역에 진입하는 경우는 오직 waiting[i] == false 이든지 key == 0 이 되어야 한다. lock이 0일 때에만 key가 0 이되고 lock이 1로 바뀌면서 무한 루프에서 빠져나올 수 있다.&lt;/p&gt;

&lt;p&gt;waiting[i]를 false로 바꾸고 임계 구역을 실행한 뒤 i를 순차적으로 증가시켜 자신과 같을 때 까지 또는 i가 기다리고 있을 때 까지 무한 루프를 돌고, 선택된 프로세스를 Ciritical Section에 진입할 수 있도록 해주는 알고리즘이다.&lt;/p&gt;

&lt;p&gt;위의 알고리즘은 Ciritical Section 해결안이 만족해야 하는 요구조건인 Mutual Exclusion, Progress, Bounded Waiting를 모두 만족한다.&lt;/p&gt;

&lt;h4 id=&quot;643-원자적-변수-atomic-variables&quot;&gt;6.4.3 원자적 변수 (Atomic Variables)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;원자적 변수(atomic variable)은 정수 및 부울과 같은 기본 데이터 유형에 대한 원자적 연산을 제공한다. 원자적 변수는 카운터가 증가할 때와 같이 갱신되는 동안 단일 변수에 대한 데이터 경쟁이 있을 수 있는 상황에서 상호 배제를 보장하는데 사용할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;원자적 변수를 지원하는 대부분의 시스템은 원자적 변수에 접근하고 조작하기 위한 기능뿐만 아니라 특별한 원자적 데이터 유형을 제공한다.&lt;/p&gt;

&lt;p&gt;원자적 변수는 운영체제 및 병행 응용 프로그램에서 일반적으로 사용되지만 카운터 및 시퀀스 생성기와 같은 공유 데이터 한 개의 갱신에만 제한되는 경우가 많다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;65-mutex-locks&quot;&gt;6.5 Mutex Locks&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;mutex lock은 mutual exclusion lock의 축약 형태로서 Critical Section을 해결하기위한 하드웨어 기반의 해결책보다 상위 수준의 해결책이다.&lt;/strong&gt; 우리는 Critical Section을 보호하고, 따라서 Racing Condition을 방지하기 위해 mutex lock을 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;즉, 프로세스는 Critical Section에 들어가기 전에 반드시 lock을 획득해야 하고 Critical Section을 빠져나올 때 lock을 반환해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;mutex lock 에 대해서 알기 위해서 우리는 3가지를 알아야 한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;acquire(): 락을 획득하는 함수&lt;/li&gt;
  &lt;li&gt;release(): 락을 반환하는 함수&lt;/li&gt;
  &lt;li&gt;available: 락의 가용 여부를 표시하는 변수&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;acquire() 함수의 정의는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;available&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* busy wait */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;available&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;release() 함수의 정의는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;available&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래의 그림은 Mutex lock을 사용한 Critical Section 문제 해결 알고리즘이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/synchronization-tools-7.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;지금까지 설명한 구현 방식의 단점은 &lt;strong&gt;바쁜 대기(busy waiting)&lt;/strong&gt;를 해야 한다는 것이다. 프로세스가 임계구역에 있는 동안 임계구역에 들어가기 원하는 다른 프로세스들은 acquire() 함수를 호출하는 반복문을 계속 실행해야 한다. 이러한 busy waiting은 다른 프로세스가 생산적으로 사용할 수 있는 CPU 주기를 낭비한다.&lt;/p&gt;

&lt;p&gt;우리가 설명한 mutex lock 유형을 &lt;strong&gt;스핀락(spinlock)&lt;/strong&gt;이라고도 한다. 락을 사용할 수 있을 때까지 프로세스가 회전하기 때문이다. 그러나 스핀락은 프로세스가 락을 기다려야 하고 문맥 교환에 상당한 시간이 소요될 때 문맥 교환이 필요하지 않다는 장점이 있다.&lt;/p&gt;

&lt;p&gt;최신 다중 코어 컴퓨팅 시스템에서 스핀락은 많은 운영체제에서 널리 사용된다. &lt;strong&gt;일반적으로 락이 유지되는 기간이 문맥 교환을 두 번(1.스레드를 대기상태로 2.대기중인 스레드를 복원) 하는 시간보다 짧은 경우 스핀락을 사용한다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;락 경합(Lock Competition)&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;락에 대한 경합 상태일 수도 비경합 상태일 수도 있다.&lt;/p&gt;

  &lt;p&gt;락을 획득하려고 시도하는 동안 스레드가 봉쇄되면 락은 경합 상태로 간주한다.&lt;/p&gt;

  &lt;p&gt;스레드가 락을 얻으려고 시도할 때 락을 사용할 수 있으면 락은 비경합 상태로 간주한다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;높은 경합 상태의 락은 병행 실행 응용 프로그램의 성능을 전체적으로 저하한다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;66-세마포-semaphores&quot;&gt;6.6 세마포 (Semaphores)&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;세마포 S는 정수 변수로서, 초기화를 제외하고는 단지 두 개의 표준 원자적(atomical) 연산 wait()와 signal()로만 접근할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;wait() 연산은 원래 “검사하다”를 의미하는 네덜란드어 proberen에서 &lt;strong&gt;P&lt;/strong&gt;, 그리고 signal() 연산은 “증가하다”를 의미하는 verhogen에서 &lt;strong&gt;V&lt;/strong&gt;라고 지어졌다.&lt;/p&gt;

&lt;p&gt;wait()의 정의는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// busy wait&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;signal()의 정의는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;wait()와 signal() 연산 시 세마포의 정수 값을 변경하는 연산은 반드시 원자적으로 수행되어야 한다.&lt;/p&gt;

&lt;h4 id=&quot;661-세마포-사용법-semaphore-usage&quot;&gt;6.6.1 세마포 사용법 (Semaphore Usage)&lt;/h4&gt;

&lt;p&gt;운영체제는 종종 카운팅(counting)과 이진(binary) 세마포를 구분한다. &lt;strong&gt;카운팅 세마포의 값은 제한 없는 영역을 갖지만 이진 세마포의 값은 0과 1사이의 값만 가능하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;카운팅 세마포는 유한한 개수를 가진 자원에 대한 접근을 제어하는데 사용될 수 있다.&lt;/strong&gt; 세마포는 가용한 자원의 개수로 초기화된다. 각 자원을 사용하려는 프로세스는 세마포에 wait() 연산을 수행하며, 이때 세마포의 값은 감소한다. 프로세스가 자원을 방출할 때는 signal() 연산을 수행하고 세마포는 증가하게 된다. &lt;strong&gt;세마포의 값이 0이 되면 모든 자원이 사용중임을 나타낸다.&lt;/strong&gt; 이후 자원을 사용하려는 프로세스는 세마포 값이 0보다 커질 때까지 봉쇄된다.&lt;/p&gt;

&lt;h4 id=&quot;662-세마포-구현-semaphore-implementation&quot;&gt;6.6.2 세마포 구현 (Semaphore Implementation)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Busy Waiting을 피하기 위해 세마포 S를 대기하면서 일시 중지된 프로세스는 다른 프로세스가 signal() 연산을 실행하면 재시작되어야 한다.&lt;/strong&gt; 프로세스는 sleep() 연산에 의해서 일시 중지되고 wakeup() 연산에 의하여 재시작된다. (대기상태 &amp;lt;-&amp;gt; 준비 완료 상태)&lt;/p&gt;

&lt;p&gt;세마포를 활용한 Critical Section 문제 해결 알고리즘을 구현하기 위해 세마포의 정의는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;wait() 연산의 정의는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;signal() 연산의 정의는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;wakeup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;wakeup()과 sleep()은 프로세스를 일시 중지 or 재실행시키는 운영체제의 기본적인 시스템 콜이다.&lt;/p&gt;

&lt;p&gt;세마포의 프로세스 리스트는 Bounded Waiting를 보장하도록 잘 구현해야만 한다.&lt;/p&gt;

&lt;p&gt;단일 Processor 환경에서는 wait()와 signal() 연산들이 원자적으로 실행되는것을 보장하기 위해 실행되는 동안 인터럽트를 금지함으로써 해결할 수 있지만, 다중 코어 환경에서는 모든 처리 코어에서 인터럽트를 금지하여야만 한다. 이는 매우 어려울 수 있으며 성능을 심각하게 감소시킬 수 있음으로 많은 부분을 고려해야만 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;67-모니터-monitors&quot;&gt;6.7 모니터 (Monitors)&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;mutex락 혹은 세마포를 사용할 때에도 타이밍 오류는 여전히 발생할 수 있다. 예로들어, wait()과 signal() 연산의 순서가 뒤바뀌는 경우, Critical Section이 끝나고 signal()대신 wait()이 호출되는 경우&lt;/p&gt;

&lt;p&gt;이러한 오류를 처리하기 위한 한 가지 전략은 간단한 동기화 도구를 통합하여 고급 언어 구조물을 제공하는 것이다. 이번엔 고급 언어 구조물 중 하나인 &lt;strong&gt;모니터(monitor)&lt;/strong&gt;를 살펴보자!!&lt;/p&gt;

&lt;h4 id=&quot;671-모니터-사용법-monitor-usage&quot;&gt;6.7.1 모니터 사용법 (Monitor Usage)&lt;/h4&gt;

&lt;p&gt;추상화된 데이터 형(abstract data type, ADT)은 데이터와 이 데이터를 조작하는 함수들의 집합을 하나의 단위로 묶어 보호한다. 이때 함수의 구현은 ADT의 특정한 구현과 독립적이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;모니터 형은 모니터 내부에서 프로그래머가 정의한 상호 배제가 보장되는 일련의 연산자 집합을 포함하는 ADT이다.&lt;/strong&gt; 모니터 형은 인스턴스의 상태를 정의하는 변수들과 이를 조작할 수 있는 프로시저 또는 함수들의 본체도 같이 포함하고 있다.&lt;/p&gt;

&lt;p&gt;따라서 모니터 내에 정의된 함수만이 오직 모니터 내에 지역적으로 선언된 변수들과 형식 매개변수들에만 접근할 수 있다. (객체의 캡슐화와 매우 비슷한 구조)&lt;/p&gt;

&lt;p&gt;아래의 그림은 모니터의 개략도이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/synchronization-tools-8.png&quot; style=&quot;width:50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;모니터 구조물은 모니터 안에 항상 하나의 프로세스만이 활성화되도록 보장해 준다.&lt;/strong&gt; 그러나 지금까지 정의한 모니터 구조물은 어떤 동기화 기법을 모델링하는 데에는 충분한 능력을 제공하지 않는다.&lt;/p&gt;

&lt;p&gt;condition이라는 구조물로 동기화 기법들을 제공해 보자. 자신의 동기화 기법을 작성할 필요가 있는 프로그래머는 하나 이상의 condition 형의 변수를 정의할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 condition 형 변수에 호출될 수 있는 연산은 오직 wait()와 signal()이다. x.wait()은 이 연산을 호출한 프로세스는 다른 프로세스가 x.signal()을 호출할 때까지 일시 중지 되어야 한다는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;Java와 C# 등을 포함한 많은 프로그래밍 언어들은 이 절에서 설명한 모니터의 개념을 편입 시켰다.&lt;/p&gt;

&lt;h4 id=&quot;672-세마포를-이용한-모니터의-구현-implementing-a-monitor-using-semaphores&quot;&gt;6.7.2 세마포를 이용한 모니터의 구현 (Implementing a Monitor Using Semaphores)&lt;/h4&gt;

&lt;p&gt;각 모니터마다 mutex라는 이진 세마포가 정의되고 그 초기 값은 1이다. 프로세스는 모니터로 들어가기 전에 wait(mutex)를 실행하고 모니터를 나온 후에 signal(mutex)을 실행해야 한다.&lt;/p&gt;

&lt;p&gt;모니터 구현 시 signal-and-wait 기법을 사용한다. Signaling 프로세스는 실행 재개되는 프로세스가 모니터를 떠나는지 아니면 wait() 할 때까지 그 자신이 다시 기다려야 하므로 next라는 이진 세마포가 추가로 필요하게 되고 0으로 초기화된다.&lt;/p&gt;

&lt;p&gt;signaling 프로세스는 자신을 중단시키기 위해 next를 사용할 수 있다. 정수형 변수 next_count에서도 next에서 일시 중지 되는 프로세스의 개수를 세기 위해 제공된다. 따라서 각 외부 프로시저 F는 아래로 대체된다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 일시 중지된 프로세스가 존재한다면&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// next 프로세스를 실행 재개한다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 알고리즘을 작성한다면 Mutual Exclusion은 보장된다.&lt;/p&gt;

&lt;h4 id=&quot;673-모니터-내에서-프로세스-수행-재개-resuming-processes-within-a-monitor&quot;&gt;6.7.3 모니터 내에서 프로세스 수행 재개 (Resuming Processes within a Monitor)&lt;/h4&gt;

&lt;p&gt;“조건 변수 x에 여러 프로세스가 일시 중지 되어 있을 때 어떠한 프로세스를 수행 재개시킬 것인가??”에 대해서 논의해 보면 가장 간단한 방법은 FCFS 순이다. 하지만 많은 경우 이러한 간단한 스케줄링 기법은 충분하지 않다.&lt;/p&gt;

&lt;p&gt;이를 위해서 아래와 같은 형식의 &lt;strong&gt;conditional-wait 구조&lt;/strong&gt;를 사용할 수 있다. 이 구조물은 다음과 같은 형태를 가진다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x.wait(c);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;여기서 c는 정수이고, 우선순위 번호(priority number)라고 불리며 일시 중지 되는 프로세스의 이름과 함께 저장된다. 즉, x.signal()이 수행되면 가장 작은 우선순위 번호를 가진 프로세스가 다음번에 수행 재개 된다.&lt;/p&gt;

&lt;p&gt;이 새로운 기법을 설명하기 위해 아래와 같은 구조를 가진 ADT인 ResourceAllocator 모니터를 예로든다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/synchronization-tools-9.png&quot; style=&quot;width:80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 모니터는 한 개의 자원을 여러 프로세스 사이에 할당해 준다. 각 프로세스는 자원을 할당받기를 원하면 그 자원을 사용할 최대 시간을 지정한다. 모니터는 이 중 가장 적은 시간을 희망한 프로세스에 자원을 할당해 준다. 이 자원을 액세스하려는 프로세스는 아래의 순서를 따라야 한다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// R은 ResourceAllocator형 인스턴스이다.&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;time을 사용해서 한 개의 자원을 접근하는데 무리없이 동작하는 것 처럼 보이지만 사실 다음과 같은 문제가 발생할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스가 자원에 대한 허락을 받지 않고 자원을 액세스 할 경우&lt;/li&gt;
  &lt;li&gt;프로세스가 자원에 대한 허락을 받은 다음 그 자원을 방출하지 않을 경우&lt;/li&gt;
  &lt;li&gt;프로세스가 자원에 대한 허락을 받지 않았는데도 그 자원을 방출할 경우&lt;/li&gt;
  &lt;li&gt;프로세스가 자원에 대한 허락을 받은 다음 방출하지 않은 상태에서 또 그 자원을 요청할 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사실 위와 동일한 문제들은 모니터를 사용할 때 뿐만 아니라 세마포를 사용할 때도 동일하게 발생한다.&lt;/p&gt;

&lt;p&gt;이 문제를 해결하기 위해서 &lt;strong&gt;자원 액세스 연산 자체를 ResourceAllocator 모니터 내부에 두는 방법&lt;/strong&gt;이 있고, 프로세스들이 올바른 순서를 지키도록 보장하기 위해서 &lt;strong&gt;ResourceAllocator 모니터와 모니터가 관리하는 자원을 사용하는 모든 프로그램을 검사&lt;/strong&gt;하는 방법이 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;68-라이브니스-liveness&quot;&gt;6.8 라이브니스 (Liveness)&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;라이브니스는 프로세스가 실행 수명주기 동안 진행되는 것을 보장하기 위해 시스템이 충족해야 하는 일련의 속성을 말한다.&lt;/strong&gt; 즉, 프로세스가 lock을 얻기 위해 무기한 대기하는 것은 “라이브니스 실패”의 한 예이다.&lt;/p&gt;

&lt;p&gt;다양한 형태의 라이브니스 실패가 존재한다. 그러나 모두 성능과 응답성이 나쁜 것이 특징이다. 라이브니스 실패의 매우 간단한 예는 무한 루프이다. 즉, Mutex 락 및 Semaphore를 사용하여 상호 배제를 제공하려는 노력은 종종 병행 프로그래밍에서 이러한 실패로 이어질 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;681-교착-상태-deadlock&quot;&gt;6.8.1 교착 상태 (Deadlock)&lt;/h4&gt;

&lt;p&gt;대기 큐를 가진 Semaphore 구현은 두 개 이상의 프로세스들이, 오로지 대기 중인 프로세스들 중 하나에 의해서만 야기될 수 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;signal()연산&lt;/code&gt;를 무한정 기다리는 상황이 발생할 수 있다. 이런 상태에 도달했을 때, 이들 프로세스들을 &lt;strong&gt;교착 상태(deadlock)&lt;/strong&gt;라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;한 집합 내의 모든 프로세스가 그 집합 내의 다른 프로세스만이 유발할 수 있는 이벤트를 기다릴 때, 이 프로세스들의 집합이 교착 상태에 있다고 말한다.&lt;/strong&gt; 우리가 여기서 주로 관심을 두고 있는 “이벤트”들은 mutex 락과 Sempahore 같은 자원의 획득과 방출이다.&lt;/p&gt;

&lt;h4 id=&quot;682-우선순위-역전-priority-inversion&quot;&gt;6.8.2 우선순위 역전 (Priority Inversion)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;높은 우선순위 프로세스가 현재 낮은 우선순위 프로세스 또는 연속된 낮은 우선순위 프로세스들에 의해 접근되고 있는 커널 데이터를 읽거나 변경할 필요가 있을 때 스케줄링의 어려움이 생기게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;통상 커널데이터는 락에 의해 보호되기 때문에 낮은 우선순위 프로세스가 자원의 사용을 마칠 때까지 높은 우선순위 프로세스가 기다려야 한다. 낮은 우선순위 프로세스가 또 다른 높은 우선순위 프로세스에 의해 선점되는 경우에 상황은 더욱 복잡해진다. 이러한 경우 낮은 우선순위 프로세스는 계속 기다려야만 한다. 이 라이브니스 문제는 &lt;strong&gt;우선순위 역전(priority inversion)&lt;/strong&gt;문제로 알려져 있다.&lt;/p&gt;

&lt;p&gt;통상 우선순위 역전 문제는 &lt;strong&gt;우선순위 상속 프로토콜(priority-inheritance protocol)&lt;/strong&gt;을 구현하여 해결한다. 우선순위 상속 프로토콜의 하나의 예시로서, 더 높은 우선순위 프로세스가 필요로 하는 자원에 접근하는 모든 프로세스는 문제가 된 자원의 사용이 끝날 때까지 더 높은 우선순위를 상속받는다. 자원 사용이 끝나면 원래 우선순위로 되돌아간다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;69-평가evaluation&quot;&gt;6.9 평가(Evaluation)&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;일반적으로 하드웨어 솔루션은 매우 낮은 수준으로 간주하며 mutex 락과 같은 다른 동기화 도구를 구성하기 위한 기초로 사용된다.&lt;/p&gt;

&lt;p&gt;그러나 최근 lock overhead 없이 경쟁 조건으로부터 보호하는 &lt;strong&gt;lock free algorithm&lt;/strong&gt;을 구현하기 위해 CAS(Compare And Swap) 명령을 사용하는데 중점을 두고 있다. 이러한 락 없는 솔루션은 오버헤드가 낮고 확장성이 있기 때문에 인기를 얻고 있지만 알고리즘 자체는 개발 및 테스트가 어려운 경우가 많다.&lt;/p&gt;

&lt;p&gt;CAS 기반 접근 방식은 낙관적인 접근법으로 간주되고, locking 기반 접근 방식은 비관적 전략으로 간주된다.&lt;/p&gt;

&lt;p&gt;경쟁 조건을 해결하기 위한 기법의 선택은 시스템 성능에도 큰 영향을 줄 수 있다.&lt;/p&gt;

&lt;p&gt;모니터와 조건 변수와 같은 고급 도구의 매력은 단순성과 사용 편의성으로부터 나온다.&lt;/p&gt;

&lt;p&gt;다행스럽게도 병행 프로그래밍의 요구 사항을 해결하는 확장 가능하고 효율적인 도구를 개발하기 위한 많은 연구가 진행되고 있다. 이는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;더 효율적인 코드를 생성하는 컴파일러 설계&lt;/li&gt;
  &lt;li&gt;병행 프로그래밍을 지원하는 언어 개발&lt;/li&gt;
  &lt;li&gt;기존 라이브러리 및 API의 성능 향상&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음 7장에서는 개발자가 사용할 수 있는 다양한 운영체제 및 API가 이 장에서 제시된 동기화 도구를 어떻게 구현하는지 알아보도록 하자.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;6장에서는 프로세스 중심의 동기화에 대해서 주로 다루었다. 나는 프로세스 동기화 뿐만 아니라 멀티 스레드를 처리하는 다중 코어 시스템에서 어떻게 스레드간에 동기화를 유지하는지도 궁금하기 때문에 추후 더 공부할 계획이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6장은 여기서 마치도록 하고 7장인 Synchonization Examples에서 뵙도록 하겠다. 꾸벅~&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/computer-science(cs)/2020/11/04/Synchronization-Tools.html</link>
        <guid isPermaLink="true">http://localhost:4000/computer-science(cs)/2020/11/04/Synchronization-Tools.html</guid>
        
        <category>Operating-System</category>
        
        <category>CS</category>
        
        <category>Mutex</category>
        
        <category>Lock</category>
        
        <category>Semaphore</category>
        
        <category>Monitor</category>
        
        
        <category>Computer-Science(CS)</category>
        
      </item>
    
  </channel>
</rss>