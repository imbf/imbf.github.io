<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Green Frog Developer</title>
    <description>객체지향을 사랑하고 클린코드에 관심이 많습니다. 질문을 좋아하고 생각하는 것을 좋아합니다.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 09 Mar 2021 11:04:41 +0900</pubDate>
    <lastBuildDate>Tue, 09 Mar 2021 11:04:41 +0900</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>[실무 면접 준비 - 10] 알고리즘 &amp; Github Pages</title>
        <description>&lt;hr /&gt;

&lt;h2 id=&quot;algorithm&quot;&gt;Algorithm&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;스택-두-개로-큐-만들기-making-queue-using-two-stacks&quot;&gt;스택 두 개로 큐 만들기 (Making Queue Using two Stacks)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;설계&lt;/strong&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;Stack 2개를 준비한다.
        &lt;ul&gt;
          &lt;li&gt;하나는 inBox 스택, 다른 하나는 outBox 스택&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;outBox가 비어있다면 inBox에 존재하는 값 전부를 outBox로 밀어 넣는다.&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;u&gt;이 때 inbox에 들어 있는 데이터의 순서가 LIFO에서 FIFO로 바뀐다.&lt;/u&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;outBox에 있는 데이터를 pop 한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;구현&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jupiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QueueTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          
        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          
        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inBox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outBox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;inBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;outBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;하노이-타워tower-of-hanoi&quot;&gt;하노이 타워(Tower of Hanoi)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;설계&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;출발지에 있는 n-1개의 원판을 경유지로 옮기는데 필요한 횟수 : M(n-1)&lt;/li&gt;
      &lt;li&gt;출발지에 있는 한개의 원판을 도착지로 옮기는 필요한 횟수 : 1&lt;/li&gt;
      &lt;li&gt;경유지에 있는 n-1개의 원판을 도착지로 옮기는데 필요한 횟수 : M(n-1)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;출발지에 있는 n개의 원판을 도착지로 옮기는데 필요한 횟수 : M(n) = 2M(n-1) + 1&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;M(n) = 2^n -1&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;시간 복잡도&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;O(2^n)&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;구현&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.webhook.receiver.slack.test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TowerOfHanoi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      
    &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
          
        &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;via&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
          
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;via&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;via&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;다익스트라dijkstra-알고리즘&quot;&gt;다익스트라(dijkstra) 알고리즘&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;사용하는 이유&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;그래프의 출발점에서 다른 점들로가는 &lt;u&gt;최단거리&lt;/u&gt;를 구할 때 사용하는 알고리즘입니다.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;설계&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;D[n] 배열을 만들고 모든 원소에 INFINITE 값을 넣어준다.
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;D[n] : 출발점 k로부터 각 정점까지의 최단 거리를 저장하는 배열&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;출발점(k)을 설정하고 D[k]에 0을 대입하고 k를 방문했다는 체크&lt;/li&gt;
      &lt;li&gt;k에서 갈 수 있는 정점들의 최단 거리를 D[n]에 반영한 후 최단 거리를 가진 정점을 방문했다는 체크&lt;/li&gt;
      &lt;li&gt;k에서 방문한(체크된) 점들을 통해 갈 수 있는 정점들의 최단 거리를 D[n]에 반영한 후 최단 거리를 가진 정점을 방문했다는 체크&lt;/li&gt;
      &lt;li&gt;모든 점이 방문될 때까지 4번 반복&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;시간 복잡도&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;인접 리스트&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;인접 리스트는 각 정점마다 인접한 간선들을 모두 검사하는 작업(O(E))과 우선순위 큐에 원소를 모두 넣고 heapify하는 작업(O(logE))이 존재합니다. 이 두 작업을 수행하는데 걸리는 시간복잡도는 (O(ElogE))이지만 E는 V^2보다 작기 때문에 O(logE) = O(logV)라고 볼 수 있습니다. &lt;strong&gt;따라서 시간 복잡도는 O(ElogV) 입니다.&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(|E| &amp;lt;= |V|^2) == (log|E| &amp;lt;= 2log|V|) == (O(log|E|) == O(log|V|))&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;인접 행렬&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;배열에서는 모든 점을 탐색해야 하기 때문에 &lt;strong&gt;시간 복잡도는 O(V^2)&lt;/strong&gt; 입니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;빅오-표기법&quot;&gt;빅오 표기법&lt;/h3&gt;

  &lt;p&gt;&lt;strong&gt;두 개의 함수 f(n)과 g(n)이 주어졌을 때 모든 &lt;code class=&quot;highlighter-rouge&quot;&gt;n &amp;gt;= n0&lt;/code&gt; 에 대하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;|f(n)| &amp;lt;= c|g(n)|&lt;/code&gt; 을 만족하는 2개의 상수 c와 n0가 존재하면 f(n) = O(g(n)) 이다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;정렬sorting-알고리즘&quot;&gt;정렬(Sorting) 알고리즘&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;버블 정렬(Bubble Sort)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;서로 인접한 2개의 레코드를 비교하여 크기가 순서대로 되어 있지 않으면 서로 교환하는 알고리즘&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;맨 끝에서부터 자료를 정렬하는 알고리즘이다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;입력된 배열 이외에 추가적인 메모리가 필요하지 않다. (제자리 정렬)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;시간 복잡도(비교 횟수)&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;(n-1) + (n-2) + (n-3) + … + 2 + 1 = ((n-1) * n) / 2 = &lt;strong&gt;O(n^2)&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;그림&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation10-1.png&quot; style=&quot;width:80%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;구현&lt;/p&gt;

        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSorting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bubbleSortingTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;선택 정렬(Selection Sort)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;배열에 원소를 넣을 위치는 이미 정해져 있고, 어떤 원소를 넣을지 선택하는 알고리즘&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;보통 가장 처음이나 가장 마지막 위치부터 정렬하는 알고리즘이다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;입력된 배열 이외에 추가적인 메모리가 필요하지 않다. (제자리 정렬)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;시간 복잡도(비교 횟수)&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;(n-1) + (n-2) + (n-3) + … + 2 + 1 = (n-1)n / 2 = &lt;strong&gt;O(n^2)&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;그림&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation10-2.png&quot; style=&quot;width:50%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;구현&lt;/p&gt;

        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SelectionSorting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selectionSortingTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minValueIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minValueIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;minValueIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minValueIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minValueIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;삽입 정렬(Insertion Sort)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;2번째 레코드부터 앞의 레코드들을 보며 자신이 위치해야 할 곳으로 삽입하면서 정렬하는 알고리즘&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;k번째 레코드는 1 ~ (k-1) 번째 레코드들과 비교해야 한다.&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;보통 가장 처음이나 가장 마지막 위치부터 정렬하는 알고리즘이다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;입력된 배열 이외에 추가적인 메모리가 필요하지 않다. (제자리 정렬)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;시간 복잡도(비교 횟수)&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;1 + 2 + … + (n-3) + (n-2) + (n-1) = (n-1)n / 2 = &lt;strong&gt;O(n^2)&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;그림&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation10-3.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;구현&lt;/p&gt;

        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InsertionSorting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insertionSortingTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
            
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            
        &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;합병 정렬(Merge Sort)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;하나의 리스트를 원소의 크기가 1이 될 때까지 분할한 후 분할된 리스트들을 합하여 전체가 정렬된 리스트가 되게 하는 알고리즘&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;분할 정복(Divide and Conquer)을 사용하는 대표적인 정렬 방법&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;합병 정렬을 Array로 구현한다면 추가적인 메모리가 필요하지만 LinkedList로 구현한다면 필요하지 않다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;설계&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;분할(Divide) : 입력 배열을 같은 크기의 2개의 부분 배열로 분할한다.&lt;/li&gt;
          &lt;li&gt;정복(Conquer) : 부분 배열을 정렬한다.&lt;/li&gt;
          &lt;li&gt;결합(Combine) : 정렬된 부분 배열들을 하나의 배열에 합병한다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;그림&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation10-4.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;시간 복잡도&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;합병 단계의 비교 횟수는 nlogn 이고 이동 횟수는 2nlogn 이 발생하기 때문에 시간복잡도는 다음과 같다.
T(n) = nlogn(비교) + 2nlogn(이동) = 3nlogn = &lt;strong&gt;O(nlogn)&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;힙 정렬(Heap Sort)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;리스트의 원소들를 힙으로 구성해서 정렬하는 알고리즘&lt;/strong&gt; (max heap 또는 min heap 사용)
        &lt;ul&gt;
          &lt;li&gt;배열로 힙을 구성할 경우 index를 1부터 시작하면 부모 노드와 자식 노드간의 인덱스를 계산하기 쉽다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;힙 정렬은 시간복잡도가 좋은 편이고 &lt;u&gt;전체 자료 정렬시 사용하기 보다는 상위의 큰 값 몇개만 필요할 때 사용하는게 가장 좋다.&lt;/u&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;시간 복잡도(비교 횟수)&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;heapify 하는데 걸리는 시간이 O(logn)이기 때문에 n개를 정렬하는데 걸리는 시간 복잡도는 &lt;strong&gt;O(nlogn)&lt;/strong&gt;이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;퀵 정렬(Quick Sort)&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;리스트 안의 한 요소 즉, pivot을 고르고 pivot을 기준으로 작은 요소들은 왼쪽으로 보내고, 큰 요소들은 오른쪽으로 보냅니다. pivot을 제외한 왼쪽과 오른쪽 리스트 각각이 더 이상 분할이 불가능할 때까지 위 작업을 반복하며 분할이 끝난 후 병합을 통해서 정렬하는 알고리즘&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;분할 정복(Divide and Conquer)을 사용하는 대표적인 정렬 방법&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Merge Sort와 달리 퀵 정렬은 리스트를 비균등하게 분할한다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;설계&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;분할(Divide) : 입력 배열을 pivot을 기준으로 비균등하게 2개의 부분 배열(pivot을 중심으로 왼쪽 배열은 피벗보다 작은 요소들이 존재하고 오른쪽 배열은 피벗보다 큰 요소들이 존재)로 분할한다.&lt;/li&gt;
          &lt;li&gt;정복(Conquer) : 부분 배열을 정렬한다.&lt;/li&gt;
          &lt;li&gt;결합(Combine) : 정렬된 부분 배열들을 하나의 배열로 병합한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;그림&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation10-5.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;시간 복잡도&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;최악의 경우 시간 복잡도는 O(n^2)&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;비 균등 분할이기 때문에 최악의 경우 순환 호출의 깊이가 n이 될 수 있고 각 순환 호출 단계에서 평균 n번 정도의 비교가 이루어지기 때문에 최악의 경우 시간 복잡도는 O(n^2)이다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;평균 시간 복잡도는 O(nlogn)이다.&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;평균의 경우 높이가 logn 이고 각 순환 호출 단계에서 평균적으로 n번의 비교가 이루어 지기 때문에 평균의 경우 시간 복잡도는 O(nlogn)이다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;최악의 경우 시간복잡도가 O(n^2) 이지만 시간 복잡도가 O(nlogn)인 힙 정렬, 병합 정렬보다 보통 빠르다.&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;github-pages&quot;&gt;Github Pages&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;어떤-블로그를-운영중이시며-왜-운영하시나요&quot;&gt;어떤 블로그를 운영중이시며 왜 운영하시나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;개발자로서 성장하는 과정과 지식을 학습하고 적용하면서 발생한 이슈, 문제를 해결한 경험 등을 공유하기 위한 블로그를 Github Pages 에서 운영하고 있습니다.&lt;/strong&gt; 여러 개발자들이 작성한 블로그를 통해서 제가 도움을 받았던 것 처럼 저 또한 많은 개발자분들에게 도움을 드리고 싶어서 블로그를 운영하게 되었습니다. 또한 다른 사람에게 경험과 지식을 공유하면서 제 지식의 깊이도 늘릴 수 있는 기회를 만들고자 블로그를 운영하게 되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;github-pages란-무엇인가요&quot;&gt;Github Pages란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Github Pages란 Github 저장소의 내용을 웹사이트로 만들어주는 정적 웹 사이트 호스팅 서비스(Static Website Hosting Service)를 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;다양한-블로깅-플랫폼이-존재하는데-왜-github-pages를-사용했나요&quot;&gt;다양한 블로깅 플랫폼이 존재하는데 왜 Github Pages를 사용했나요?&lt;/h3&gt;

&lt;p&gt;Tistory나, Velog, Medium 등의 대부분의 블로깅 플랫폼은 아주 다양한 테마와 편리한 기능들을 지원해 줍니다. 이러한 기능들을 사용해서 나만의 멋진 블로그를 만들 수 있었지만 &lt;strong&gt;모든 기능과 테마가 플랫폼에 종속&lt;/strong&gt;되어 있기 때문에 나만의 특징을 가진 블로그를 만들기에는 한계가 존재했습니다. &lt;strong&gt;이를 해결하고자 좀 더 로우 레벨인 정적 웹 사이트 호스팅 서비스인 Github Pages를 사용해 나만의 특징을 가진 블로그를 만들었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;어떤-정적-사이트-생성기를-활용하여-github-pages를-사용하셨나요&quot;&gt;어떤 정적 사이트 생성기를 활용하여 Github Pages를 사용하셨나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;저는 Jekyll이라고 하는 Ruby 기반의 정적 사이트 생성기를 사용해서 블로그를 운영하고 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;ruby&quot;&gt;Ruby&lt;/h3&gt;

  &lt;p&gt;&lt;strong&gt;루비&lt;/strong&gt;(Ruby)는 동적 객체 지향 스크립트 프로그래밍 언어이다. 루비는 순수 객체 지향 언어라, 정수나 문자열 등을 포함한 데이터 형식 등 모든 것이 객체이다.&lt;/p&gt;

  &lt;p&gt;Ruby의 기능에는 클래스 정의, 가비지 컬렉션, 강력한 정규 표현식 처리, 다중 스레드, 예외 처리, 반복, 클로저, Mixin, 연산자 오버로드 등이 있다. 구문은 ALGOL계를 계승하면서 가독성을 중시하고 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;왜-jekyll을-사용했는가&quot;&gt;왜 Jekyll을 사용했는가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll을 사용한 이유는 Github Pages가 Jekyll을 기본 엔진으로 사용하고 있고 마음에 드는 템플릿이 대부분 Jekyll을 사용해서 만들어졌기 때문에 사용했습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;jekyll을-사용하는데-어려움이-없었는가&quot;&gt;Jekyll을 사용하는데 어려움이 없었는가??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll을 사용하는데 어려움으로는 처음 블로깅 환경을 구성하는데 어려움&lt;/strong&gt;이 있었습니다. 정적 사이트 생성기라서 단순할 줄 알았지만 생각보다 복잡했고 어떤 모듈이 어떠한 역할을 하는지에 대해 파악하는데 어려웠습니다.&lt;/p&gt;

&lt;h3 id=&quot;어떻게-어려움을-극복하게-되었는가&quot;&gt;어떻게 어려움을 극복하게 되었는가??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;제가 사용하는 Jekyll 템플릿을 만든 개발자가 확장성 및 유지보수성 있는 코드 작성과 모듈화를 해주어서 처음 블로깅 환경을 구성하는데 많은 도움&lt;/strong&gt;이 되었습니다. 그래도 모르는 부분은 &lt;strong&gt;직접 모듈 하나 하나를 뜯어보거나 공식 문서&lt;/strong&gt;를 통해서 이슈를 해결했던 것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;구체적으로-어려움이-무엇이었는가&quot;&gt;구체적으로 어려움이 무엇이었는가??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;제가 원하는 디자인의 블로그&lt;/strong&gt;를 만들면서 이슈가 발생했습니다. &lt;strong&gt;블로그의 메인 컬러라는 property가 존재했고, 이는 블로그의 메인 컬러 뿐만 아니라 텍스트의 색깔에도 종속&lt;/strong&gt;되어 있었습니다. 이를 해결하기 위해 저는 &lt;strong&gt;properties파일에서 메인 컬러 Property를 배경 Color와 텍스트 색깔 property를 나누었고 관련 코드를 바꿈&lt;/strong&gt;으로써 제가 원하는 디자인을 가진 블로그를 만들 수 있었습니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Mar 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2021/03/08/NAVER-Practical-Interview-Preparation-10.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2021/03/08/NAVER-Practical-Interview-Preparation-10.html</guid>
        
        <category>Algorithm</category>
        
        <category>Blog</category>
        
        <category>Github-Pages</category>
        
        <category>Sort</category>
        
        <category>Dijkstra</category>
        
        <category>Queue</category>
        
        <category>Stack</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[실무 면접 준비 - 9] 자기 소개 &amp; 대외 활동 &amp; 인성 면접</title>
        <description>&lt;hr /&gt;

&lt;h2 id=&quot;about-me&quot;&gt;About Me&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;간단한-자기소개-부탁드릴게요&quot;&gt;간단한 자기소개 부탁드릴게요.&lt;/h3&gt;

&lt;p&gt;만나뵙게 되어서 반갑습니다. 네이버 예약 주문 플랫폼에 백앤드 개발자로 지원하게 된 배종진입니다.&lt;/p&gt;

&lt;p&gt;저는 생각하는 것과 공유하는 것을 좋아하며 전남대학교 IT 개발 동아리 회장으로 지내는 동안 전남대학교에 최초의 온라인 해커톤과 Dev 컨퍼런스를 개최해 개발 생태계에 이바지한 경험이 있습니다.&lt;/p&gt;

&lt;p&gt;또한 전 세계의 모든 개발자들이 편리해졌으면 좋겠다는 생각으로 대규모 오픈소스인 Pinpoint 프로젝트와 Spring Data Redis 프로젝트에 기여한 경험을 가지고 있고 프로젝트를 진행하면서 겪었던 이슈나 경험들을 공유하는 블로그도 운영하고 있습니다.&lt;/p&gt;

&lt;p&gt;항상 주어진 환경에서 최선의 변화를 시도하며 많은 사람들에게 선한 영향력을 끼칠 수 있는 개발자가 되고 싶습니다.&lt;/p&gt;

&lt;p&gt;이러한 저의 역량을 바탕으로 네이버 예약 주문 플랫폼 팀에 입사하여 예약 주문 서비스를 최고의 글로벌 서비스로 성장시키고 싶습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;it-개발-동아리-회장&quot;&gt;IT 개발 동아리 회장&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;회장직으로-있으셨던-동아리는-무엇을-하는-동아리인가요&quot;&gt;회장직으로 있으셨던 동아리는 무엇을 하는 동아리인가요?&lt;/h3&gt;

&lt;p&gt;저희 동아리는 전남대학교 대표 IT 개발 동아리로써 학기마다 팀을 구성해서 문제를 정의하고 이를 해결하는 다양한 프로젝트를 수행합니다. 이러한 프로젝트의 진행 과정과 결과는 동아리 내에서 뿐만 아니라 전남대학교 학생 모두에게 공유하며 전남대학교 개발 생태계 활성화를 가장 주된 목표로 삼는 동아리입니다. 저희 동아리는 프로젝트 진행 뿐만 아니라 해커톤이나 컨퍼런스와 같은 다양한 행사도 진행하고있습니다. 작년에는 저희 동아리가 직접 주관하여 전남대학교 최초의 온라인 해커톤을 개최했을 뿐만아니라 전라남도 주요 대학 4개가 참여하는 대학 연합 해커톤도 직접 개최해서 성공적으로 운영하였습니다.&lt;/p&gt;

&lt;h3 id=&quot;코로나-시기에-동아리를-운영하시면서-어려웠던-점은-없었나요&quot;&gt;코로나 시기에 동아리를 운영하시면서 어려웠던 점은 없었나요?&lt;/h3&gt;

&lt;p&gt;코로나 시기에 동아리를 운영하면서 가장 어려웠던 점은 오프라인 활동을 전체 온라인으로 전환하는 것이 가장 어려웠습니다. 온라인 활동은 저희 동아리가 한 번도 가보지 못한 길이어서 이를 어떻게 전환해야할지 처음에는 감도 안잡혔지만 저희 동아리가 추구하는 목적과 본질에 집중해서 전환 작업을 수행하니 잘 할 수 있었던 것 같습니다. 또한 동아리 회원들에게 예전부터 Slack이나 Google Meets, Git 등을 교육시키고 사용을 권장했어서 더 수월하게 온라인 전환을 진행할 수 있었습니다.&lt;/p&gt;

&lt;h3 id=&quot;동아리가-추구하는-목적과-본질은-무엇인가요&quot;&gt;동아리가 추구하는 목적과 본질은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;저희 동아리는 지식의 선순환을 가장 중요시 생각합니다. 일주일에 한 번씩 주간 발표를 통해 프로젝트 진행 과정에서 문제를 해결한 경험이나 기술을 학습하고 적용하면서 발생한 이슈 및 경험들에 대해서 공유합니다. 뿐만 아니라 다양한 스터디나 멘토 멘티 제도를 통해서 끊임없이 지식의 선순환을 추구하는 동아리입니다.&lt;/p&gt;

&lt;h3 id=&quot;동아리-회장을-하면서-얻은-부분이-있으시나요-있다면-말씀해주세요&quot;&gt;동아리 회장을 하면서 얻은 부분이 있으시나요? 있다면 말씀해주세요.&lt;/h3&gt;

&lt;p&gt;동아리 회장을 하면서 책임감이나 리더쉽 부분도 많이 배우고 느꼈지만 가장 가치있게 느꼈던 점은 지식 공유의 힘에 대해서 많이 배울 수 있어서 좋았다고 생각합니다. 저희 동아리는 지식 공유를 위해 다양한 행사와 기회를 제공합니다. 이러한 기회를 통해 구성원들은 다른 사람의 잘 구조화된 지식을 얻을 수 있었고 시야를 넓힐 수 있었습니다. 또한 발표를 직접 준비하면서 자신의 지식의 깊이도 깊어지는 효과를 얻을 수 있었습니다. 이러한 지식의 선순환 구조에서 저는 지식 공유의 힘을 느꼈고 현재에도 동아리 내의 지식의 선순환을 위해 열심히 노력하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;동아리-회장을-하시면서-갈등을-겪으신-적이-있나요-있다면-어떻게-해결하셨죠&quot;&gt;동아리 회장을 하시면서 갈등을 겪으신 적이 있나요? 있다면 어떻게 해결하셨죠?&lt;/h3&gt;

&lt;p&gt;저는 동아리의 체계적인 운영을 위해 많은 규칙과 규정을 운영진과의 논의하에 만들었습니다. 나름 저희가 많은 부분을 고려해서 적절한 규칙과 규정을 만들었지만 항상 예외적으로 이를 만족하지 않는 케이스들이 생겼고 이러한 케이스들 중심에 회원들이 있었기 때문에 회원들과의 갈등이 생겼던 것 같습니다. 저는 이러한 갈등을 해결하기 위해 한발짝 뒤로 물러서 회원들의 입장을 듣고 공감하며 제 입장을 다시 논리 정연하게 이야기해주고 서로간에 해당 문제의 본질을 보려는 노력 끝에 문제를 해결할 수 있었던 것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;동아리-운영에서-가장-중요한-부분은-무엇이라고-생각하시나요&quot;&gt;동아리 운영에서 가장 중요한 부분은 무엇이라고 생각하시나요?&lt;/h3&gt;

&lt;p&gt;저는 동아리 운영에서 가장 중요한 부분으로 동아리원들간의 유대감과 지식의 선순환이라고 생각합니다. 동아리원들간의 친목이나 유대감 없는 지식의 공유는 금방 중단되기 싶고, 지식의 공유가 없는 동아리원들간의 친목과 유대감은 IT 개발 동아리인 저희 동아리의 본질과 목적을 흐립니다. 이 둘중 어느 것도 중요하지 않는게 없다고 생각해서 동아리원들간의 유대감과 지식의 선순환이 동아리 운영시 가장 중요시 되어야하는 부분이라고 생각합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;온라인-해커톤-개최&quot;&gt;온라인 해커톤 개최&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;본인이-주관했던-온라인-해커톤에-대해서-소개해주실-수-있나요&quot;&gt;본인이 주관했던 온라인 해커톤에 대해서 소개해주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;TF팀의 리더로써 주관했던 해커톤은 전남대학교 이노베이션 온라인 해커톤으로 비대면 환경에서 빅데이터/클라우드 자원을 활용한 서비스 개발을 주제로 진행한 온라인 해커톤입니다. 4개월에 걸쳐서 해커톤을 기획하고 준비하였으며 총 인원 40명 정도가 참가한 전남대학교 최초의 온라인 해커톤이었습니다.&lt;/p&gt;

&lt;h3 id=&quot;온라인-해커톤을-왜-운영하시게-되었나요&quot;&gt;온라인 해커톤을 왜 운영하시게 되었나요?&lt;/h3&gt;

&lt;p&gt;전남대학교 온라인 해커톤을 운영하게 된 이유는 지방 학생들은 수도권 학생들에 비해서 IT 분야의 대회나 교육, 경험 등이 상대적으로 부족하다고 생각했습니다. 이러한 저희 학교 학생들에게 다양한 경험과 기회를 제공해주고 싶고 전남대학교 개발 생태계를 활성화 시키고 싶어서 코로나가 유행함에도 불구하고 온라인 해커톤을 기획하고 운영하게 되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;해커톤을-운영하면서-무엇을-얻을-수-있었나요&quot;&gt;해커톤을 운영하면서 무엇을 얻을 수 있었나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;해커톤을 기획하고 운영함을 통해서 코로나와 같은 악조건에도 불구하고 항상 변화하고 도전한다면 성취할 수 있다는 자신감을 얻게 되었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;또한 해커톤을 성공적으로 운영하면서 모든 학생들이 잘 참여해주셔서 뿌듯했고 이를 기반으로 직접 사업화 하는 팀도 생겼고, 마음이 맞는 사람들끼리 스터디를 꾸려서 진행하는 학생들도 생겼습니다. 이를 통해서 정말 저희가 전남대학교 개발 생태계에 큰 이바지를 했구나 하는 뿌듯함을 느낄 수 있었습니다.&lt;/p&gt;

&lt;h3 id=&quot;해커톤을-운영하시면서-어려웠던-점과-해결-방안에-대해서-말씀해주세요&quot;&gt;해커톤을 운영하시면서 어려웠던 점과 해결 방안에 대해서 말씀해주세요.&lt;/h3&gt;

&lt;p&gt;코로나에 의해서 해커톤의 운영 뿐만 아니라 기획도 온라인으로 진행되었습니다. 이러한 과정에서 ‘어떻게 하면 TF팀 내에서 해커톤 프로젝트를 생산성 있게 관리할 수 있을까?’에 대한 고민이 굉장히 어려웠던 것 같습니다. 저는 이러한 문제를 해결하고자 칸반 기반의 소프트웨어인 Trello를 도입해서 팀 내에서 프로젝트 전체 진행상황을 관리하고 공유하면서 생산성 향상을 이룰 수 있었습니다.&lt;/p&gt;

&lt;h3 id=&quot;해커톤을-운영하면서-발생한-팀원간의-갈등과-해결방안에-대해서-말씀해주세요&quot;&gt;해커톤을 운영하면서 발생한 팀원간의 갈등과 해결방안에 대해서 말씀해주세요.&lt;/h3&gt;

&lt;p&gt;팀 내에서 발생한 사건들 중에 갈등이라고 할 정도의 사건은 없었던 것 같습니다. 하지만 항상 회의간에 크고 작은 논쟁은 발생 했으며 서로의 입장을 잘 전달하고 공감하고 본질을 보려는 시각을 통해서 이를 잘 해결했습니다.&lt;/p&gt;

&lt;p&gt;또한 큰 논쟁이 발생한 회의가 끝난 후에 항상 팀원들에게 모두의 의견들은 다 해커톤이 잘 기획되고 운영되었으면 좋겠다는 목적하에서 나온거기 때문에 서로 감정적으로 이야기하거나 상처받을 필요가 없다고 잘 말했던 것 같습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;인성-면접&quot;&gt;인성 면접&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;비전공자이신데-개발에-관심을-갖게-된-이유가-무엇인가요&quot;&gt;비전공자이신데 개발에 관심을 갖게 된 이유가 무엇인가요?&lt;/h3&gt;

&lt;p&gt;비전공자인 제가 개발에 관심을 갖게 된 이유는 개발을 통해서 제 자신이 많이 바뀌었기 때문입니다. 개발을 하다보면 보통 &lt;strong&gt;이유(why?)&lt;/strong&gt;를 많이 생각하게 됩니다. 예로 들면, ‘이 기술은 왜 쓰고, 다른 기술은 왜 안쓰는지, 더 좋은 방법은 없는지, 이 기술과 구조의 장단점은 무엇인지?’ 등 항상 이유를 생각하게됩니다. 어느 순간부터 이러한 이유를 찾는 습관들이 개발을 넘어서 제 삶 속에도 들어오기 시작했습니다. ‘왜 나는 이러한 행동을 하고, 왜 이런 말을 하며, 이러한 문제를 해결하기 위해서 더 좋은 방법이 존재하지 않을까?’ 등의 생각들 덕분에 눈치없고 철없던 20살의 제 자신을 개발이 좀 더 성숙하게 만들어주었기 때문에 개발에 관심을 갖게 되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;개발의-수-많은-분야-중-백앤드를-선택하신-이유가-있나요&quot;&gt;개발의 수 많은 분야 중 백앤드를 선택하신 이유가 있나요?&lt;/h3&gt;

&lt;p&gt;제가 수 많은 개발 분야 중 백앤드를 선택하게 된 이유는 동아리 회장이나 개발이 아닌 다양한 프로젝트를 진행하면서 &lt;strong&gt;주로 밖으로 보여지는 모습보다는 내부에서 이들이 어떻게 동작하는지에 대해서 궁금했던 경우가 많았습니다.&lt;/strong&gt; 이러한 성향 덕분에 IT 프로젝트를 진행하면서도 프론트앤드보다는 백앤드를 더 선호했고 재미있어 했습니다. 그러다 보니 자연스레 백앤드 개발자를 직업으로 삼은게 아닐까 싶습니다.&lt;/p&gt;

&lt;h3 id=&quot;본인은-10년뒤에-어떠한-개발자가-되고-싶나요&quot;&gt;본인은 10년뒤에 어떠한 개발자가 되고 싶나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;저는 10년 뒤에 많은 사람들에게 선한 영향력을 끼칠 수 있는 개발자가 되고 싶습니다.&lt;/strong&gt; 팀의 구성원으로써 조직의 성장을 위해 꾸준히 노력하는 개발자가 되고 싶구요, 오픈 소스에 꾸준히 기여함을 통해 전 세계의 개발자들이 보다 편리해졌으면 좋겠습니다. 마지막으로 제가 현업에 몸담으면서 배웠던 지식이나 경험들을 책, 블로그, 멘토링을 통해서 공유하는 다양한 개발자들과 함께 성장하는 개발자가 되고 싶습니다.&lt;/p&gt;

&lt;h3 id=&quot;우리가-본인을-뽑아야-할-본인만의-강점이나-이유가-있나요&quot;&gt;우리가 본인을 뽑아야 할 본인만의 강점이나 이유가 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;제 자신의 가장 큰 장점은 맡은 일에 깊게 몰입한다는 것입니다.&lt;/strong&gt; 조직이나 팀에서 저에게 일를 맡기면 항상 책임감을 갖고 깊게 몰입해서 ‘어떻게 하면 주어진 환경에서 더 좋은 결과를 낼 수 있을까?’ 에 대해서 항상 고민하고 생각하는 타입입니다. 이러한 저의 장점은 대부분 조직과의 좋은 시너지를 발휘해서 좋은 결과를 냈었구요, 네이버 예약/주문 플랫폼에서도 주어진 일에 책임감을 갖고 깊게 몰입함을 통해서 좋은 결과를 만들어 보겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;저희-예약-주문-플랫폼에-지원하게-된-동기가-있나요&quot;&gt;저희 예약 주문 플랫폼에 지원하게 된 동기가 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;네이버 예약 주문 플랫폼에 지원하게 된 동기는 제가 기존에 헤어샵이나, 숙소, 펜션 등을 예약하기 위해서 자주 사용했던 서비스인 네이버 예약 서비스를 직접 개발하고 싶어서 지원하게 되었습니다.&lt;/strong&gt; 사용자들의 다양한 요구사항들을 받아들이고 이를 직접 코드에 반영함을 통해서 저 뿐만 제 지인들 그리고 이를 사용하는 모든 사용자들에게 편의를 제공할 수 있다면 더 뿌듯하고 서비스 개발에 더 몰입할 수 있을 것 같아 지원하게 되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;실패했던-경험이-무엇이고-어떻게-극복-했는지&quot;&gt;실패했던 경험이 무엇이고 어떻게 극복 했는지?&lt;/h3&gt;

&lt;p&gt;과거에 프로젝트나 맡은 일에 너무 몰입하다보니 식사도 자주 놓치고, 자는 시간도 매일 바뀌어 &lt;strong&gt;건강관리에 실패&lt;/strong&gt;했던 경험이 존재했습니다. 이를 극복하기 위해서 아침에 일어나자마자 규칙적인 계획을 세우고 자기전에 하루의 계획을 평가하는 일기를 쓰는 등 좀 더 계획적이고 규칙적인 삶을 살고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;백앤드가-아닌-프론트엔드나-인공지능-직무에-배치된다면&quot;&gt;백앤드가 아닌 프론트엔드나 인공지능 직무에 배치된다면?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;일단 직원은 회사에 이익을 가져다 주는게 주 목적이기 때문에 회사에서 저를 다른 직무에 배치한데는 다 이유가 있을거라고 생각합니다.&lt;/strong&gt; 일단 다른 직무이지만 주어진 일을 열심히 수행하고, 추후에 백앤드에 자리가 남거나 직무를 변경할 수 있는 기회가 생길 경우 회사에 명확하고 논리정연하게 ‘제가 왜 백앤드를 개발자를 해야하는지’에 대해서 설명하고 직무 변경을 제안할 것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;상사의-불합리한-지시-어떻게-대응할-것인가&quot;&gt;상사의 불합리한 지시 어떻게 대응할 것인가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;상사님이 저에게 불합리한 지시를 했을 경우 일단 상사님이 그렇게 지시를 한 데는 다 이유가 존재할 것 같습니다. 불법적인 일이 아니라면 일단 지시를 따를 것 같구요, 시간이 남는다면 제가 생각하는 방향으로 추가적으로 개발을 진행해 볼 것 같습니다.&lt;/strong&gt; 이를 통해서 상사님이 지시하신 것들은 이런 장점과 이런 단점이 있으며, 제가 추가적으로 구현해 본 것들은 이런 장점과 이런 단점이 존재합니다를 상사님께 명확하고 논리정연하게 설명해 드릴것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;궁금한-점이-있냐&quot;&gt;궁금한 점이 있냐?&lt;/h3&gt;

&lt;p&gt;업무를 진행하다보면 빠르게 기술을 배워야 하거나, 추후 요구사항에 대비해서 미리 지식을 습득해야할 필요가 있을거라고 생각합니다. 인터넷에 공식 문서나 다양한 블로그들이 존재하지만 몇몇 상황에서는 책이나 강의를 통해서 지식을 습득했을 경우에 더 생산성이 높아진다고 느낄때도 있었습니다. 이러한 목적에서 &lt;strong&gt;업무에 필요한 책이나 강의가 필요한 경우 따로 지원해주는 제도가 존재하나요?&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 07 Mar 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2021/03/07/NAVER-Practical-Interview-Preparation-9.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2021/03/07/NAVER-Practical-Interview-Preparation-9.html</guid>
        
        <category>Me</category>
        
        <category>Personality</category>
        
        <category>Activity</category>
        
        <category>Hackaton</category>
        
        <category>ECONOVATION</category>
        
        <category>President</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[실무 면접 준비 - 8] Spring Framework</title>
        <description>&lt;hr /&gt;

&lt;h2 id=&quot;spring-framework&quot;&gt;Spring Framework&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;spring-framework란-무엇인가요&quot;&gt;Spring Framework란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring Framework란 자바를 위한 오픈 소스 애플리케이션 프레임워크로써 자바 기반 엔터프라이즈 애플리케이션 개발을 위해 다양한 서비스를 제공해주는 프레임워크입니다.&lt;/strong&gt; Spring Framework는 핵심 철학으로 다양한 애플리케이션을 만들기 위해 기본적인 틀을 구성해줌으로써 개발자가 비즈니스 로직에 집중하게 끔 도와줍니다.&lt;/p&gt;

&lt;h3 id=&quot;프레임워크와-라이브러리의-차이는-무엇인가요&quot;&gt;프레임워크와 라이브러리의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;프레임워크(Framework)는 특정한 문제 해결을 위해 어느 정도의 뼈대 즉, 구조를 제공&lt;/strong&gt;해주는 것을 의미하구요, &lt;strong&gt;라이브러리(Library)는 특정 기능 사용을 위한 도구나 함수들의 모음&lt;/strong&gt;을 의미합니다.&lt;/p&gt;

&lt;p&gt;라이브러리와 프레임워크의 차이는 &lt;strong&gt;프로그램의 전체 흐름에 대한 제어권&lt;/strong&gt;에서 차이가 발생합니다. &lt;strong&gt;프레임워크는 프로그램의 전체적인 흐름을 자체적으로 가지고 있으며 프레임워크가 사용자가 작성한 코드를 호출해서 사용합니다.&lt;/strong&gt; 하지만 &lt;strong&gt;라이브러리는 사용자가 프로그램의 전체적인 흐름을 제어하며 사용자가 코드로써 라이브러리의 특정 기능을 직접 가져다 쓰는것을 의미&lt;/strong&gt;합니다.&lt;/p&gt;

&lt;h3 id=&quot;spring-framework의-3대-특징인-ioc-aop-psa에-대해서-설명해주실레요&quot;&gt;Spring Framework의 3대 특징인 IoC, AOP, PSA에 대해서 설명해주실레요?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;IoC란 Inversion of Control의 줄임말로 개발자가 작성한 프로그램의 제어권이 프레임워크에 넘어가서 Spring Framework에서 개발자의 코드를 호출하는 것을 의미합니다.&lt;/strong&gt; &lt;strong&gt;IoC는 DL(Dependency Lookup)과 DI(Dependency Injection)에 의해서 구현되는데 클래스 및 계층간에 필요한 의존관계를 빈 설정 정보를 바탕으로 IoC Container가 의존성을 찾아주는 것을 DL이라고 하구요, 의존성을 주입해 주는 것을 DI라고 합니다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AOP란 Aspect Oriented Programming의 줄임말로 여러 모듈에서 공통적으로 사용하는 기능 및 로직들을 분리하여 관리함을 통해서 모듈화하는 프로그래밍 패러다임을 의미합니다.&lt;/strong&gt; AOP의 사용 예로는 로깅, 트랜잭션, 인증 등이 존재합니다. 컴파일 타임과 클래스 로드 타임, 런타임 등 모든 시간에 AOP를 적용할 수 있는 방법이 존재한다고 알고 있습니다. (Java Reflection, Proxy, …)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PSA란 Portable Service Abstraction의 줄임말로 환경과 세부 기술의 변화에 관계없이 일관된 방식으로 기술에 접근할 수 있게 해주는 것을 의미합니다.&lt;/strong&gt; PSA가 적용된 대표적인 곳은 JDBC, JPA, Transaction Manager 등이 존재합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ioc-container에-대해서-알고-계시나요&quot;&gt;IoC Container에 대해서 알고 계시나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;IoC 컨테이너란 Spring Bean 즉, IoC Container에서 관리하는 객체의 생성과 관계설정, 사용, 제거 등의 전체 Lifecycle을 관리해주는 작업을 하는 컨테이너를 IoC 컨테이너라고 부릅니다.&lt;/strong&gt; IoC Container의 대표적인 명세는 BeanFactory인데 요즘은 이를 상속하는 ApplicationContext를 사용하는 추세입니다. ApplicationContext는 BeanFactory를 상속하는 인터페이스로써 BeanFactory의 기능 뿐만 아니라, 메시지 다국화, 이벤트 발행 기능, 리소스 로딩 기능 등의 여러 기능을 명세하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;ioc-container에-bean을-등록하는-방법은-무엇이-있나요&quot;&gt;IoC Container에 Bean을 등록하는 방법은 무엇이 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;IoC Container에 Bean을 등록하는 방법으로는 xml 설정파일을 이용하는 방법, Configuration 클래스에서 애노테이션을 사용해서 Bean을 등록하는 방법, Bean 등록을 하고 싶은 클래스에서 애노테이션을 통해서 Bean을 등록하는 방법이 존재합니다.&lt;/strong&gt; 마지막의 경우 Component Scan이 꼭 필요하지만 Spring Boot의 경우 Component Scan까지 자동으로 구성해줘서 스프링 환경을 매우 편리하게 사용할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;ioc-container로부터-bean을-주입받는-방법은-무엇이-있나요&quot;&gt;IoC Container로부터 Bean을 주입받는 방법은 무엇이 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;IoC Container로부터 Bean을 주입을 받을 수 있는 방법은 Field를 통해서 주입 받을 수 있는 방법과 Setter를 통해서 주입 받는 방법, 생성자를 통해서 주입받는 방법이 존재합니다.&lt;/strong&gt; Bean이 주입 될 때 같은 타입의 Bean이 여러개 존재 한다면 @Primary 애노테이션을 사용해서 주입될 Bean의 우선순위를 설정할 수 있고 @Qualifiier 애노테이션으로 주입될 Bean을 명확히 지정할 수 있습니다. 관련 타입의 Bean을 모두 주입받고 싶다면 List를 사용하는 방법도 존재합니다.&lt;/p&gt;

&lt;h3 id=&quot;web-server와-web-application-server의-차이를-아시나요&quot;&gt;Web Server와 Web Application Server의 차이를 아시나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Web Server는 클라이언트로부터 HTTP 요청을 받아 정적인 컨텐츠인 HTML, CSS, Image 파일 등을 제공하는 서버&lt;/strong&gt;를 말합니다. Web Server의 대표적인 예로는 Apache Server, Nginx 등이 존재합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web Application Server는 DB 연산이나 다양한 로직 처리를 요구하는 동적인 컨텐츠를 제공하기 위해 만들어진 Application Server를 의미&lt;/strong&gt;합니다. 이는 HTTP를 통해 컴퓨터나 장치에 애플리케이션을 수행해주는 미들웨어입니다. WAS는 Web Container 혹은 Servlet Container라고도 불리며 대표적인 예로는 Tomcat, Jetty 등이 존재합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web Server와 WAS를 분리하는 이유는 자원 이용의 효율성 및 장애 대응, 배포 및 유지보수의 편의성을 위해서 분리합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;java-reflection이란-무엇인가요&quot;&gt;Java Reflection이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Java Reflection이란 컴파일 타임에 클래스나 메서드의 이름을 알지 못해도 런타임에 클래스나 인터페이스, 메서드, 필드 등을 접근할 수 있게 해주는 기능을 의미합니다.&lt;/strong&gt; Java Reflection을 사용하면 새로운 객체를 만들수도 있고, 메서드를 호출할 수 있으며, 필드 값을 얻거나 설정할 수 있습니다.&lt;/p&gt;

&lt;p&gt;Java Reflection이 사용되는 대표적인 예로는 스프링의 Dependency Injection이 존재하며 Jackson 라이브러리의 ObjectMapper 에서도 사용되어집니다.&lt;/p&gt;

&lt;h3 id=&quot;spring-boot와-spring의-차이점은-무엇인가요&quot;&gt;Spring Boot와 Spring의 차이점은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring Boot와 Spring Framework의 가장 큰 차이는 AutoConfiguration 즉, 자동 설정의 차이입니다.&lt;/strong&gt; Spring Boot는 Spring Boot Starter Project를 통해서 특정 어플리케이션 개발을 위한 설정을 자동으로 구성해주고 관련 라이브러리간에 호환성 문제를 해결해줍니다.&lt;/p&gt;

&lt;p&gt;한 예로써 Spring MVC 프로젝트를 Spring Framework 기반으로 구성 한다면, 관련 Bean 설정, DispatcherServlet 설정, View Resolver 설정, JDBC 설정 등의 다양한 설정 및 버젼간에 호환성 문제가 발생하지만 Spring Boot Starter Web을 사용해서 프로젝트를 구성한다면 초기 구성에 걸리는 비용 문제와 호환성 이슈들을 해결할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;jarjava-archive&quot;&gt;JAR(Java Archive)&lt;/h3&gt;

  &lt;p&gt;&lt;strong&gt;JAR(Java Archive, 자바 아카이브)&lt;/strong&gt;는 여러개의 자바 클래스 파일과 클래스들이 이용하는 관련 리소스(텍스트, 그림 등) 및 메타데이터를 하나의 파일로 모아서 자바 플랫폼에 응용 소프트웨어나 라이브러리를 배포하기 위한 소프트웨어 패키지 파일 포맷을 의미합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spring-mvc&quot;&gt;Spring MVC&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mvc-패턴이란-무엇인가요&quot;&gt;MVC 패턴이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MVC 패턴이란 웹 어플리케이션에서 자주 사용되는 디자인 패턴으로 시스템을 크게 Model, View, Controller로 나누어 모듈간에 결합도를 낮추고 응집도를 높이기 위해 사용하는 패턴입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Controller란 사용자로부터 요청을 받아서 모델, 뷰와의 상호작용을 통해 적절한 응답을 제공해주는 중개자의 역할을 하는 컴포넌트를 의미합니다.&lt;/li&gt;
  &lt;li&gt;Model은 시스템에서 사용하는 도메인 등을 의미합니다.&lt;/li&gt;
  &lt;li&gt;View는 사용자에게 제공하는 화면이나 페이지등을 의미합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;mvc-pattern-architecture&quot;&gt;MVC Pattern Architecture&lt;/h3&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation8-1.png&quot; style=&quot;width:50%&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;servlet-이란-무엇인가요&quot;&gt;Servlet 이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Servlet이란 특정한 타입의 네트워크 요청에 응답하기 위한 Java EE의 인터페이스 즉, 명세입니다. 보통 구현체로 HttpServlet을 사용하며 Spring MVC에서는 DispatcherServlet을 Front Controller로 사용합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;servlet과-wasservlet-container의-관계는-어떻게-되나요&quot;&gt;Servlet과 WAS(Servlet Container)의 관계는 어떻게 되나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Servlet Container는 설정 파일(web.xml)을 읽고, servlet 클래스를 식별한 다음 ClassLoader를 사용하여 JVM에 로드하고 요청에 알맞는 Servlet을 실행합니다.&lt;/strong&gt; &lt;strong&gt;Servlet Container는 요청이 들어올 때마다 서블릿을 생성하며 하나의 서블릿에는 하나의 쓰레드가 할당됩니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;mvc-패턴-model1과-model2를-비교해주세요&quot;&gt;MVC 패턴 Model1과 Model2를 비교해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MVC 패턴 Model 1은 사용자의 요청과 응답을 전부 다  JSP가 처리하는 모델&lt;/strong&gt;을 의미하구요, &lt;strong&gt;MVC패턴 Model 2는 컨트롤러에서 사용자의 요청을 받아 비즈니스 로직을 태우고 데이터를 JSP로 넘겨서 응답을 하는 모델&lt;/strong&gt;을 의미합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;mvc-model-1&quot;&gt;MVC Model 1&lt;/h3&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation8-2.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

  &lt;h3 id=&quot;mvc-model-2&quot;&gt;MVC Model 2&lt;/h3&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation8-3.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;spring-mvc를-위한-필수-설정은-어떤게-있나요&quot;&gt;Spring MVC를 위한 필수 설정은 어떤게 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;web.xml 파일을 통해 특정 요청이 Servlet Container로 들어왔을 때 어떠한 Servlet을 맵핑할지 설정해야 하구요, Servlet Container가 Servlet을 맵핑하기 전에 필터링 해야할 부분이 있다면 필터 설정이 필요합니다. 그 외에도 View를 Resolve할 필요가 있다면 View Resolver, Message를 특정 타입으로 변환해야할 필요가 있다면 MessageConverter, 애노테이션 기반의 Bean 등록을 위해 ComponentScan, JDBC 설정을 위한 각종 Bean 설정과 트랜잭션 설정 등 다양한 설정이 MVC 기본 프로젝트를 구성하기 위해서 필요합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;spring-mvc-구조에-대해서-설명해주세요&quot;&gt;Spring MVC 구조에 대해서 설명해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring MVC의 시작은 Front Controller인 DispatcherServlet입니다. DispatcherServlet은 사용자의 HTTP 요청을 처리하기 위하여 등록된 핸들러로 디스패치시켜 맵핑 및 예외 처리 기능을 제공합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;DispatcherServlet으로 요청이 들어왔을 때의 Spring MVC의 대략적인 과정은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation8-4.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;DispatcherServlet으로 HTTP Request가 들어온다.&lt;/li&gt;
  &lt;li&gt;DispatcherServlet은 요청 URL 등의 정보와 맵핑되는 적절한 Controller를 선택하는 작업을 HandlerMapping에 디스패치한다.&lt;/li&gt;
  &lt;li&gt;DispatcherServlet은 Controller의 비즈니스 로직을 실행하는 작업을 HandlerAdapter에 디스패치한다.&lt;/li&gt;
  &lt;li&gt;HandlerAdapter는 Controller의 비즈니스 로직 프로세스를 호출한다.&lt;/li&gt;
  &lt;li&gt;Controller는 비즈니스 로직을 실행하고 결과를 모델에 맵핑하고 view의 논리적인 이름을 HandlerAdapter에 리턴한다.&lt;/li&gt;
  &lt;li&gt;DispatcherServlet은 View name에 일치하는 View를 Resolving하는 작업을 ViewResolver에게 디스패치하고 ViewResolver는 View name에 맵핑된 View를 리턴한다.&lt;/li&gt;
  &lt;li&gt;DispatcherServlet은 랜더링 프로세스를 리턴된 뷰에 디스패치한다.&lt;/li&gt;
  &lt;li&gt;View는 Model을 랜더링하고 Response를 전송한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;spring-mvc-servlet-processing간에-예외가-발생하면-어떻게-되나요&quot;&gt;Spring MVC Servlet Processing간에 예외가 발생하면 어떻게 되나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Request Mapping 또는 Request Handler로 부터 예외가 발생하면 DispatchServlet은 HandlerExceptionResolver 인터페이스의 구현체가 예외를 처리해 적절한 응답을 클라이언트에게 보냅니다.&lt;/strong&gt; 저는 Jackson을 사용해서 Deserailize간에 예외 발생을 경험해 보았기 때문에 DefaultHandlerExceptionResolver가 400번 상태 코드를 맵핑해서 사용자에게 응답해주었습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spring-security&quot;&gt;Spring Security&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;spring-security는-무엇인가요&quot;&gt;Spring Security는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring Security란 자바 어플리케이션에서 인증과 권한 부여, 일반적인 공격에 대한 보호 기능을 제공하는 프레임워크입니다.&lt;/strong&gt; Spring Security를 사용하면 어플리케이션의 보안 관련 기능을 자체적으로 구현할 필요없이 쉽고 안전하게 구현할 수 있고 다양한 요구사항을 충족하기 위해서 쉽게 확장할 수도 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;인증-구현을-위해-spring-security를-사용한-이유가-있나요&quot;&gt;인증 구현을 위해 Spring Security를 사용한 이유가 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;인증 구현을 위해서 Spring Security를 사용한 이유는 공식문서에서 기본적인 인증과 권한 부여 기능을 제공한다고 해서 사용했구요, 인터셉터와 AOP를 활용하는 방식이 아닌 Filter를 통해서 색다르게 인증을 구현하고 싶어서 Spring Security를 사용하였습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;spring-security사용하시면서-어려운-점이-없었나요&quot;&gt;Spring Security사용하시면서 어려운 점이 없었나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring Security를 사용하면서 가장 어려웠던 점 중에 하나는 Spring MVC와 Spring Security의 구조를 완벽하게 이해하지 못해서 어느 시점에 Security Filter와 DispatcherServlet이 동작하며 어떻게 Security Filter에 JWT를 처리하는 필터를 만들어서 끼워 넣을까?에 대해서 설계하고 이해하는데 많이 어려웠던 것 같습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;filter와-security-filter의-차이는-무엇인가요&quot;&gt;Filter와 Security Filter의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Filter와 Security Filter 모두 Servlet에 요청이 맵핑되기 전에 실행되는 필터(Filter)&lt;/strong&gt;입니다. 둘다 동일한 Filter이지만 &lt;strong&gt;단순한 Filter는 서블릿 컨테이너에 직접 등록해서 사용하는 필터&lt;/strong&gt;이고 &lt;strong&gt;Security Filter는 DelegatingFilterProxy가 서블릿 컨테이너에 Filter로 등록되어서 Filter 작업을 Security FilterChain으로 위임해서 실행되는 필터를 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;즉, 다시 말해서 Filter와 Security Filter 모두 서블릿에 요청이 맵핑되기 전에 실행되는 필터인데 이를 서블릿 컨테이너에 직접 등록하느냐 아니면 DelegatingFilterProxy가 Filter작업을 Security Filter Chain으로 위임해서 사용하느냐의 차이입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;security-filter-chain&quot;&gt;Security Filter Chain&lt;/h3&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation8-5.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;filter와-interceptor의-차이는-무엇인가요&quot;&gt;Filter와 Interceptor의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Filter는 Spring Context 외부에 존재하여 Servlet에 요청이 맵핑되기 전에 작업을 수행하구요, Interceptor는 Spring Context 내부에 존재하여 DispatcherServlet이 컨트롤러를 호출하기 전과 후에 작업을 수행합니다&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;spring-mvc-request-life-cycle&quot;&gt;Spring MVC Request Life Cycle&lt;/h3&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation8-6.jpg&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;인증을-위해서-어떻게-spring-security를-사용하셨나요&quot;&gt;인증을 위해서 어떻게 Spring Security를 사용하셨나요?&lt;/h3&gt;

&lt;p&gt;Spring Security를 사용해서 인증을 구현하기 위해 &lt;strong&gt;JWT를 생성, 인증, 권한 부여, 유효성 검사, PK 추출을 할 수 있는 클래스인 JwtTokenProvider&lt;/strong&gt;를 만들었구요, &lt;strong&gt;이를 사용해서 Filter 작업을 수행할 JwtAuthenticationFilter&lt;/strong&gt;를 만들었습니다. &lt;strong&gt;JWT 인증 필터가 기본 인증 필터인 UsernamePasswordAuthenticationFilter 이전에 수행할 수 있도록 Security Filter Chain 설정을 통해서 인증을 구현&lt;/strong&gt;할 수 있었습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;securitycontextholder&quot;&gt;SecurityContextHolder&lt;/h3&gt;

  &lt;p&gt;Spring Security 인증의 핵심은 SecurityContextHolder이다.&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation8-7.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;SecurityContextHolder는 Authentication 객체를 저장하는 SecurityContext를 포함한다.&lt;/li&gt;
    &lt;li&gt;Authentication 객체는 사용자를 식별 데이터를 의미하는 principle, 암호를 의미하는 credentials, 권한을 의미하는 authorities를 포함한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;spring-security의-전체적인-인증-프로세스를-설명해-주실-수-있나요&quot;&gt;Spring Security의 전체적인 인증 프로세스를 설명해 주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation8-8.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Client가 요청을 보내면, Servlet Filter에 의해서 Security Filter로 작업이 위임되고 여러 Security Filter 중에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtAuthenticationFilter&lt;/code&gt;에서 인증을 처리합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JwtAuthenticationFilter&lt;/code&gt;는 Servlet 요청 객체에서 토큰을 가져와서 &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtTokenProvider&lt;/code&gt;가 해당  토큰을 검증해 토큰이 유효한지 검사합니다.&lt;/li&gt;
  &lt;li&gt;토큰이 유효하다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Authentication&lt;/code&gt; 객체를 만들고 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationManager&lt;/code&gt;를 사용할 필요 없이 직접 &lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityContextHolder&lt;/code&gt;에 접근해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Authentication&lt;/code&gt; 객체를 저장합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;SecurityContext는 default로 ThreadLocalSecurityContextHolderStrategy를 사용하여 인증 객체를 저장하기 때문에 스레드당 즉, 서블릿당 하나의 인증 객체가 저장됨을 알 수 있었습니다.&lt;/strong&gt; 추후에 Controller나 Business Layer에서 이러한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Authentication&lt;/code&gt; 객체를 가져와서 직접 관련 비즈니스 로직들을 사용자에 맞게 태웠습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;java-threadlocal&quot;&gt;Java ThreadLocal&lt;/h3&gt;

  &lt;p&gt;&lt;strong&gt;자신의 스레드에서만 읽고 쓸 수 있는 변수를 저장하거나 관리하는데 사용하는 객체를 의미합니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spring-data-jpa--jpa&quot;&gt;Spring Data JPA &amp;amp; JPA&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;orm이란-무엇인가요&quot;&gt;ORM이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ORM이란 Object Relational Mapping의 줄임말로써 객체 지향 프로그래밍과 관계형 데이터베이스간에 통신시 발생하는 패러다임 불일치 문제를 해결하고자 객체와 관계형 데이터베이스간에 데이터를 자동으로 매핑해주는 기술을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;orm-jpa-hibernate-spring-data-jpa를-각각-비교해보세요&quot;&gt;ORM, JPA, Hibernate, Spring Data JPA를 각각 비교해보세요.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ORM은 객체 지향 프로그램과 관계형 데이터베이스간에 통신시 발생하는 패러다임 문제를 해결하기 위해 데이터를 자동으로 매핑해주는 기술을 의미합니다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;JPA란 자바 진영의 ORM을 위한 명세를 의미합니다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hibernate란 Java 진영의 ORM 명세인 JPA를 구현한 여러 구현체 중 하나&lt;/strong&gt;를 의미합니다. JPA 구현체로써 Hibernate 외에도 EclipseLink나 DataNucleus 등이 존재합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Spring Data JPA는 Spring 환경에서 JPA를 편리하게 사용할 수 있도록 Repository 기반으로 추상화 시킨 스프링 서브 프로젝트입니다.&lt;/strong&gt; Spring Data JPA는 JPA 사용시 발생하는 수 많은 boilerplate를 없애주고 pagination이나 Query Method 등의 다양한 기능을 지원합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프로젝트에-jpa를-사용하신-이유가-뭔가요&quot;&gt;프로젝트에 JPA를 사용하신 이유가 뭔가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;프로젝트 진행간에 발생하는 반복되는 쿼리문을 없애고 좀 더 객체지향적으로 코드를 작성하고 싶어서 JPA를 사용하였습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;jpa의-장점과-단점에-대해서-말씀해주실-수-있나요&quot;&gt;JPA의 장점과 단점에 대해서 말씀해주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;JPA의 대표적인 장점으로는 개발자가 반복되는 쿼리를 직접 작성하지 않아도 됨으로 개발 생산성 측면에서 효율이 올라가는 장점&lt;/strong&gt;이 존재합니다. &lt;strong&gt;대표적인 단점으로는 Persistent Context에서 1차 Cache, Write Behind, Dirty Checking, Lazy Loading 등의 다양한 기능을 지원해주기 때문에 해당 개념을 잘 모르고 JPA를 사용했을 경우 수 많은 예외와 성능 감소가 발생할 수 있다는 점&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;h3 id=&quot;jpa-entity의-상태-변화에-대해서-설명해주실-수-있나요&quot;&gt;JPA Entity의 상태 변화에 대해서 설명해주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;JPA Entity의 상태는 Transient 상태, Persistent 상태, Detached 상태, Removed 상태가 존재합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Transient는 객체가 새롭게 생성된 상태를 의미하며 Persistent Context에서 관리하지 않는 상태입니다.&lt;/li&gt;
  &lt;li&gt;Persistent는 Persistent Context에 의해서 관리되어지는 상태이며 해당 엔티티는 1차 캐시, write behind, Dirty checking 등의 다양한 기능을 제공받을 수 있습니다.&lt;/li&gt;
  &lt;li&gt;Detached는 Persistent Context에서 해당 엔티티를 더이상 관리하지 않는 상태를 의미합니다.&lt;/li&gt;
  &lt;li&gt;Removed는 데이터베이스로부터 해당 엔티티를 제거한 상태를 의미합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;영속성이-어떻게-유지되고-db에-저장되는건가요&quot;&gt;영속성이 어떻게 유지되고 DB에 저장되는건가요?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;트랜잭션이 시작합니다.&lt;/li&gt;
  &lt;li&gt;새로운 엔티티 객체를 생성합니다.&lt;/li&gt;
  &lt;li&gt;Persistent Context에 엔티티 객체를 올립니다.&lt;/li&gt;
  &lt;li&gt;Persistent Context는 해당 엔티티를 관리하면서 Dirty Checking이나 1차 캐시등의 다양한 기능을 제공해줍니다.&lt;/li&gt;
  &lt;li&gt;트랜잭션이 커밋되기 전에 flush가 발생하며 Persistent Context의 변경 내용들이 데이터베이스에 반영됩니다.&lt;/li&gt;
  &lt;li&gt;트랜잭션 커밋됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1차-caching은-무엇인가요&quot;&gt;1차 Caching은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Flush가 발생하기 전까지 Persistent Context 내부에서 엔티티를 캐싱하는 것을 1차 캐싱이라고 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;write-behind는-무엇인가요&quot;&gt;Write Behind는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Flush가 발생하기 전까지 DB에 write 하는 쿼리문을 Persistent Context 내의 쓰기 지연 SQL 저장소에서 관리해서 flush가 일어날 때 이를 데이터베이스에 반영하는 것을 Write Behind 라고 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;dirty-checking은-무엇인가요&quot;&gt;Dirty Checking은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Persistent Context에서 Flush가 일어날 때 저장된 엔티티와 스냅샷의 상태를 비교해서 서로 다르면 알맞는 쿼리문을 데이터베이스에 반영하는 것을 Dirty Checking이라고 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;lazy-loading은-무엇인가요&quot;&gt;Lazy Loading은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Lazy Loading이란 DB로부터 엔티티를 가져올 때 참조된 엔티티와 관련된 select 쿼리가 발생하는 것이 아닌 프록시를 통해서 직접 참조된 엔티티를 사용될 경우에 select 쿼리가 발생하는 것을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DB로부터 직접 가져오는 엔티티와 이에 참조된 엔티티가 자주 같이 사용된다면 즉시 로딩을 사용하면 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;querydsl은-무엇인가요&quot;&gt;Querydsl은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Querydsl이란 Type-safe한 방식으로 쿼리를 작성할 수 있도록 도와주는 프레임워크를 의미합니다.&lt;/strong&gt; querydsl을 사용하면 컴파일 타임에 쿼리의 문법 오류를 검증할 수 있고, IDE의 자동 완성 기능을 사용해서 보다 type-safe한 쿼리를 작성할 수 있습니다.&lt;/p&gt;

</description>
        <pubDate>Sat, 06 Mar 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2021/03/06/NAVER-Practical-Interview-Preparation-8.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2021/03/06/NAVER-Practical-Interview-Preparation-8.html</guid>
        
        <category>Spring-Framework</category>
        
        <category>Core</category>
        
        <category>Boot</category>
        
        <category>MVC</category>
        
        <category>Security</category>
        
        <category>JPA</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[실무 면접 준비 - 7] 스마트도어락 &amp; webper (Smart Doorlock &amp; Webper)</title>
        <description>&lt;hr /&gt;

&lt;h2 id=&quot;smart-doorlock&quot;&gt;Smart Doorlock&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;스마트도어락은-무엇인가요&quot;&gt;스마트도어락은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;스마트도어락이란 오픈소스 IoT 서버 플랫폼인 Mobius를 활용한 사용자의 완벽한 외출을 도와주는 IoT 플랫폼입니다.&lt;/strong&gt; 자택 현관문 내부에 존재하는 기존의 도어락 본체는 제거하고 그 자리에 터치식 디스플레이를 설치하여 &lt;strong&gt;사용자가 외출 시에 필요한 날씨 및 미세먼지 등의 다양한 정보를 제공하고 가스 밸브 및 전등과 같은 가전들을 등록해 상태 확인 및 제어할 수 있는 기능을 가진 IoT 플랫폼&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;h3 id=&quot;사용하신-mobius-플랫폼이-무엇인지-알-수-있을까요&quot;&gt;사용하신 Mobius 플랫폼이 무엇인지 알 수 있을까요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mobius 플랫폼이란 oneM2M 표준을 기반으로 한 오픈소스 IoT 서버 플랫폼입니다.&lt;/strong&gt; Mobius는 다양한 도메인의 IoT 애플리케이션에 대한 미들웨어로써 oneM2M표준에 해당하는 공통 서비스 기능인 CSE와 AE 등록, 데이터 관리, pub/sub, 보안 등의 기능을 제공합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;system-structure&quot;&gt;System Structure&lt;/h3&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation7-1.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;onem2m을-말씀하셨는데-이건-무엇인가요-하나의-표준인가요&quot;&gt;oneM2M을 말씀하셨는데 이건 무엇인가요? 하나의 표준인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;oneM2M이란 말 그대로 one + M2M의 합성어로 Machine간에 통신을 하나의 인프라 환경에 통합하기 위한 플랫폼 개발 표준화 단체 및 표준을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;onem2m의-구성요소-중-cse는-무엇인가요&quot;&gt;oneM2M의 구성요소 중 CSE는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSE란 Common Service Entity의 줄임말로 oneM2M 스팩을 구현한 서비스 플랫폼에서 공통적으로 제공되어야하는 서비스 기능을 제공하는 미들웨어를 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;onem2m의-구성요소-중-ae는-무엇인가요&quot;&gt;oneM2M의 구성요소 중 AE는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;AE란 Application Entity의 줄임말로서 M2M(Machine to Machine)서비스를 제공하기 위한 논리적인 엔티티&lt;/strong&gt;를 의미합니다.&lt;/p&gt;

&lt;h3 id=&quot;미들웨어middleware란-무엇인가요&quot;&gt;미들웨어(Middleware)란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;미들웨어(Middleware)란 운영체제와 응용 소프트웨어 사이에서 조정과 중개의 역할을 수행하는 소프트웨어&lt;/strong&gt;를 의미하구요, 이를 통해 응용 소프트웨어는 운영체제로부터 제공받는 서비스 이외에 추가적인 서비스를 받을 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;대표적인 미들웨어로는 메시징 처리 소프트웨어나 데이터베이스 시스템 등이 존재합니다.&lt;/li&gt;
  &lt;li&gt;Mobius 플랫폼 즉, 미들웨어인 CSE를 통해서 oneM2M 스팩에서 제공해야하는 공통 서비스 기능인 pub/sub, 데이터관리, 보안 등을 제공합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ininfrastructure-node은-무엇인가요&quot;&gt;IN(Infrastructure Node)은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;IN이란 Infrastructure Node의 줄임말로서 인프라 도메인에 위치한 CSE를 포함하는 서버 기기&lt;/strong&gt;를 의미합니다.&lt;/p&gt;

&lt;h3 id=&quot;adnapplication-dedicated-node란-무엇인가요&quot;&gt;ADN(Application Dedicated Node)란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ADN이란 Applicaton Dedicated Node의 줄임말로서 필드 도메인에 위치한 ADN-AE를 포함하고 CSE를 포함하지 않는 논리적 기기&lt;/strong&gt;를 의미합니다.&lt;/p&gt;

&lt;h3 id=&quot;cube와-tas는-각각-무엇인가요&quot;&gt;&amp;amp;Cube와 TAS는 각각 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&amp;amp;Cube는 IoT 디바이스에 탑재되는 소프트웨어 플랫폼으로서 IN-CSE 즉, 모비우스와 통신할 수 있도록 지원하는 소프트웨어&lt;/strong&gt;입니다. &lt;strong&gt;TAS란 실제 사물을 디바이스에 연결하기 위한 S/W로서 사물과 &amp;amp;Cube간의 통신을 지원하는 역할&lt;/strong&gt;을 합니다.&lt;/p&gt;

&lt;p&gt;즉, 사물과 &amp;amp;Cube를 TAS로써 연결하고 사물과 IN-CSE를 &amp;amp;Cube로써 연결할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;in-ae로-nodejs를-사용한-이유가-있나요&quot;&gt;IN-AE로 Node.js를 사용한 이유가 있나요?&lt;/h3&gt;

&lt;p&gt;IN-AE로 Node.js를 사용한 이유는 IN-CSE인 Mobius 자체가 Node.js로 구현되어 있기 때문에 &lt;strong&gt;IN-AE를 개발하기 위해 새로운 언어를 배워야 하는 학습 비용을 줄이기 위해서 Node.js를 사용&lt;/strong&gt;하였습니다. 또한 마감이 정해진 개발자 대회 특성상 &lt;strong&gt;빠르게 프로젝트를 빌드업하기 위해 프로토타입 개발에 생산성이 높은 Node.js를 사용&lt;/strong&gt;하였습니다.&lt;/p&gt;

&lt;h3 id=&quot;nodejs의-특징에-대해서-알고-있나요&quot;&gt;Node.js의 특징에 대해서 알고 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Node.js란 자바스크립트를 사용하고 Non-blocking I/O와 싱글 스레드 이벤트 루프를 통한 높은 처리 성능&lt;/strong&gt;을 가지고 있습니다. 또한 내장 HTTP 서버 라이브러리를 포함하고 있어 서버 구현 시 아파치 등의 별도의 소프트웨어 없이 동작하는 것이 가능하기 때문에 빠르게 프로토타입을 제작 할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;non-blocking-io와-blocking-io의-차이에-대해서-말씀해주세요&quot;&gt;Non-Blocking I/O와 Blocking I/O의 차이에 대해서 말씀해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;멀티 스레드 환경에서 Non-Blocking I/O란 하나의 스레드에서 I/O가 일어날 때 다른 스레드들이 Block되지 않고 병렬로써 실행하는 것을 의미하구요, Blocking I/O란 하나의 스레드에서 I/O가 일어날 때 해당 스레드가 I/O 작업을 완료할 때까지 다른 스레드들이 기다리는 것을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;webper&quot;&gt;webper&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;webper는-어떤-서비스이고-본인은-팀에서-어떠한-역할을-맡으셨나요&quot;&gt;webper는 어떤 서비스이고 본인은 팀에서 어떠한 역할을 맡으셨나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;webper는 관심있는 웹 사이트를 drag &amp;amp; drop으로 모아서 보관할 수 있는 웹 디렉토리 서비스입니다.&lt;/strong&gt; 저는 webper 프로젝트에서 백앤드를 맡았으며 인증 및 데이터 API 서버 개발과 CI/CD 구축을 진행하였습니다.&lt;/p&gt;

&lt;h3 id=&quot;webper의-시스템-아키텍처에-대해서-저희에게-설명해주실-수-있나요&quot;&gt;Webper의 시스템 아키텍처에 대해서 저희에게 설명해주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Webper는 사용자에게 뷰를 서비스하기위한 Front-End와 인증 및 데이터를 처리하기위한 Back-End로 나뉩니다.&lt;/strong&gt; Front-End는 뷰를 서비스하기위해 React를 사용해서 개발했구요, Back-End는 인증 및 데이터 API 서버를 위해 Spring Boot, html 페이지의 특정 요소에 분석하기 위해서 Node.js를 사용해서 개발하였습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;webper-system-architecture&quot;&gt;Webper System Architecture&lt;/h3&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation7-2.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;왜-백앤드-기술-스택을-spring-boot와-nodejs를-나누었나요&quot;&gt;왜 백앤드 기술 스택을 Spring Boot와 Node.js를 나누었나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;일단 팀 내에서 각 구성원들이 맡은 부분과 기술 스택이 서로 달랐기 때문에 서버를 두개로 나누었습니다.&lt;/strong&gt; 뿐만 아니라 &lt;strong&gt;인증 및 데이터 API 서버와 HTML 페이지 분석 서버는 서로 맡은 책임이 완전히 다르기 때문에 서버를 두개로 나누었을 경우에 더 독립적으로 진화&lt;/strong&gt;할 수 있겠다고 생각했구요, &lt;strong&gt;HTML 페이지의 Meta 태그가 아닌 DIV 태그 등의 디테일한 데이터들에 쉬운 접근을 제공하는 puppeteer 라이브러리가 Node 라이브러리이기 때문에 팀원분이 Node.js를 사용하신걸로 알고 있습니다.&lt;/strong&gt; 저는 인증 및 데이터 API 서버를 개발하기 위해 Spring Boot를 사용했구요.&lt;/p&gt;

&lt;h3 id=&quot;puppeteer란-정확히-무엇인가요&quot;&gt;Puppeteer란 정확히 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Puppeteer는 DevTools Protocol을 통해 Chrome 또는 Chromium을 제어하기 위한 API를 제공하는 Node.js 라이브러리 입니다.&lt;/strong&gt; 다양한 기능이 존재하지만 가장 큰 특징은 브라우저가 사용자 눈에 보여지지 않고 백그라운드 환경에서 작동하는 즉, &lt;strong&gt;headless로 브라우저를 실행&lt;/strong&gt;할 수 있다는 점입니다. 이러한 특징을 통해서 저희는 메타데이터가 아닌 body 내부에 존재하는 다양한 요소의 데이터를 가져올 수 있게 되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;webper를-통해서-무엇을-얻으셨나요&quot;&gt;Webper를 통해서 무엇을 얻으셨나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;처음으로 스프링을 사용해서 여러 노드간에 통신할 수 있는 API 서버 개발을 진행했기 때문에 전체적인 시스템 아키텍처에 대한 이해를 높일 수 있는 계기가 되었구요 또한 스프링 프레임워크에 대한 이해가 높아질 수 있는 계기가 되었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;프론트와 백앤드를 나누어 서로 독립적으로 개발을 진행함으로써 &lt;u&gt;소스 코드 관리의 중요성, API 명세의 중요성, 문서화의 중요성, 협업의 중요성, 설계의 중요성&lt;/u&gt; 등의 다양한 깨달음을 얻을 수 있었습니다.&lt;/p&gt;

&lt;h3 id=&quot;webper-프로젝트-진행간에-가장-어려웠던-점이-있었나요&quot;&gt;Webper 프로젝트 진행간에 가장 어려웠던 점이 있었나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;프로젝트 개발간에 가장 어려웠던 점은 API서버에 인증을 구현하는게 가장 어려웠던 것 같습니다.&lt;/strong&gt; 토큰 기반의 인증 구현을 위해 Spring Security와 JWT를 사용했으며 이를 도입해서 개발하는 과정에서 다양한 이슈가 발생하였습니다. 대부분의 이슈들은 제가 Servlet이나, Servlet Container, Spring MVC 스펙들을 잘 몰라서 생긴 이슈였으며 이번 프로젝트를 통해서 전체적인 아키텍처를 많이 배울 수 있었습니다.&lt;/p&gt;

&lt;h3 id=&quot;세션과-쿠키-기반의-인증-방식의-장단점은-무엇인가요&quot;&gt;세션과 쿠키 기반의 인증 방식의 장단점은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;세션 ID는 서버에서 암호화 하기 때문에 이 자체가 유의미한 값을 갖지 않아서 보안에 강합니다.&lt;/li&gt;
  &lt;li&gt;세션 ID는 보통 메모리에서 저장 및 처리되기 때문에 빠른 연산 속도를 통해 성능 향상의 효과를 가져다 줄 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;통신 중에 해커가 가로챈 세션 ID를 가지고 서버에게 동일한 요청을 보낼 경우 서버는 해당 사용자 진짜 사용자인지 해커인지 구분할 수가 없는 단점이 존재합니다. (세션 유효시간을 짧게 설정하거나, HTTPS  프로토콜을 사용)&lt;/li&gt;
  &lt;li&gt;세션 저장소는 보통 서버의 메모리를 사용하기 때문에 사용자가 많을 수록 서버에 부하가 걸리는 단점이 존재합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;토큰-기반-인증-방식은-무엇인가요&quot;&gt;토큰 기반 인증 방식은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;클라이언트와 서버간에 인증에 필요한 정보들을 토큰으로 암호화시키고 이를 통해서 인증을 진행하는 방식을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;토큰 인증 동작 방식&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트가 로그인 합니다.&lt;/li&gt;
  &lt;li&gt;서버는 클라이언트를 확인하고 Access Token을 발급해 사용자에게 응답해줍니다.&lt;/li&gt;
  &lt;li&gt;사용자는 Access Token을 받아와서 쿠키와 같은 곳에 저장한 후, 인증이 필요한 요청마다 Access Token을 헤더에 실어 보냅니다.&lt;/li&gt;
  &lt;li&gt;서버는 해당 토큰을 검증하고 적절한 토큰일 경우 해당 사용자에게 알맞는 데이터를 보냅니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;토큰-기반-인증-방식의-장단점은-무엇인가요&quot;&gt;토큰 기반 인증 방식의 장단점은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;세션/쿠키와 달리 토큰은 별도의 저장소 없이 해당 토큰을 검증만 하면 되기 때문에 추가 저장소가 필요 없습니다.
(토큰을 검증을 통해 사용자를 식별할 수 있다.)&lt;/li&gt;
  &lt;li&gt;Facebook이나 Google에서 지원해주는 다양한 서비스도 토큰 기반으로 진행되기 때문에 토큰 관련 기능을 확장하는데 용이합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;통신 중에 해커가 가로챈 토큰을 가지고 서버에게 요청을 보낼 경우 서버는 해당 사용자 진짜 사용자인지 해커인지 구분할 수가 없는 단점이 존재합니다. (토큰 유효기간을 짧게 설정하거나, HTTPS  프로토콜을 사용)&lt;/li&gt;
  &lt;li&gt;토큰의 길이는 세션 ID보다 훨씬 길기 때문에 많은 요청이 발생할 수록 오버헤드가 많이 발생합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;jwtjson-web-token란-무엇인가요&quot;&gt;JWT(Json Web Token)란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;JWT란 Json Web Token의 줄임말로써 Json 포맷을 통해 사용자에 대한 속성을 저장하는 Web Token이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/interview/naver-interview-preparation8-1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JWT는 &lt;u&gt;Header, Payload, Signature&lt;/u&gt; 3개의 부분으로 나뉘며 .을 통해서 구분합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Header : Signature를 해싱하기 위한 알고리즘이나 토큰의 타입을 지정하는 부분이다.&lt;/li&gt;
  &lt;li&gt;Payload : 토큰에서 사용할 정보의 조각들인 Claim의 집합으로 구성되어 있습니다.
    &lt;ul&gt;
      &lt;li&gt;Payload에 담는 정보의 ‘한 조각’을 Claim이라고 부르고, 이는 Key/Value의 한 쌍으로 이루어져 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Signature: 토큰을 인코딩하거나 유효성 검증을 할 때 사용하는 고유한 암호화 코드입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jwt를-사용하신-이유가-있나요&quot;&gt;JWT를 사용하신 이유가 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;토큰 기반 인증을 위해서 토큰 생성이 가장 간단하면서도 토큰 만료 기간과 같은 다양한 기능 명세가 존재했기 때문에 JWT를 사용하였습니다.&lt;/strong&gt; 또한 자바단에서 JWT를 생성하고 검증할 수 있는 라이브러리가 잘 형성되어 있었기 때문에 이를 사용하기도 하였습니다.&lt;/p&gt;

&lt;h3 id=&quot;jwt의-단점은-무엇인가요&quot;&gt;JWT의 단점은 무엇인가요?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;JWT 토큰은 상태 정보를 저장하지 않아서 한번 발행된 토큰이 임의로 삭제될 수 없기 때문에 적절한 토큰 만료 기간을 넣어줘야만 합니다.&lt;/li&gt;
  &lt;li&gt;JWT 토큰은 전체적으로 길이가 길기 때문에 많은 요청과 응답이 발생 할 경우 성능에 영향을 줄 수 있습니다.&lt;/li&gt;
  &lt;li&gt;JWT의 Payload 자체는 암호화 된 것이 아니라 인코딩 된 것이기 때문에 암호화에 신경 쓰거나, 중요 데이터를 Payload에 넣지 말아야 합니다.&lt;/li&gt;
  &lt;li&gt;쿠키/세션 기반의 인증과 마찬가지로 Token을 탈취당했을 경우 올바른 사용자 식별을 할 수 없습니다. 이를 위해 HTTPS 프로토콜을 사용하거나 토큰에 적절한 만료 기간을 설정해야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;oauth는-무엇인가요&quot;&gt;OAuth는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;OAuth는 사용자들이 특정 웹사이트 상의 자신들의 정보에 대해 타 웹사이트나 애플리케이션이 접근 할 수 있도록 권한을 부여하는 접근 위임을 위한 개방형 표준입니다. &lt;strong&gt;즉, OAuth란 특정 애플리케이션이 다른 애플리케이션의 정보에 접근할 수 있는 권한을 관리하는 프로토콜을 의미합니다.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Mar 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2021/03/05/NAVER-Practical-Interview-Preparation-7.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2021/03/05/NAVER-Practical-Interview-Preparation-7.html</guid>
        
        <category>Smart-Doorlock</category>
        
        <category>Mobius</category>
        
        <category>Webper</category>
        
        <category>Spring</category>
        
        <category>Security</category>
        
        <category>JPA</category>
        
        <category>MVC</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[실무 면접 준비 - 6] Pinpoint Webhook Contribution</title>
        <description>&lt;hr /&gt;

&lt;h2 id=&quot;pinpoint&quot;&gt;Pinpoint&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;pinpoint는-무엇인가요&quot;&gt;Pinpoint는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pinpoint란 대규모 분산 시스템을 위한 APM(Application Performance Management)도구 입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ServerMap&lt;/strong&gt;을 통하여 컴포넌트간에 연결되는 방식들을 시각화하고 각 컴포넌트를 분석합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Realtime Active Thread Chart&lt;/strong&gt;를 통하여 실시간으로 어플리케이션 내에서 활동하고 있는 스레드를 모니터링 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Request/Response Scatter Chart&lt;/strong&gt;를 통하여 시간 경과에 따른 요청 수 및 응답 패턴을 시각화하여 잠재적인 문제를 식별합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CallStack&lt;/strong&gt;을 통하여 분산 환경에서 모든 트랜잭션에 대해 코드레벨 수준의 가시성을 제공하여 병목 현상과 실패 지점을 식별합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Inspector&lt;/strong&gt;을 통하여 어플리케이션에 추가적인 정보를 볼 수 있습니다. (CPU 사용량, Memory/Grabage Collection, TPS, JVM Arguemnts, …)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;pinpoint-architecture&quot;&gt;Pinpoint Architecture&lt;/h3&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation6-1.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;pinpoint에-어떠한-기여를-하셨나요&quot;&gt;Pinpoint에 어떠한 기여를 하셨나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;저는 Pinpoint Batch 모듈에 Webhook 기능을 추가하는 작업과 관련 도메인을 재설계 하는 작업을 진행하였습니다. 간단히 말해서 Batch가 application 상태를 주기적으로 체크하여 수치가 Threshold를 초과할 경우 클라이언트에게 webhook을 전송하는 기능을 개발하였습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;웹훅webhook이란-무엇인가요&quot;&gt;웹훅(Webhook)이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;웹훅(Webhook)이란 서버측에서 특정 이벤트가 발생할 경우 클라이언트 측으로 알림을 준다던가 관련 정보를 전송해주는 것을 의미합니다.&lt;/strong&gt; 저희는 알람 및 정보 전송을 위해서 HTTP Protocol을 사용했습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;웹과-인터넷&quot;&gt;웹과 인터넷&lt;/h3&gt;

  &lt;p&gt;&lt;strong&gt;인터넷(Internet)&lt;/strong&gt;은 컴퓨터로 연결하여 TCP/IP 프로토콜을 이용해 정보를 주고받는 컴퓨터 네트워크입니다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;웹(WEB)&lt;/strong&gt;은 인터넷에 연결된 컴퓨터를 통해 사람들이 정보를 공유할 수 있는 전 세계적인 공간을 의미합니다.&lt;/p&gt;

  &lt;p&gt;-출처: wiki-&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;웹훅-기능을-기여하는데-얼마나-걸리셨죠&quot;&gt;웹훅 기능을 기여하는데 얼마나 걸리셨죠??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;작년 8월에 시작해서 올해 1월 말까지 진행했으니 대략 6개월 정도 걸렸던 것 같습니다.&lt;/strong&gt; 개발 기간이 이정도까지 오래 걸리리라고는 상상도 못했지만 Pinpoint가 체크하는 Metric이 엄청 많다 보니 확장성 있고 유지보수성이 좋은 Webhook Json Spec을 정하는데 오래 걸렸고, 기존의 Alarm 도메인 설계 자체도 적절하지 못한 것 같아서 이를 리팩토링 하는데 시간이 오래걸렸습니다. 또한 머지가 되야하는 시점에 Batch가 원래 Web 모듈 내에 존재 했었는데 독립적인 모듈로 분리가 되면서 저도 이를 반영해야 했기 때문에 더 오래걸렸던 것 같습니다. &lt;strong&gt;하지만 오래 걸린 만큼 스펙과 구현에 더 집중할 수 있어서 더 확장성 있고 유지보수성이 좋은 개발을 할 수 있었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;웹훅-기능을-개발하면서-어려운-점이-있으셨나요&quot;&gt;웹훅 기능을 개발하면서 어려운 점이 있으셨나요??&lt;/h3&gt;

&lt;p&gt;Webhook을 개발하면서 가장 어려웠던 점은 Pinpoint에서 체크하는 Metric들의 타입이 너무 다르다는 것이었습니다. 추상 클래스인 AlarmChecker의 구현체에 따라서 Metric 값의 타입은 Integer, Integer 배열, 특정 객체 배열 등 다양한 타입이 존재했습니다. 기존 SMS와 Email을 통해서 알람을 보낼 때는 수집된 값의 형식이 달라도 전송하기 전에 Message Template을 통해 특정 텍스트 형식을 만들어 보내면 됬었지만, Webhook 기능은 Pinpoint와 다른 어플리케이션간에 확장성 제공이 목적이었기 때문에 Metric 별로 특정 텍스트 형식을 만들어 보내기에는 사용자의 입장에서 자유도가 떨어지고 특정 값이 필요할 경우 사용자가 다시 문자열 처리를 해야만하는 책임을 주는 상황이었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이러한 이슈를 해결하기 위해 Metric 별로 수집하는 값의 타입을 모두 추상화할 수 있는 DTO 구조를 설계 및 구현했고, 수집된 Metric 값의 형식에 기반하여 도메인 구조를 재설계 및 구현함으로써 문제를 해결할 수 있었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;핀포인트를-개발하시면서-얻은-점은-무엇인가요&quot;&gt;핀포인트를 개발하시면서 얻은 점은 무엇인가요??&lt;/h3&gt;

&lt;p&gt;핀포인트 컨트리뷰션을 통해 정말 많은 부분을 배웠지만 그래도 가장 인상깊게 얻었던 점은 세 가지입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;첫 번째로는 핀포인트가 여러 인스턴스로 구성되어 있는 프로젝트인 만큼 전체 시스템 아키텍처를 볼 수 있는 능력이 향상되습니다.&lt;/li&gt;
  &lt;li&gt;두 번째로는 평소에 객체지향에 매우 관심이 많은데 모니터링 도메인에서 적용된 객체지향에 대해서도 배울 수 있었습니다.&lt;/li&gt;
  &lt;li&gt;세 번째로는 오픈 소스 컨트리뷰션에 대해서 자신감을 얻을 수 있었습니다. 오픈 소스에 컨트리뷰션 하는게 크게 어렵지않고 ‘내가 기여한 코드를 통해서 나 뿐만 아니라 오픈 소스를 사용하는 전 세계의 수 많은 개발자들이 편리해 질 수 있겠구나’ 라는 점을 깨달았구요 ‘다음번에도 오픈소스에 기여할 수 있겠다’라는 자신감이 생겼습니다. 실제로 인턴 기간에 Spring 프로젝트의 Data Redis에 오류가 존재해서 이를 컨트리뷰션해 머지가 된 경험을 하였습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pinpoint의-alarm-batch-구조에-대해서-설명해주실-수-있나요&quot;&gt;Pinpoint의 Alarm Batch 구조에 대해서 설명해주실 수 있나요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pinpoint의 Alarm Batch구조는 JobLauncher에서 정해진 시각마다 AlarmJob이 실행되는데 AlarmJob은 하나의 AlarmStep으로 이루어져 있고, AlarmStep은 Chunk기반의 Processing인 AlarmReader, AlarmProcessor, AlarmWriter로 구성되어 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AlarmReader는 HBase에서 어플리케이션의 Metric 데이터를 가져오고 AlarmProcessor가 이를 가공해 지정한 Threshold가 넘는지 확인합니다. 그 후 AlarmWriter는 Threshold가 넘는 Metric값과 관련 어플리케이션 정보를 User에게 email, sms, webhook 등을 통해 전송하는 구조를 가지고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;hbase란-무엇인가요&quot;&gt;HBase란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HBase란 HDFS(Hadoop Distributed File System)위에서 만들어진 분산 컬럼 기반의 NoSQL 데이터베이스입니다.&lt;/strong&gt; HBase에 저장된 대용량 데이터에 대해 강한 일관성과 실시간에 가까운 연산을 제공합니다.&lt;/p&gt;

&lt;h3 id=&quot;분산형-데이터베이스는-무엇인가요&quot;&gt;분산형 데이터베이스는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;분산형 데이터베이스란 데이터를 여러 인스턴스에 분산해서 저장하고 관리함으로써 높은 신뢰성과 성능을 제공하는데 효과적인 데이터베이스를 분산형 데이터베이스라고 합니다.&lt;/strong&gt; 대표적으로 Apache HBase, Apache Cassandra 등이 존재합니다.&lt;/p&gt;

&lt;h3 id=&quot;db-하위-호환-기능은-어떻게-구현-하셨나요&quot;&gt;DB 하위 호환 기능은 어떻게 구현 하셨나요?&lt;/h3&gt;

&lt;p&gt;webhook 기능을 개발하면서 DB 테이블에 컬럼이 하나 추가될 필요가 있었습니다. 컬럼이 추가되지 않으면 webhook 기능을 사용하지 못하기 때문에 이를 사용하기 위해서는 기존 사용자가 직접 DB에 들어가서 컬럼을 추가하는 쿼리문을 실행 해야만 했었습니다.&lt;/p&gt;

&lt;p&gt;그러나 웹훅 기능을 사용하지는 않지만 다른 기능 때문에 최근 Release를 도입하는 기존 사용자에게 “DB에 들어가서 Column을 추가해! 그렇지 않으면 알람 기능 자체를 사용하지 못할거야!” 라고 말하는 것은 적절하지 않다고 생각했기 때문에 웹훅을 사용하지 않는 기존 사용자를 위해서 하위 호환 기능을 구현할 필요가 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;하위 호환을 위해 webhook.enable이라는 property를 만들었구요 이를 통해 웹훅 기능을 사용하는 유저와 사용하지 않는 유저를 구분했습니다. 즉, webhook.enable이 true라고 설정되어 있다면 컬럼이 추가된 쿼리문이 DB에 전송되고 webhook이 동작하며, false라고 설정되어 있다면 컬럼이 추가되지 않은 쿼리문이 날라가고 webhook을 비활성화 하면서 하위 호환을 유지할 수 있었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이를 통해 평소에 전혀 경험해보지 못했던 데이터베이스 하위 호환을 경험할 수 있어서 즐겁고 색다른 경험이었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;어떻게-alarm-도메인을-재설계-했는지-자세히-알-수-있을까요&quot;&gt;어떻게 Alarm 도메인을 재설계 했는지 자세히 알 수 있을까요?&lt;/h3&gt;

&lt;p&gt;기존 Alarm 도메인은 단순한 ErrorCount나 API TotalCount인 Integer 값을 checking하는 AlarmChecker와 Agent가 붙여진 어플리케이션의 CPU나 Heap사용량 등을 checking하는 AgentChecker로 나뉩니다.&lt;/p&gt;

&lt;p&gt;이러한 Checker들이 검색하는 값의 타입이 각각 달라서 Webhook JSON Data Spec을 만드는데 어려움이 생겼고 이를 추상하기 위해서 Checker들이 검색하는 Metric 값의 타입을 기준으로 관련 도메인을 추상화 했고 리턴하는 Data 값을 추상화 할 수 있는 DTO를 설계하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Metric을 담을 DTO를 구현하기 위해서 어떠한 메서드 정의나 구현이 없는 오직 추상화만을 위한 마커 인터페이스를 만들었구요 이를 상속하는 AlarmCheckerDTO와 AgentCheckerDTO를 만들었습니다. 제네릭을 사용해 Metric별로 객체의 타입이 매우 다른 AgentCheckerDTO를 만들 수 있었고 이를 통해 더 확장성 있고 유지보수성이 좋은 Webhook JSON Data Spec을 만들 수 있었습니다.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 05 Mar 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2021/03/05/NAVER-Practical-Interview-Preparation-6.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2021/03/05/NAVER-Practical-Interview-Preparation-6.html</guid>
        
        <category>Pinpoint</category>
        
        <category>Webhook</category>
        
        <category>Alarm</category>
        
        <category>Batch</category>
        
        <category>Web</category>
        
        <category>Monitoring</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[실무 면접 준비 - 5] 자료구조 &amp; Java (Data Structrue &amp; Java)</title>
        <description>&lt;hr /&gt;

&lt;h2 id=&quot;자료구조data-structure&quot;&gt;자료구조(Data Structure)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;array란-무엇인가요&quot;&gt;Array란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Array는 인덱스와 인덱스에 대응하는 데이터들로 이루어진 자료 구조를 나타냅니다.&lt;/strong&gt; 논리적 저장 순서와 물리적 저장 순서가 일치하며 인덱스로 해당 원소에 접근할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;원소의 인덱스 값을 알고 있으면 검색 및 수정에는 O(1)의 시간이 걸리지만 삽입이나 삭제등이 필요한 경우에는 원소들을 shift 해주어야 하기 때문에 O(n)의 시간이 걸립니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;linkedlist란-무엇인가요&quot;&gt;LinkedList란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;LinkedList란 각 노드가 데이터와 포인터를 가지고 연결되어 있는 방식으로 데이터를 저장하는 자료 구조를 나타냅니다.&lt;/strong&gt; 링크드 리스트의 종류로는 단일 링크드리스트, 이중 링크드리스트, 원형 링크드리스트 등이 존재합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;링크드리스트의 경우 인덱스가 존재하지 않기 때문에 검색 및 수정시 첫 번째 노드부터 순차적으로 모든 노드를 검색해야 합니다. 따라서 링크드리스트의 검색과 수정시 시간 복잡도는 O(1) 입니다.&lt;/li&gt;
  &lt;li&gt;링크드리스트의 경우 노드의 삭제와 삽입시 O(1)만에 해결할 수 있지만, 원하는 위치에 원소를 삽입하거나 삭제하는 경우 위치를 검색하는 시간이 필요하므로 O(n)의 시간이 걸립니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;선형-자료구조와-비선형-자료구조의-차이는-무엇인가요&quot;&gt;선형 자료구조와 비선형 자료구조의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;선형 자료구조는 데이터 요소들이 저장되어 있는 모습을 표현했을 때 직선이고, 비선형 자료구조는 데이터 요소들이 저장되어 있는 모습을 표현했을 때 직선이 아닌 것을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;선형 자료구조의 대표적인 예는 Array, Queue 등이 있고, 비선형 자료구조의 대표적인 예는 Tree, Graph 등이 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stack이란-무엇인가요&quot;&gt;Stack이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Stack이란 선형 자료구조의 일종으로 Last In First Out(LIFO)의 특징을 가지고 있습니다.&lt;/strong&gt; 즉, Stack에 먼저 들어가게 된 원소는 맨 바닥에 깔리게 되고, 가장 늦게 들어간 원소는 그 위에 쌓이고 호출 시 가장 위에 있는 녀석이 호출되는 구조입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LIFO의 특징을 사용하려는 것이 아닌 Stack의 CRUD 시간 복잡도는 계산할 이유가 없는 것 같습니다. Stack 이외에도 CRUD를 위한 더 좋은 자료구조를 사용할 수 있을 것 같네요.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;queue란-무엇인가요&quot;&gt;Queue란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Queue란 선형 자료구조의 일종으로 First In First Out(FIFO)의 특징을 가지는 자료 구조를 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FIFO의 특징을 사용하려는 것이 아닌 Queue의 CRUD 시간 복잡도를 굳이 구해보자면
    &lt;ul&gt;
      &lt;li&gt;삽입
        &lt;ul&gt;
          &lt;li&gt;맨 뒷 부분에 삽입 시 O(1)&lt;/li&gt;
          &lt;li&gt;원하는 위치에 삽입 시 O(n)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;삭제, 수정, 검색
        &lt;ul&gt;
          &lt;li&gt;원하는 노드를 삭제, 수정, 검색할 시 O(n)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tree란-무엇인가요&quot;&gt;Tree란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;트리는 비선형 자료구조로써 node들과 이를 연결하는 edge들로 구성되어 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;트리는 하나의 루트 노드를 갖습니다.&lt;/li&gt;
  &lt;li&gt;트리에는 싸이클이 존재하지 않습니다.&lt;/li&gt;
  &lt;li&gt;순서나 규칙이 없는 트리의 경우 CRUD시 시간 복잡도는 트리의 모든 노드를 탐색해야 하기 때문에 O(n)의 시간이 걸립니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;binary-tree이진-트리란-무엇인가요&quot;&gt;Binary Tree(이진 트리)란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;이진 트리란 각각의 노드가 최대 두 개의 자식 노드를 갖는 트리를 의미합니다.&lt;/strong&gt; 이진 트리의 종류로는 완전 이진 트리, 포화 이진 트리, 정 이진 트리 등이 존재합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;완전 이진 트리(Complete Binary Tree) : 마지막 레벨을 제외하고 모든 레벨이 완전히 채워져 있고 마지막 레벨의 노드가 왼쪽에서 오른쪽으로 채워지는 이진 트리를 의미합니다.&lt;/li&gt;
  &lt;li&gt;정 이진 트리(Full Binary Tree) : 모든 노드가 0개 또는 2개의 자식 노드를 갖는 트리를 의미합니다.&lt;/li&gt;
  &lt;li&gt;포화 이진 트리(Perfect Binary Tree) : 모든 내부(Internal) 노드가 두 개의 자식 노드를 가지며 모든 leaf 노드가 동일한 레벨을 갖는 트리를 의미합니다.&lt;/li&gt;
  &lt;li&gt;노드 간의 규칙이 없는 이진 트리의 경우 CRUD시 시간 복잡도는 트리의 모든 노드를 탐색해야 하기 때문에 O(n)의 시간이 걸립니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;binary-search-tree이진-탐색-트리-bst란-무엇인가요&quot;&gt;Binary Search Tree(이진 탐색 트리, BST)란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;이진 탐색 트리란 서로 중복된 데이터를 갖는 노드가 없다는 가정하에 부모 노드가 왼쪽 자식 노드보다 크고 오른쪽 자식 노드보다는 작다는 규칙을 만족하는 이진 트리를 Binary Search Tree 라고 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이진 탐색 트리에서 CRUD의 시간 복잡도는 O(h) 즉, 높이에 비례합니다.&lt;/li&gt;
  &lt;li&gt;시간 복잡도를 h가 아닌 n으로 표현해 보았을 때 완전 이진 트리의 경우에는 O(log n)으로 표현할 수도 있으나, 편향 트리(Skewed Tree) 즉, 한 쪽으로만 노드가 추가되는 경우 시작 복잡도는 O(n)입니다.&lt;/li&gt;
  &lt;li&gt;이진 탐색 트리가 편향 트리가 되는 문제를 해결하기 위해 서브 트리의 레벨을 비교해서 균형을 맞추는 Rebalancing 기법이 등장 했으며 이러한 기법을 구현한 대표적인 트리는 Red-Black Tree 입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation5-1.png&quot; style=&quot;width:50%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;binary-heap이란-무엇인가요&quot;&gt;Binary Heap이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Binary Heap이란 최대 또는 최소를 빠르게 찾아내기 위해 만들어진 완전이진트리(CBT)로써 부모노드와 자식 노드간에 대소 관계가 성립합니다.&lt;/strong&gt; 이러한 대소 관계를 기반으로 Heap은 Max Heap과 Min Heap으로 나눌 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Heap에 존재하는 노드들의 최대 및 최소를 검색하기 위한 시간 복잡도는 O(1) 입니다.&lt;/li&gt;
  &lt;li&gt;연산 후 heap의 대소 관계 구조를 계속 유지하기 위해서는 제거된 루트 노트를 대체할 다른 노드가 필요합니다. 여기서 heap은 맨 마지막 노드를 루트 노드로 대체시킨 후, 다시 heapify 과정을 거쳐 heap 구조를 유지합니다.&lt;/li&gt;
  &lt;li&gt;heapify 연산을 수행하는데 걸리는 시간 복잡도는 O(log n)이기 때문에 결국 최대 및 최소를 검색하는데 걸리는 시간은 O(log n) 입니다.&lt;/li&gt;
  &lt;li&gt;최대 최소가 아닌 다른 노드들의 CRUD 시간 복잡도는 O(log n) 입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;binary-heap과-binary-search-tree는-각각-어떠한-경우에-사용하는게-좋나요&quot;&gt;Binary Heap과 Binary Search Tree는 각각 어떠한 경우에 사용하는게 좋나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Heap은 최대 및 최소 노드를 연산&lt;code class=&quot;highlighter-rouge&quot;&gt;(O(1), heapify를 포함한다면 O(log n))&lt;/code&gt;하는데 유용하지만, BST는 모든 노드를 연산(O(log n))하는데 유용합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;red-black-tree란-무엇인가요-업데이트&quot;&gt;Red-Black Tree란 무엇인가요? (업데이트)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Red Black Tree(RBT) 란 자가 균형 이진 탐색 트리의 한 종류로써 이진 탐색 트리(BST)의 단점인 편향성을 색깔을 통해서 보완하기 위한 자료구조 입니다.&lt;/strong&gt; 즉, 트리의 노드의 개수가 동일할 경우 depth를 최소화하여 시간 복잡도를 줄이는 것이 핵심 아이디어 입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RBT의 CRUD 시간 복잡도는 O(log n)이다.&lt;/li&gt;
  &lt;li&gt;Root node 부터 leaf node 까지의 모든 경로 중 최소 경로와 최대 경로의 크기 비율은 2보다 크지 않다. (balanced 상태)&lt;/li&gt;
  &lt;li&gt;노드의 child가 없을 경우 child를 가리키는 포인터는 NIL 값을 저장한다. 이러한 NIL 들을 leaf node로 간주한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation5-2.png&quot; style=&quot;width:80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Red-Black Tree의 정의&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;각 노드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Red&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Black&lt;/code&gt; 색깔을 갖는다.&lt;/li&gt;
  &lt;li&gt;Root node의 색깔은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Black&lt;/code&gt;이다.&lt;/li&gt;
  &lt;li&gt;각 leaf node(NIL)의 색깔은 &lt;code class=&quot;highlighter-rouge&quot;&gt;black&lt;/code&gt;이다.&lt;/li&gt;
  &lt;li&gt;어떤 노드의 색깔이 &lt;code class=&quot;highlighter-rouge&quot;&gt;red&lt;/code&gt;라면 두 개의 children의 색깔은 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;black&lt;/code&gt;이다.
    &lt;ul&gt;
      &lt;li&gt;어떤 노드의 색깔이 &lt;code class=&quot;highlighter-rouge&quot;&gt;black&lt;/code&gt;이라면 두 개의 children 의 색깔은 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;red&lt;/code&gt;이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;각 노드에 대해서 노드로부터 그 노드의 자손인 leaf node로 가는 경로들은 모두 같은 수의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Black&lt;/code&gt; 노드를 포함한다. 이를 &lt;strong&gt;Black-Height&lt;/strong&gt; 라고 한다.
    &lt;ul&gt;
      &lt;li&gt;Black-Height : 노드 x 로부터 노드 x 를 포함하지 않는 leaf node 까지의 simple path 상에 있는 black nodes 들의 개수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Red-Black Tree 노드 삽입&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;BST의 특성을 유지하면서 색깔이 &lt;code class=&quot;highlighter-rouge&quot;&gt;red&lt;/code&gt;인 노드를 삽입한다.&lt;/li&gt;
  &lt;li&gt;삽입한 노드가 색깔 규칙에 어긋난다면 노드의 색깔을 조정하고, Black-Height에 위배된다면 rotation을 통해 height를 조정한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Red-Black Tree 노드 삭제&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;BST의 특성을 유지하면서 해당 노드를 삭제한다.&lt;/li&gt;
  &lt;li&gt;지워진 노드의 색깔이 Black 이라면 Black-Height가 1 감소한 경로에 black node가 1개 추가되도록 rotation하고 노드의 색깔을 조정한다.
    &lt;ul&gt;
      &lt;li&gt;지워진 노드의 색깔이 red라면 어떠한 문제도 발생하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;hash-table이란-무엇인가요&quot;&gt;Hash Table이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Hash Table이란 임의의 길이를 가진 키를 고정된 길이의 Hash Code로 변환시켜서 이를 인덱스로 사용하여 데이터를 저장하는 자료구조를 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;hash-function이란-무엇인가요&quot;&gt;Hash Function이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Hash Function이란 임의의 길이를 가진 데이터를 고정된 길이를 가진 고유한 데이터로 변환시키는 함수&lt;/strong&gt;를 의미합니다. 이러한 함수로부터 얻어지는 값을 해시 값, 해시코드 짧게 말해서 해시라고도 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;어설픈 Hash Function을 사용한다면 서로 다른 두 개의 키가 같은 해시 값으로 표현될 수 있는데 이를 &lt;strong&gt;충돌(Collision)&lt;/strong&gt;이라고 합니다.&lt;/li&gt;
  &lt;li&gt;해시는 &lt;strong&gt;등호(=) 연산에만 특화&lt;/strong&gt;되어 있기 때문에 &lt;u&gt;부등호 연산(&amp;gt;, &amp;lt;)이 자주 사용되는 데이터베이스 검색을 위해서는 적절하지 않습니다.&lt;/u&gt; =&amp;gt; 이런 경우 B+ Tree 알고리즘을 자주 사용합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;충돌(Collision)이 많아질수록 Search에 필요한 시간 복잡도가 O(1)에서 O(n)에 가까워집니다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;hash function을 1:1 맵핑으로 만드는 것보다 Collision을 최소화하는 방향으로 설계하고 발생하는 Collision에 대비해 어떻게 대응할 것인가가 중요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hash-collision-resolve-방식에는-어떠한-방법이-존재하나요&quot;&gt;Hash Collision Resolve 방식에는 어떠한 방법이 존재하나요?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Open Address 방식 (개방 주소법)&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;해시 충돌이 발생하면 다른 해시 버킷에 해당 자료를 삽입하는 방식입니다.&lt;/strong&gt; 다른 해시 버킷을 찾기 위해 다양한 방법이 존재하는데 대표적인 방법으로는 순차적으로 비어있는 버킷을 찾을 때까지 계속 탐색하는 Linear Probing 방식이 존재합니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;해시 버킷을 채운 밀도가 높아질수록 Worst Case 발생 빈도가 높아지기 때문에 시간 복잡도가 O(n)에 가까워진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Separate Chaining 방식 (분리 연결법)&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Hash Table의 각 버킷이 여러 값을 저장할 수 있는 자료 구조를 가리키도록 만드는 방법을 의미합니다.&lt;/strong&gt; 이를 구현할 수 있는 방법으로는 LinkedList를 사용하는 방식과 Tree를 사용하는 방식이 존재합니다. Java util 에서는 HashMap을 Separate Chaining 방식을 사용하여 구현하고 있습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Separate Chaining Using LinkedList :&lt;/strong&gt; 각각의 버킷들을 LinkedList로 만들어 충돌(Collision)이 발생하면 해당 bucket의 list에 값을 추가하는 방식이다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Separate Chaining Using Tree :&lt;/strong&gt; 각각의 버킷들을 Tree로 만들어 충돌(Collision)이 발생하면 해당 bucket의 tree에 값을 추가하는 방식입니다.&lt;/li&gt;
      &lt;li&gt;Tree는 LinkedList에 비해 메모리 사용량이 많기 때문에 데이터 개수가 적을 때는 링크드리스트를 사용하는게 유리하지만, 개수가 많을 경우 Tree의 시간 복잡도가 LinkedList보다 빠르기 때문에 Tree를 사용하는게 더 유리하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;graph란-무엇인가요&quot;&gt;Graph란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Graph란 Node들과 이를 연결하는 Edge들을 모아 놓은 자료구조입니다.&lt;/strong&gt; 방향 및 비방향 그래프가 모두 존재하며, 사이클 및 self-loop가 존재해도 무방합니다. 그래프는 인접 행렬과 인접 리스트로 구현할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;graph-탐색에는-어떠한-방법이-존재하나요&quot;&gt;Graph 탐색에는 어떠한 방법이 존재하나요?&lt;/h3&gt;

&lt;p&gt;그래프는 따로 규칙이 존재하지 않기 때문에 모든 정점을 탐색해야만 합니다. &lt;strong&gt;특정 정점을 기준으로 넓게 탐색하기 전에 깊게 탐색하는 방법인 DFS(Depth First Search)와 깊게 탐색하기 전에 넓게 탐색하는 방법인 BFS(Breadth First Search)가 존재합니다&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DFS는 Stack 및 재귀를 사용해서 구현하면 쉽구요, BFS는 Queue를 사용해서 구현하면 쉽습니다.&lt;/li&gt;
  &lt;li&gt;DFS와 BFS를 인접리스트로 구현할 경우에 시간 복잡도는 O(V+E) 이구요, 인접 행렬로써 구현할 경우에 시간복잡도는 O(V^2) 입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;minimum-spanning-tree&quot;&gt;Minimum Spanning Tree&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Minimum Spanning Tree란 그래프의 여러 Spanning Tree 중 edge의 가중치 합이 최소인 Spanning tree를 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spanning Tree란 그래프의 모든 정점이 Cycle 없이 연결된 형태를 의미합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;minimum-spanning-tree를-구하는-알고리즘에는-어떤-방법이-존재하나요&quot;&gt;Minimum Spanning Tree를 구하는 알고리즘에는 어떤 방법이 존재하나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Minimum Spanning Tree를 구하는 알고리즘에는 Edge 값이 가장 작은 것부터 탐색하는 탐욕적인 방법으로 대표적으로 Kruskal Algorithm과 Prim Algorithm이 존재합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Kruskal Algorithm&lt;/strong&gt;이란 Edge없이 vertex로만 구성된 그래프를 만들어서 weight가 제일 작은 edge 부터 검토후 cycle이 생기지 않는 경우에만 edge를 추가하는 방법을 의미하구요 시간 복잡도는 O(ElogE) 입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Prim Algorithm&lt;/strong&gt;이란 한 개의 vertex로 구성된 그래프 A를 만들어서 그래프 A 내부에 있는 vertex와 외부에 있는 vertex 사이의 edge를 연결했을 때 가장 작은 weight를 가진 vertex와 edge를 그래프 A에 추가하는 방법을 의미하구요 시간 복잡도는 O(ElogV)입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;java&quot;&gt;Java&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;java-8의-특징은-무엇인가요&quot;&gt;Java 8의 특징은 무엇인가요??&lt;/h3&gt;

&lt;p&gt;Java 8의 주요 특징으로는 자바에 &lt;strong&gt;함수형 프로그래밍이&lt;/strong&gt; 처음으로 도입되었다는 것입니다. 새롭게 도입된 기능으로는 &lt;strong&gt;Stream API, Lambda Expression, Method Reference, Optional Class, Functional Interface, Default Methods&lt;/strong&gt; 등이 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;java-9의-특징은-무엇인가요&quot;&gt;Java 9의 특징은 무엇인가요??&lt;/h3&gt;

&lt;p&gt;Java 9의 주요 특징으로는 &lt;strong&gt;모듈화&lt;/strong&gt;가 도입되었다는 것입니다. &lt;strong&gt;Package와 여러 데이터 자원을 포함하는 Module을 런타임시에 가져옴으로써 더 잘 구조화된 어플리케이션을 작성할 수 있게 되었고 성능을 향상시킬 수 있게 되었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;java-10의-특징은-무엇인가요&quot;&gt;Java 10의 특징은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;Java 10의 주요 특징으로는 &lt;strong&gt;Local Variable Type Inference&lt;/strong&gt;가 도입되었다는 것입니다. &lt;strong&gt;자바는 기존의 엄격한 타입 선언 방식에서 탈피하여 컴파일러에게 타입을 추론할 수 있게끔 해 개발자가 직접 지역 변수 타입을 작성하는 것을 없애 생산성을 증가시킬 수 있게 되었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;java-11의-특징은-무엇인가요&quot;&gt;Java 11의 특징은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;Java 11의 주요 특징으로는 &lt;strong&gt;새로운 HTTP 클라이언트인 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClient&lt;/code&gt;&lt;/strong&gt;가 등장했다는 것입니다. &lt;strong&gt;해당 라이브러리를 사용해서 개발자는 어플리케이션의 많고 복잡한 요구사항들을 처리할 수 있게 되었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;stream-api란-무엇인가요&quot;&gt;Stream API란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Stream API란 자바에서의 일련의 데이터 요소인 배열이나 컬렌션 등을 처리하기 위해 함수형 스타일을 지원해주는 API 입니다.&lt;/strong&gt; Stream API를 사용하면 멀티 스레드를 활용해서 병렬로 연산을 수행할 수 있고, 내부 반복으로 연산을 수행하기 때문에 코드가 매우 간단해집니다.&lt;/p&gt;

&lt;h3 id=&quot;functional-interface란-무엇인가요&quot;&gt;Functional Interface란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Functional Interface란 정확히 하나의 추상 메서드가 정의된 인터페이스를 의미합니다.&lt;/strong&gt; 함수형 인터페이스의 예로는 Predicate, Comparator, Runnable 인터페이스 등이 존재합니다.&lt;/p&gt;

&lt;h3 id=&quot;lamda-expression이란-무엇인가요&quot;&gt;Lamda Expression이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Lamda Expression이란 Functional Interface를 구현하는 객체를 만들지 않고도 추상 메서드를 구현해서 해당 인터페이스 사용할 수 있는 표현식을 의미합니다.&lt;/strong&gt; 특정 인터페이스를 사용하기 위해 일회용 객체를 만들지 않아도 됨으로 성능면에서 좋다고 생각합니다.&lt;/p&gt;

&lt;h3 id=&quot;method-reference란-무엇인가요&quot;&gt;Method Reference란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;Method Reference는 기존에 정의된 메서드와 동일한 람다 표현식을 매번 작성하는데 발생하는 불편함에서 나온 기법이며 &lt;strong&gt;람다 표현식을 직접 작성하는 대신에 기존의 메서드 정의를 이용하는 방법&lt;/strong&gt;입니다. 이를 통해 개발자는 중복된 코드를 없앨 수 있으며 자연스레 생산성과 가독성 증가 효과를 얻을 수 있다고 생각합니다.&lt;/p&gt;

&lt;h3 id=&quot;optional-클래스는-무엇인가요&quot;&gt;Optional 클래스는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;Optional 클래스는 Java 8에서 새롭게 등장한 클래스이구요 &lt;strong&gt;util 패키지&lt;/strong&gt;에 속해 있습니다. &lt;strong&gt;Optional 클래스는 자바 프로그래머들이 가장 자주 접하는 예외인 NPE(NullPointerException)를 관리 하기 위해 기존 객체를 감싼 Wrapper Class 입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;default-method는-무엇인가요&quot;&gt;Default Method는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Default Method는 인터페이스에서 메서드 정의 뿐만 아니라 구현도 포함하는 메서드를 만들기 위해 사용되어집니다.&lt;/strong&gt; 해당 인터페이스를 구현하는 클래스는 인터페이스의 Default Method도 상속받기 때문에 최소한의 추상 메서드만 구현하면 됩니다. &lt;strong&gt;즉, 디폴트 메서드를 통해 인터페이스는 서브 클래스가 구현해야하는 최소한의 인터페이스 스펙을 유지할 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;추상클래스와-인터페이스의-차이는-무엇인가요&quot;&gt;추상클래스와 인터페이스의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;추상 클래스는 추상화된 클래스를 의미하고 인터페이스는 클래스에서 구현해야 하는 스펙을 의미합니다. 이러한 이유에서 추상 클래스와 인터페이스의 가장 큰 차이는 &lt;strong&gt;사용법&lt;/strong&gt;에서 존재한다고 생각합니다. &lt;strong&gt;추상 클래스는 멤버 변수와, 메소드 명세, 구현 등 모든 부분이 상속 되기 때문에 코드의 재사용을 위해서 사용하는 경우가 많고 인터페이스는 Java 8 이전에는 메서드 명세만 상속되었기 때문에 메소드 명세의 상속을 위해서 사용된다고 생각합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;또한 단일 상속만을 지원하는 자바의 특성상 클래스를 상속하는 추상화 계층이 많아질수록 상속되는 클래스간에 결합도가 증가하기 때문에 관련 도메인에 잘 맞추어서 인터페이스와 추상클래스를 적절히 사용해야 한다고 생각합니다.&lt;/p&gt;

&lt;h3 id=&quot;오버라이딩overriding과-오버로딩overloading은-각각-무엇인가요&quot;&gt;오버라이딩(Overriding)과 오버로딩(Overloading)은 각각 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;오버라이딩이란 서브클래스가 상속받은 메서드를 해당 클래스에 맞게 재구현 하는 것을 의미&lt;/strong&gt;하구요 &lt;strong&gt;오버로딩이란 동일한 메서드 이름이지만 매개 변수 타입이나 개수가 다른 즉, 다른 명세를 가진 함수를 같은 클래스내에 만드는 것을 의미&lt;/strong&gt;합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;리턴 타입이 다른 경우는 오버로딩이 아닙니다. 컴파일러는 메서드 시그니처를 통해서 메서드 간의 차이를 식별합니다. 메서드 시그니처가 동일한 경우 리턴 타입이 달라도 컴파일 에러가 발생합니다. (같은 클래스에 동일한 메서드가 존재할 수 없기 때문)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;메서드-시그니처method-signature&quot;&gt;&lt;strong&gt;메서드 시그니처(Method Signature)&lt;/strong&gt;&lt;/h3&gt;

  &lt;p&gt;&lt;strong&gt;Java에서 메서드 시그니처란 메서드 정의에서 메서드 이름과 매개변수 리스트의 조합을 말한다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;업캐스팅up-casting과-다운캐스팅down-casting이란-무엇인가요&quot;&gt;업캐스팅(Up Casting)과 다운캐스팅(Down Casting)이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;업캐스팅이란 슈퍼 클래스의 변수에 서브 클래스의 인스턴스가 들어가는 것&lt;/strong&gt;을 의미하구요, &lt;strong&gt;다운캐스팅이란 업캐스팅 된 변수의 타입을 서브 클래스 타입으로 변경하는 것&lt;/strong&gt;을 의미합니다. &lt;u&gt;서브 클래스는 슈퍼 클래스의 명세를 상속받기 때문에 슈퍼 클래스의 변수에 들어가서 슈퍼 클래스 인스턴스인 것처럼 사용될 수 있는 것은 당연하구요, 업캐스팅 된 변수의 타입이 다시 서브 클래스로 돌아와서 다시 본인의 클래스 변수인 것처럼 사용될 수 있는 것도 당연합니다.&lt;/u&gt;&lt;/p&gt;

&lt;h3 id=&quot;제네릭generic이란-무엇인가요&quot;&gt;제네릭(Generic)이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;제네릭(Generic)이란 컴파일 타임에 강한 타입체크와 불필요한 캐스팅 코드를 삭제하기 위해서 사용하는 기능입니다.&lt;/strong&gt; 제네릭 사용을 통해서 클래스나 메소드 내부에서 사용되는 객체의 타입 안정성을 높일 수 있었고 매번 Object나 bounded type으로 캐스팅 시 발생하는 반복적인 코드를 없앨 수 있었습니다.&lt;/p&gt;

&lt;h3 id=&quot;제네릭generic을-사용해-보셨나요&quot;&gt;제네릭(Generic)을 사용해 보셨나요?&lt;/h3&gt;

&lt;p&gt;많은 프레임워크와 라이브러리에서 제네릭을 사용해 보았지만 Pinpoint Webhook 프로젝트에서 제네릭을 사용했던 경험이 가장 기억에 남습니다. &lt;strong&gt;상위 추상 클래스인 AgentChecker가 검색하는 Metric 타입을 제네릭 타입으로 지정해 놓고 이를 상속하는 서브 타입의 Checker에서 제네릭 타입을 설정해 구현한 경험이 생각 납니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이를 통해서 특정 Metric을 검색하는 Checker클래스를 여러개 만들 필요가 없었고, 컴파일 시에 타입 에러를 볼 수 있어서 확실한 장점이 있었지만, 처음 코드를 보는 사람들한테는 어려워서 가독성 측면에서는 좋지 않았던 것 같습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;string과-stringbuffer-stringbuilder의-차이를-설명해주세요&quot;&gt;String과 StringBuffer, StringBuilder의 차이를 설명해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;String과 StringBuffer, StringBuilder는 모두 문자열을 다룰 수 있는 java.lang 패키지의 클래스입니다. 하지만 String은 불변 객체이구요, StringBuffer와 StringBuilder는 가변 객체 입니다. StringBuffer는 멀티스레드 환경에서 thread-safe하게 동작할 수 있는 동기화 기능을 지원해주구요, StringBuilder는 동기화 기능을 지원해주지 않아서 멀티스레드 환경에서 thread-safe하지 않습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;불변-객체immutable-object&quot;&gt;불변 객체(Immutable Object)&lt;/h3&gt;

  &lt;p&gt;불변 객체란 객체 생성 후에 그 상태나 값을 바꿀 수 없는 객체를 말합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;annotation이란-무엇인가요&quot;&gt;Annotation이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;애노테이션(Annotation)이란 Java 버젼 5부터 추가된 기능으로 소스코드에 메타데이터 정보를 추가하기 위해 사용되어집니다. 애노테이션은 컴파일 타임에 컴파일러에게 특정 정보를 제공해 주기 위해 사용되어지거나, 런타임에 JVM에게 특정 정보를 제공해 주기 위해서 사용되어집니다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;메타데이터metadata&quot;&gt;메타데이터(Metadata)&lt;/h3&gt;

  &lt;p&gt;데이터에 관한 구조화된 데이터로, 다른 데이터를 설명해 주는 데이터이다. 대량의 정보 가운데에서 찾고 있는 정보를 효율적으로 찾아내서 이용하기 위해 일정한 규칙에 따라 콘텐츠에 대하여 부여되는 데이터이다. 어떤 데이터 즉 구조화된 정보를 분석, 분류하고 부가적 정보를 추가하기 위해 그 데이터 뒤에 함께 따라가는 정보를 말한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;java-collection-framework에-대해서-설명해주세요&quot;&gt;Java Collection Framework에 대해서 설명해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;자바에서 Collection이란 데이터의 집합과 그룹을 의미하며 이를 저장하고 연산할 수 있는 집합을 Collection Framework라고 합니다.&lt;/strong&gt; Collection 프레임워크는 크게 두개의 명세로 나눌 수 있는데요 &lt;strong&gt;순서나 집합적인 저장 공간의 명세를 나타내는 Collection 인터페이스와 키와 값으로 데이터를 핸들링하는 명세를 정의하는 Map 인터페이스로 나눌 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Set, List, Queue 인터페이스가 Collection 인터페이스를 상속해서 각 특성에 맞게 명세를 구체화하구요, HashMap, TreeMap 등이 Map 인터페이스를 구현해서 컬렉션 프레임워크를 형성합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation5-3.jpg&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;set-list-queue의-차이를-설명해주실-수-있나요&quot;&gt;Set, List, Queue의 차이를 설명해주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;List 인터페이스는 객체의 순서가 존재하며 원소가 중복될 수 있는 명세&lt;/strong&gt;를 가지고 있습니다. List 인터페이스의 대표적인 구현체로는 ArrayList(동기화 보장 x)가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Queue 인터페이스는 FIFO의 특성을 갖고 있으며 원소가 중복될 수 있는 명세&lt;/strong&gt;를 가지고 있습니다. Queue 인터페이스의 대표적인 구현체로는 LinkedList가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set 인터페이스는 원소의 집합을 의미하며 원소의 순서가 없고 동일한 원소를 중복 저장할 수 없는 명세&lt;/strong&gt;를 가지고 있습니다. Set 인터페이스의 대표적인 구현체로는 HashSet, TreeSet 등이 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;linkedlist와-arraylist의-차이는-무엇인가요&quot;&gt;LinkedList와 ArrayList의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ArrayList는 내부적으로 원소를 배열에서 관리하고, LinkedList는 노드에 데이터를 저장하고 포인터를 사용해서 앞 뒤의 노드와 연결지어 데이터를 관리합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;삽입 및 삭제시 LinkedList는 O(1)의 시간이 걸리고, ArrayList는 O(n)의 시간이 걸립니다. 하지만 인덱스를 통해서 검색시 ArrayList는 O(1)의 시간이 걸리고 LinkedList는 O(n)의 시간이 걸립니다. 인덱스를 통해서 데이터를 관리하고 싶은 경우 ArrayList를 사용하면 좋을 것 같구요, 그렇지 않다면 LinkedList를 사용하면 좋을것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;hashmap은-무엇인가요&quot;&gt;HashMap은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HashMap은 Hash Function을 사용해서 Key를 Hash값으로 바꾼 뒤 이를 사용해서 데이터를 관리 및 연산하는 데이터 구조를 의미합니다.&lt;/strong&gt; HashMap의 CRUD 시간 복잡도는 O(1)이지만, 충돌(Collision)이 자주나는 경우 시간 복잡도는 O(n)까지 안좋아질 수 있음으로 Open Address나 Separate Chaining 방식을 고려해야 합니다.&lt;/p&gt;

&lt;h3 id=&quot;hashmap과-hashtable의-차이를-아시나요&quot;&gt;HashMap과 HashTable의 차이를 아시나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HashTable은 동기화 기능을 제공해주기 때문에 멀티 스레드 환경에서 Thread-Safe하고, HashMap은 동기화 기능을 제공해주지 않기 때문에 멀티 스레드 환경에서 Non Thread-Safe 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;arraylist와-vector의-차이는-무엇인가요&quot;&gt;ArrayList와 Vector의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;ArrayList와 Vector의 차이는 &lt;strong&gt;동기화 기능 제공의 유무&lt;/strong&gt;라고 생각합니다. &lt;strong&gt;Vector는 동기화 기능을 제공해주기 때문에 멀티 스레드 환경에서 Thread-Safe하고, ArrayList는 동기화 기능을 제공해주지 않기 때문에 멀티 스레드 환경에서 Non Thread-Safe 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;treemap과-treeset의-차이는-무엇인가요&quot;&gt;TreeMap과 TreeSet의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;TreeSet과 TreeMap은 모두 Red Black Tree를 기반으로하는 자료구조입니다.&lt;/strong&gt; 가장 큰 차이라고 하면 Set과 Map의 차이입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;red-black-tree&quot;&gt;Red Black Tree&lt;/h3&gt;

  &lt;p&gt;Red Black Tree는 Balanced Binary Search Tree의 일종으로써 BST에서 발생하는 편향성 문제를 색깔을 통해서 자체적으로 해결하는 자료구조입니다.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Wed, 03 Mar 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2021/03/03/NAVER-Practical-Interview-Preparation-5.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2021/03/03/NAVER-Practical-Interview-Preparation-5.html</guid>
        
        <category>Data-Structre</category>
        
        <category>LinkedList</category>
        
        <category>Array</category>
        
        <category>Queue</category>
        
        <category>Map</category>
        
        <category>Set</category>
        
        <category>Java</category>
        
        <category>Abstract</category>
        
        <category>Interface</category>
        
        <category>Generic</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[실무 면접 준비 - 4] 객체지향 &amp; JVM (OOP &amp; JVM)</title>
        <description>&lt;hr /&gt;

&lt;h2 id=&quot;object-oriented-programmingoop&quot;&gt;Object Oriented Programming(OOP)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;좋은-코드란-무엇인가요&quot;&gt;좋은 코드란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;코드란 특정 문제를 해결하기 위해 작성하는 것이라고 생각합니다. 이러한 문제들은 요구사항으로 표현할 수 있기 때문에 &lt;strong&gt;좋은 코드란 현재의 요구사항을 만족하면서 불확실한 미래의 요구사항까지 유연하게 대처할 수 있는 코드&lt;/strong&gt;를 좋은 코드라고 생각합니다.&lt;/p&gt;

&lt;h3 id=&quot;좋은-코드를-작성하기-위해서는-무엇이-가장-중요하나요&quot;&gt;좋은 코드를 작성하기 위해서는 무엇이 가장 중요하나요?&lt;/h3&gt;

&lt;p&gt;좋은 코드를 작성하기 위해서는 &lt;strong&gt;도메인에 대한 깊은 이해&lt;/strong&gt;가 가장 중요하다고 생각합니다. 도메인에 대한 깊은 이해 없이 작성된 코드는 일단 현재의 요구사항은 만족할지 몰라도 &lt;strong&gt;도메인의 특성들이 코드에 잘 녹여져 있지 않기 때문에 조그마한 요구사항에도 코드의 큰 변화가 필요하게 됩니다.&lt;/strong&gt; 이러한 큰 변화들은 자연스레 버그를 유발하게 되구요 결국 좋지 못한 코드가 됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;비즈니스 요구사항은 도메인으로부터 발생합니다. 만약 코드가 도메인의 특성이 잘 반영하지 않는다면 도메인으로부터 발생한 조그마한 요구사항에도 코드는 큰 변경을 요구할 것이며 이는 자연스레 많은 버그를 유발하게 됩니다. 이러한 버그들은 개발자들에게 부담으로 다가와서 변경에 소극적이게 되고 자연스레 기획자의 다양한 요구사항들을 받아들이지 못하게 됩니다.&lt;/p&gt;

  &lt;p&gt;서비스를 운영하면서 수 많은 요구사항이 발생하는데 기획자가 이를 파악해서 개발자에게 요구사항을 전달함에도 불구하고 개발자가 이러한 요구사항을 시스템에 반영하지 못하는 코드 구조라… &lt;strong&gt;너무 슬프다고 생각합니다. 저는 이러한 시스템을 구성하는 개발자는 되고 싶지 않습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;객체-지향-프로그래밍이란-무엇인가요&quot;&gt;객체 지향 프로그래밍이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;객체 지향 프로그래밍이란 데이터와 프로시저를 각각 따로 관리하는 것이 아닌 객체에 위치시켜서 객체 간의 협력을 통해서 시스템을 구성하는 프로그래밍 방식입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;절차-지향-프로그래밍이란-무엇인가요&quot;&gt;절차 지향 프로그래밍이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;절차지향 프로그래밍이란 순차적인 처리를 중요시하여 시스템을 구성하는 프로그래밍 방식입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;객체-지향과-절차-지향-프로그래밍의-장단점은-무엇이고-언제-사용해야-할까요&quot;&gt;객체 지향과 절차 지향 프로그래밍의 장단점은 무엇이고 언제 사용해야 할까요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;객체 지향 프로그래밍의 장점으로는 코드의 재사용성이 높아지고 유지보수가 쉬워진다는 장점이 있으며 단점으로는 객체 생성 및 참조 시에 발생하는 오버헤드 때문에 절차지향에 비해 상대적으로 느리다는 단점이 존재합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;절차 지향 프로그래밍의 장점으로는 불필요한 오버헤드를 줄여 속도가 빠르다는 장점이 있으며 단점으로는 코드의 재사용성과 유지보수성이 객체지향 비해 떨어진다는 단점이 존재합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;객체 지향의 경우 요구사항이 자주 발생하거나 변경되는 Web이나 Mobile App 같은 서비스 개발하면서 객체 지향을 사용하면 좋을 것 같구요, 절차 지향의 경우 요구사항 변경보다는 성능에 중점을 두고 싶은 일괄 처리와 같은 시스템에서 절차 지향을 사용하면 좋을것 같습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;오버헤드(overhead)&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;오버헤드란 어떤 처리를 하기 위해 들어가는 &lt;u&gt;간접적인 처리 시간, 메모리&lt;/u&gt; 등을 말합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;객체-지향의-3대-특징에-대해서-설명해주세요&quot;&gt;객체 지향의 3대 특징에 대해서 설명해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;캡슐화란 객체의 속성과 행위를 하나로 묶어서 세부 구현은 내부로 감추고 최소한의 인터페이스만 객체 외부로 노출시키는 것을 의미합니다.&lt;/strong&gt; 이를 통해 자율적인 객체를 만들 수 있으며 다른 객체와 불필요하게 결합될 필요가 없어서 자연스레 시스템의 결합도는 떨어지고 응집도는 올라가게 됩니다. 이의 결과로서 시스템은 유지보수하기 쉬워지고 추후 변경에 유연하게 대처할 수 있게되는 효과를 가져옵니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;상속이란 자식이 부모의 특징을 물려받는 것을 의미하구요, 자바에서는 인터페이스 상속과 클래스 상속으로 나뉩니다.&lt;/strong&gt; 이를 통해 모듈 즉, 클래스의 재사용성이 높아지고 다형성을 구현할 수 있게 되어집니다. 하지만 무분별한 상속 자체는 모듈간의 결합도를 올리기 때문에 무분별하게 남용할 시 추후 변경에 유연하게 대응하지 못하는 시스템 구조를 가질 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;다형성이란 같은 요청으로부터 응답이 객체의 타입에 따라 다르게 나타나는 것을 의미합니다.&lt;/strong&gt; 이를 통해 객체지향은 더 유연한 설계를 가질 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;객체object와-클래스class의-차이는-무엇인가요&quot;&gt;객체(Object)와 클래스(Class)의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;클래스는 시스템의 정적인(static) 구성요소를 나타내는 것이구요, 객체는 클래스의 인스턴스로써 시스템의 동적인(dynamic) 구성 요소를 나타냅니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;추상화abstraction란-무엇인가요&quot;&gt;추상화(Abstraction)란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;추상화란 특정 개념이나 개체를 보았을 때 특정 관점에서 관심있거나 중요한 부분을 강조하거나 추려내는 작업을 의미합니다.&lt;/strong&gt;  즉, 중요한 정보만 객체의 인터페이스로써 표시하고 세부 구현 정보는 객체의 내부로 숨겨서 객체 지향 프로그래밍을 하기 위한 매우 중요한 개념입니다.&lt;/p&gt;

&lt;h3 id=&quot;객체-지향-설계-5원칙은-각각-무엇이며-우리는-이를-통해-무엇을-얻고-싶은-걸까요&quot;&gt;객체 지향 설계 5원칙은 각각 무엇이며 우리는 이를 통해 무엇을 얻고 싶은 걸까요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;객체 지향 설계 5 원칙은 원칙들의 앞글자만 따서 SOLID 원칙이라고도 불리는데요, 시스템의 결합도를 낮추고 응집도를 높이는 고전적인 시스템 설계 원칙을 객체 지향 관점에서 5가지의 원칙으로 재정립한 것입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;단일 책임 원칙(Single Reponsibility Principle, SRP) :&lt;/strong&gt; 한 클래스는 하나의 책임만 가지며 클래스는 그 책임을 완전히 캡슐화해야 한다는 원칙입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;개방 폐쇄 원칙(Open Closed Principle, OCP) :&lt;/strong&gt; 소프트웨어 요소(메서드, 클래스, 모듈)는 확장에 대해서는 열려 있어야 하고 수정(변경)에 대해서는 닫혀 있어야 한다는 원칙입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;리스코프 치환 원칙(Liskov Substitution Principle, LSP) :&lt;/strong&gt; 서브 클래스의 인스턴스는 슈퍼 클래스의 인스턴스로 치환할 수 있어야 한다는 원칙입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;인터페이스 분리 원칙(Interface Separation Principle, ISP) :&lt;/strong&gt; 클라이언트는 자신이 이용하지 않는 메서드에 의존하지 않아야 한다는 원칙입니다.
    &lt;ul&gt;
      &lt;li&gt;큰 덩어리의 인터페이스들을 구체적이고 작은 단위들로 분리 시킴으로써 시스템의 결합도를 낮추고 응집도를 높인다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;의존 역전 원칙(Dependency Inversion Principle, DIP) :&lt;/strong&gt; 특정 소프트웨어 요소를 개발하면서 자신보다 변하기 쉬운것에 의존하지 말라는 원칙입니다. 즉, 보다 추상적인 것에 의존하라는 원칙입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;디자인-패턴이란-무엇인가요&quot;&gt;디자인 패턴이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;소프트웨어를 설계할 때 특정 문맥에서 자주 발생하는 문제들을 해결할 수 있는 재사용 가능한 Best Practice 설계 패턴을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;singleton-패턴은-무엇이고-언제-사용되며-어떻게-구현하나요&quot;&gt;Singleton 패턴은 무엇이고 언제 사용되며 어떻게 구현하나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Singleton 패턴이란 시스템에서 인스턴스가 오직 1개만 생성되어야 하는 경우에 사용되는 패턴을 의미합니다.&lt;/strong&gt; 시스템에서 동일한 커넥션 객체를 만든다던지, 하나만 사용되어야하는 객체를 만들 때 매우 유용합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Eager Initialization&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jupiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;singletonTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singletonA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Lazy Initialization&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jupiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;singletonTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singletonA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;factory-method-패턴은-무엇이고-언제-사용되며-어떻게-구현하나요&quot;&gt;Factory Method 패턴은 무엇이고 언제 사용되며 어떻게 구현하나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;부모 클래스로부터 객체를 생성하는 부분을 서브 클래스에 위임하여 다형성을 통해 클래스간의 결합도를 낮추기 위한 디자인 패턴을 의미합니다.&lt;/strong&gt; 팩토리 메서드 패턴을 사용함으로써 객체 생성시 발생하는 요구사항들에 유연하게 대처할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jupiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FactoryMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factoryMethodTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Factory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factoryA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Factory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factoryB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EnumFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factoryA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;APPLE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;factoryB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;APPLE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    
    
        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factoryA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GRAPE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;factoryB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GRAPE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fruit&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringFactory&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Fruit&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Fruit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;APPLE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GRAPE&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Grape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MELON&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Melon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EnumFactory&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Fruit&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Fruit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;FruitCategory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fruitCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FruitCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fruitCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FruitCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fruitCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FruitCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GRAPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Grape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fruitCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FruitCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MELON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Melon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FruitCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;APPLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GRAPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MELON&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fruit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apple&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fruit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Grape&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fruit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Melon&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fruit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;adapater-패턴은-무엇이고-언제-사용되며-어떻게-구현하나요&quot;&gt;Adapater 패턴은 무엇이고 언제 사용되며 어떻게 구현하나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;어댑터 패턴(Adapter pattern)은 클래스의 인터페이스를 사용자가 기대하는 다른 인터페이스로 변환하는 패턴으로 서로 호환성이 없는 인터페이스 때문에 함께 동작할 수 없는 클래스들이 작동하도록 해줍니다.&lt;/strong&gt; 대표적으로 JDBC가 어댑터 패턴을 활용하여 시스템을 단일한 인터페이스로 조작할 수 있게끔 해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runServiceA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ServiceA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runServiceB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ServiceB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AdapterService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AdapterServiceA&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AdapterService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ServiceA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sa1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sa1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runServiceA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AdapterServiceB&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AdapterService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ServiceB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sb1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runServiceB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClientWithAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;AdapterService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asa1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AdapterServiceA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;AdapterService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asb1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AdapterServiceB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;asa1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;asb1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;template-method-패턴은-무엇이고-언제-사용되며-어떻게-구현하나요&quot;&gt;Template Method 패턴은 무엇이고 언제 사용되며 어떻게 구현하나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;템플릿 메서드 패턴(Template Method Pattern)이란 알고리즘의 구조를 바꾸지 않고 서브클래스에서 알고리즘의 특정 단계를 재정의하는 것을 의미합니다.&lt;/strong&gt; 즉, 상속을 통해 슈퍼클래스의 기능을 확장할 때 사용하는 가장 대표적인 방법이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Business&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;======================&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printBusinessName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;======================&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printBusinessName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Business&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printBusinessName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;카페&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HairShop&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Business&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printBusinessName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;헤어샵&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TemplateMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cafe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;HairShop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hairShop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HairShop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cafe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hairShop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;strategy-패턴은-무엇이고-언제-사용되며-어떻게-구현하나요&quot;&gt;Strategy 패턴은 무엇이고 언제 사용되며 어떻게 구현하나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;전략 패턴(Strategy Pattern)이란 전략 객체를 통해서 알고리즘의 구조를 바꿀 수 있는 디자인 패턴을 의미합니다.&lt;/strong&gt; 전략 객체를 위한 인터페이스를 정의하고 알고리즘의 구조를 바꾸고 싶은 경우 직접 로직을 수정하지 않고 전략 객체를 바꿔줌으로써 시스템의 결합도를 낮출 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Java Util의 PriorityQueue가 전략 패턴을 사용하는 대표적인 예이며 Comparator 인터페이스가 전략 객체로써 사용됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StrategyTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;strategyTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Strategy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Solider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rambo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    
        &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StrategyGun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rambo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    
        &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StrategySword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rambo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runStrategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StrategyGun&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runStrategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;탕, 타당, 타다당&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StrategySword&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runStrategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;챙.. 채쟁챙 챙챙&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Strategy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;전투 시작&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runStrategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;전투 종료&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;proxy-패턴과-decorator패턴은-각각-무엇이고-언제-사용되며-어떻게-구현하나요&quot;&gt;Proxy 패턴과 Decorator패턴은 각각 무엇이고 언제 사용되며 어떻게 구현하나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Proxy와 Decorator 패턴 모두 Target Object와 동일한 인터페이스를 가진 객체를 이용해서 다양한 행위를 추가하기 위한 의도가 존재합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decorator 패턴은 기존 타겟 객체의 기능에 책임을 추가시키는 것을 의미합니다.&lt;/strong&gt; 예로 들어 어떤 메소드의 시작이나 끝에 &lt;u&gt;로깅이나 트랜잭션을 추가&lt;/u&gt;해주는 것을 Decorator 패턴이 적용된 예시라고 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.webhook.receiver.slack.test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Develop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Plan&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Develop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;기획&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Design&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Develop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Develop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;develop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Design&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Develop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;develop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;develop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;develop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;develop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;설계&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Implement&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Develop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Develop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;develop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Implement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Develop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;develop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;develop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;develop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;develop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;개발&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Decorator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decoratorTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Develop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Plan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Develop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;design&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Design&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Develop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Implement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;design&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;implement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Proxy 패턴은 기존 타겟 객체의 기능에 특정 책임을 추가시키는 것이 아니라, 이러한 기능들을 다양한 방식으로 제어 해주는 즉, 접근에 대한 제어가 목적인 패턴을 의미합니다.&lt;/strong&gt; 예로 들어 &lt;u&gt;메소드의 실행을 remote host로 보낸다든지, lazy Initialization 한다든지, 캐쉬된 데이터를 사용하는 등의 작업&lt;/u&gt;들을 Proxy 패턴이 적용된 예시라고 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Americano&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;아메리카노 맛있어~&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CoffeeProxy&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CoffeeProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;coffee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 호출에 대한 흐름 제어가 주목적!!!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proxyTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CoffeeProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Americano&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;연관association-vs-합성composition-vs-집합aggregation의-차이는-무엇인가요&quot;&gt;연관(Association) vs 합성(Composition) vs 집합(Aggregation)의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;두 객체 간의 관계가 존재할 때 이를 연관(Association)이라고 부릅니다.&lt;/strong&gt;  연관(Association)은 합성(Composition)과 집합(Aggregation)으로 나눌 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Engine 객체가 Car 객체의 일부분 일 때 이 둘의 관계는 Composition 이라고 합니다.&lt;/strong&gt; 즉, Car 객체가 죽으면 Engine 객체도 죽습니다. (Engine 객체가 Car 객체 내부에서 생성) &lt;strong&gt;(Part of 관계)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
       
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Organization 객체가 Person 객체들을 가지고 있을 때 이 둘의 관계는 Aggregation 이라고 합니다.&lt;/strong&gt; 즉, Organization 객체가 죽어도 Person 객체는 죽지 않습니다. (Person 객체가 Organization 객체 외부에서 독립적으로 생성) &lt;strong&gt;(has A 관계)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Organization&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;java-virtual-machine-jvm&quot;&gt;Java Virtual Machine (JVM)&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;jvm-아키텍처&quot;&gt;JVM 아키텍처&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation4-1.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;java와-class파일의-차이는-무엇이고-어떻게-동작하나요&quot;&gt;java와 class파일의 차이는 무엇이고 어떻게 동작하나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;응용 프로그래머는 자바 파일(.java)을 작성하고 컴파일러가 이를 바이트 코드 파일(.class)로 변경시켜 Class Loader에 의해 JVM 메모리에 로드됩니다.&lt;/strong&gt; 즉, java 파일은 프로그래머가 작성하는 파일이고, class 파일은 컴파일러에 의해서 java 파일이 바이트 코드로 변경된 파일입니다. JVM은 클래스 로더를 사용해서 클래스 파일을 JVM 메모리 즉, Runtime Data Area에 올려놓습니다.&lt;/p&gt;

&lt;h3 id=&quot;자바는-어떠한-linking-알고리즘을-사용하고-이러한-알고리즘이-가능한-이유는-무엇인가요&quot;&gt;자바는 어떠한 Linking 알고리즘을 사용하고 이러한 알고리즘이 가능한 이유는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Linking이란 여러 개의 코드와 데이터를 모아서 연결하는 작업을 의미합니다.&lt;/strong&gt; Linking을 통해서 생성된 실행 가능한 파일은 Loader를 통해 메모리에 배치됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;자바는 동적 링킹(Dynamic Linking)을 사용하여 실행 가능한 파일을 만들 때 프로그램에서 사용하는 모든 라이브러리 모듈을 복사하지 않고, 해당 모듈의 주소만 가지고 있다가 런타임에 실행 파일과 라이브러리가 메모리에 위치될 때 해당 모듈의 주소로 가서 필요한 것을 들고 오는 방식을 사용합니다.&lt;/strong&gt; (가상 메모리 방식과 비슷한 감도 없지 않아 있다.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;자바가 동적 링킹(Dynamic Linking)을 사용할 수 있는 이유는 .class 파일이 실행 가능한 형태가 아닌 JVM이 읽을 수 있는 형태 Java Byte Code 이기 때문입니다.&lt;/strong&gt; &lt;u&gt;class 파일은 JVM위에서 Linking 작업을 수행할 수 있도록, 라이브러리에 대한 Symbolic Reference만을 가지고 있게 됩니다.&lt;/u&gt;&lt;/p&gt;

&lt;h3 id=&quot;runtime-dynamic-loading이란-무엇인가요&quot;&gt;Runtime Dynamic Loading이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Runtime Dynamic Loading이란 소스코드에서 객체를 참조하는 순간에 동적으로 Loading 하는 방식입니다.&lt;/strong&gt; 이는 Reflection 이라는 기술의 기본입니다.&lt;/p&gt;

&lt;h3 id=&quot;class-loader란-무엇인가요&quot;&gt;Class Loader란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Class Loader는 컴파일 타임에 생성된 바이트코드(.class)를 런타임에 Load하고 배치하는 일을 담당합니다.&lt;/strong&gt; 클래스가 참조되는 순간 동적으로 Load 및 Link가 이루어지는 Dynamic Loading을 담당하는 주체입니다.&lt;/p&gt;

&lt;h3 id=&quot;runtime-data-area-란-무엇인가요&quot;&gt;Runtime Data Area 란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Runtime Data Area란 JVM이 프로그램을 수행하기 위해 OS로부터 할당 받는 메모리 영역을 의미합니다.&lt;/strong&gt; Runtime Data Area는 각각의 목적에 따라 5개의 영역으로 나뉘며 이는 PC Register, JVM Stacks, Heap, Method Area, Native Method Stacks 입니다.&lt;/p&gt;

&lt;h3 id=&quot;pc-register는-무엇인가요&quot;&gt;PC Register는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;PC Registers는 Thread가 생성될 때 마다 생기는 공간으로 Thread가 어떠한 명령을 실행하게 될지에 대한 부분을 기록하는 공간입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;jvm-stacks는-무엇인가요&quot;&gt;JVM Stacks는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;JVM Stack은 스레드마다 할당되며 스레드와 동시에 생성되고 소멸됩니다. &lt;strong&gt;JVM 스택은 Frame을 넣고 빼는 작업을 수행하는 곳으로 지역 변수와 부분적인 결과를 보유하고 메소드 호출과 반환에서 역할을 수행합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;jvm-stack에-존재하는-frame은-무엇인가요&quot;&gt;JVM Stack에 존재하는 Frame은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Frame은 데이터와 부분적인 결과를 저장하고, 동적인 linking을 수행하고, 메소드를 위해 값을 리턴하고, 예외를 dispatch 하기 위해 사용되어집니다.&lt;/strong&gt; 프레임은 메서드를 호출하는 스레드의 JVM Stack으로 부터 할당되어지고 메서드가 호출되어질 때 생성되고 메서드가 완료되어질 때 소멸합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frame은 Local Variable Section, Operand Stack, Frame Data 총 3부분으로 구성되어 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Local Variable Section&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;u&gt;Method의 Parameters와 Local Variables을 저장&lt;/u&gt;합니다. Primitive Type의 경우 Local Variable Section에 저장되지만 Reference Type은 Local Variable Section에 저장되지 않고 heap에 저장한 후 저장된 위치의 Reference를 Frame의 Local Variable Section에 저장합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Operand Stack&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Frame의 Operand Stack이란 스레드의 작업공간이라고 할 수 있다. 프로그램 연산을 수행하면서 필요한 데이터 및 결과를 저장하는 곳이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Frame Data&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Constant Pool Resolution 정보와 Method가 정상 종료되었을 때의 정보, 비정상 종료했을 때 Exception 관련 정보가 포함되어 있습니다.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Constant Pool Resolution이란 Constant Pool의 Pointer 정보를 의미합니다.&lt;/p&gt;

      &lt;p&gt;Constant Pool은 Method Area에 있는 곳으로 &lt;strong&gt;Class의 모든 Symbolic Reference가 저장&lt;/strong&gt;되어 있습니다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;native-method-stack은-무엇인가요&quot;&gt;Native Method Stack은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Native Method Stack이란 Native Method 즉, 자바 프로그래밍 언어 이외의 언어로 작성된 메서드를 지원하기 위한 스택이며 이를 호출할 시 JVM Stack은 동작하지 않고, Native Method Stack을 활용하여 Frame을 push, pop 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;method-area란-무엇인가요&quot;&gt;Method Area란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;Method Area란 모든 JVM 스레드 사이에서 공유되어지는 영역으로 JVM이 시작할 때 생성되어지며 종료될 때 소멸합니다. &lt;strong&gt;Method Area는 run-time constant pool, 필드, 메소드, 생성자 등의 클래스별 구조를 저장합니다.&lt;/strong&gt; 이러한 정보들은 ClassLoader에서 넘겨 받은 Class File의 관련 정보를 추출하여 저장합니다.&lt;/p&gt;

&lt;h3 id=&quot;run-time-constant-pool이란-무엇인가요&quot;&gt;Run-Time Constant Pool이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;run-time constant pool은 클래스 파일에 있는 constant_pool table에 대한 클래스별 또는 인터페이스별 runtime 표현입니다.&lt;/strong&gt; 클래스와 인터페이스의 모든 Constant 정보를 가지고 있는 곳이며 여기서의 &lt;u&gt;Constant는 상수만을 의미하는 것이 아니라 Literal Constant, Type Field(Local Variable, Class Variable), Method로의 모든 Symbolic Reference&lt;/u&gt; 까지 확장된 개념을 의미한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;symbolic-reference&quot;&gt;Symbolic Reference&lt;/h3&gt;

  &lt;p&gt;자바에서는 특정 객체를 참조할 때 Memory Address를 직접 참조하는게 아니라, &lt;strong&gt;객체의 이름으로 참조&lt;/strong&gt;합니다. 이렇게 &lt;strong&gt;객체의 이름으로 참조하는 것은 Symbolic Reference&lt;/strong&gt;라고 합니다.&lt;/p&gt;

  &lt;p&gt;Symbolic Reference는 Constant Pool에 저장되며 객체에 접근할 필요가 있으면 Constant Pool에서 Symbolic Reference를 통해 해당 객체의 Memory Address를 찾아 동적으로 연결합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;heap이란-무엇인가요&quot;&gt;Heap이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;Heap은 JVM의 모든 스레드 사이에서 공유되어지는 영역입니다. Heap은 JVM이 시작할 때 생성되고 종료될 때 소멸됩니다. &lt;strong&gt;Heap은 모든 클래스의 인스턴스와 배열에 대한 메모리가 할당되는 영역입니다.&lt;/strong&gt; 자바에서 객체들은 절대 명시적으로 할당이 해제되지않으며 Garbage Collector에 의해서만 메모리가 회수됩니다.&lt;/p&gt;

&lt;h3 id=&quot;jvm-heap-구조&quot;&gt;JVM Heap 구조&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation4-2.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Young Generation :&lt;/strong&gt; Object가 최초로 할당 되는 장소이며 Eden이 꽉 차게 되면 Eden 의 모든 객체들의 참조 여부를 따져서 참조가 되어있는 Object이면 Survivor영역으로 옮기고, 참조가 없는 Object라면, 그냥 남겨 놓는다. 이후에 Eden 영역을 모두 청소해버린 다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Old Generation :&lt;/strong&gt; Young Generation영역에서 Live Object로 오랫동안 살아남아 성숙한 Object는 Old Generation영역으로 이동하게 된다. 이를 &lt;strong&gt;Promotion&lt;/strong&gt;이라고 한다. 비교 적 오랫동안 참조가되어 앞으로도 계속 이용될 확률이 높은 Object를 저장하는 공간이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;execute-engine&quot;&gt;Execute Engine&lt;/h3&gt;

&lt;p&gt;Execute Engine은 JVM의 다양한 메모리 영역과 통신합니다.  &lt;strong&gt;Execute Engine은 클래스 로더를 통해서 JVM의 run-time data area에 할당되어진 바이트 코드를 실행하는 역할을 담당합니다.&lt;/strong&gt; Execute Engine은 Java byte code를 실행하기 위해 3가지 주요 요소인 Interpreter, JIT Compiler, Garbage Collector을 포함한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Interpreter :&lt;/strong&gt; Interpreter는 Java Byte Code를 읽고 OS의 native code로 변화하여 이들을 순차적인 방식으로 실행하는 구성요소를 의미합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;JIT Compiler :&lt;/strong&gt; JIT Compiler는 컴파일러를 통해 interpreter의 느린 실행의 단점을 상쇄하고 성능을 향상시킵니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Garbage Collector :&lt;/strong&gt; 메모리를 자동으로 관리하는 도구를 의미하며 백그라운드에서 항상 실행하고있는 daemon 스레드 입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Java Native Interface(JNI) :&lt;/strong&gt; JNI는 자바 메소드 호출과 관련된 native libraries 와의 다리 역할을 해줍니다.&lt;/p&gt;

&lt;h3 id=&quot;garbage-collection&quot;&gt;Garbage Collection&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Garbage Collection이란 Heap을 재활용하기 위해 Root Set에서 참조되지 않는 Object(Unreachable Object)를 없애 가용한 공간을 만드는 작업이라고 할 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Garbage Collection은 보통 메모리의 압박이 있을 때 수행되고 이 과정에서 Heap의 단편화(Fragmentation)가 발생할 수 있습니다. 이러한 문제를 해결하기 위해 Garbage Collection은 Compaction Algorithm을 사용합니다.&lt;/p&gt;

&lt;p&gt;JVM Garbage Collection은 여러 알고리즘을 사용하는데요 대표적으로는 &lt;strong&gt;Reference Counting Algorithm&lt;/strong&gt;이 존재합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;root-set&quot;&gt;Root Set&lt;/h3&gt;

  &lt;p&gt;&lt;strong&gt;Reacheable Reference 여부를 파악하려면 항상 &lt;u&gt;유효한 최초의 참조&lt;/u&gt;가 있어야 하는데 이를 객체 참조의 root set 이라고 합니다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Root Set의 구분&lt;/strong&gt;&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Stack의 참조 정보&lt;/strong&gt;&lt;/p&gt;

      &lt;p&gt;Local Variable Section과 Operand Stack의 참조&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;JVM Method Area의 Constant Pool에서 참조&lt;/strong&gt; (정적 변수에 의한 참조)&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Native Method Stack으로 넘겨진 Object의 Reference 참조&lt;/strong&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;이 3가지 Reference 정보에 의해 직간접적으로 참조되고 있다면 Reachable Object이고, 그렇지 않다면 모두 Garbage Object(Unreachable Object)이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;reference-counting-algorithm이란-무엇인가요&quot;&gt;Reference Counting Algorithm이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Reference Counting Algorithm의 기본 아이디어는 각 Object마다 Reference Count를 관리하여 Object가 참조되면 Count를 1증가시키고 참조가 사라지면 1을 감소하는 식으로 동작합니다.&lt;/strong&gt; 이 알고리즘에서 객체 참조는 직접적인 참조와 간접적인 참조 모두를 포함합니다.&lt;/p&gt;

&lt;p&gt;Reference Counting Algorithm은 Garbage Object를 확인하는 방법이 매우 간단하다는 장점이 있지만, 참조의 변경이 있을 때마다 Object의 Reference Count를 변경해줘야 하기 때문에 동기화 측면에서도 그리고 비용적인 측면에서도 좋지 않습니다.&lt;/p&gt;

&lt;p&gt;LinkedList와 같은 Self Circular Reference 즉, 선형 참조의 경우에는 분명히 Garbage Object임에도 불구하고 Count가 0이 아니여서 Reachable Object로 간주되어 GC의 대상이 안된다면 메모리 누수(Memory Leak)가 발생할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;메모리-누수-memory-leak&quot;&gt;메모리 누수 (Memory Leak)&lt;/h3&gt;

  &lt;p&gt;&lt;strong&gt;메모리 누수란 프로그램에서 필요하지 않은 메모리들이 계속 점유되고 있는 현상을 의미합니다.&lt;/strong&gt; 즉, 더이상 사용하지 않는 객체가 GC에 의해서 회수되지 않고 계속 누적되는 현상을 의미합니다. 메모리 누수가 계속 중첩되다보면 heap 영역의 공간이 부족해져서 OutOfMemeoryError가 발생할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Tue, 02 Mar 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2021/03/02/NAVER-Practical-Interview-Preparation-4.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2021/03/02/NAVER-Practical-Interview-Preparation-4.html</guid>
        
        <category>OOP</category>
        
        <category>SOLID</category>
        
        <category>Design-Pattern</category>
        
        <category>JVM</category>
        
        <category>Java</category>
        
        <category>Runtime-Storage-Area</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[실무 면접 준비 - 3] 데이터베이스 &amp; 네트워크 (Database &amp; Network)</title>
        <description>&lt;hr /&gt;

&lt;h2 id=&quot;database&quot;&gt;Database&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;데이터베이스란-무엇인가요&quot;&gt;데이터베이스란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스란 여러 사람이 공유하여 사용할 목적으로 통합되어 관리되는 데이터의 집합을 의미합니다.&lt;/strong&gt; 이러한 데이터베이스를 관리하는 시스템을 데이터베이스 시스템 즉, DBMS라고 하는거구요.&lt;/p&gt;

&lt;h3 id=&quot;데이터베이스의-특징은-무엇인가요&quot;&gt;데이터베이스의 특징은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스의 특징으로는 독립성, 무결성, 보안성, 일관성, 중복 최소화가 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;독립성(Independence) :&lt;/strong&gt; 데이터베이스는 데이터를 사용하는 응용 프로그램과 독립적으로 데이터를 저장 및 관리한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;무결성(Integrity) :&lt;/strong&gt; 데이터베이스는 다양한 제약조건 및 기능을 통해 데이터의 무결성을 유지해준다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;보안성(Security) :&lt;/strong&gt; 데이터베이스는 계정 및 권한 관리를 통해 데이터들의 보안을 유지해준다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;일관성(Consistency) :&lt;/strong&gt; 데이터베이스는 다양한 제약조건을 통해 데이터를 일관되게 유지해준다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;중복 최소화(Minimum Duplication) :&lt;/strong&gt; 데이터베이스는 데이터를 통합해서 관리함으로써 데이터의 중복을 최소화한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;데이터-무결성&quot;&gt;데이터 무결성&lt;/h3&gt;

  &lt;p&gt;&lt;strong&gt;데이터 무결성이란 데이터의 정확성과 일관성을 유지하고 보증하는 것을 가리키며 데이터베이스 시스템의 중요한 기능이다.&lt;/strong&gt; 데이터 무결성은 일반적으로 일련의 무결성 제한이나 규칙에 의해 데이터베이스 시스템이 강제한다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;무결성 제한의 유형&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;개체 무결성(Entity Integrity) :&lt;/strong&gt; 모든 테이블은 기본 키(primary key)를 가져야 하며 기본 키로 선택된 열은 고유하고 빈 값은 허용되지 않음을 규정한다.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;참조 무결성(Referential Integrity) :&lt;/strong&gt; 모든 외래 키 값은 Null이거나 참조 릴레이션의 기본키 값과 동일해야 한다는 규정이다. 즉, 릴레이션은 참조할 수 없는 외래키 값을 가질 수 없다는 규정이다.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;범위 무결성(Domain Integrity) :&lt;/strong&gt; 정의된 범위에서 관계형 데이터베이스의 모든 열이 선언되도록 규정한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;데이터베이스에-존재하는-key에-대해서-설명해주세요&quot;&gt;데이터베이스에 존재하는 Key에 대해서 설명해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;기본키(Primary Key)란 하나의 테이블에서 특정 ROW를 구별할 수 있는 속성(Attribute)을 의미합니다.&lt;/strong&gt; 개체 무결성에 의해 기본키에는 Null 값과 중복된 값이 저장되어질 수 없습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;외래키(Foreign Key)란 참조되는 테이블의 기본키와 대응되어 테이블 간에 참조 관계를 표시하는 키입니다.&lt;/strong&gt; 외래키로 지정되면 참조 무결성에 의해 참조 테이블의 기본키에 없는 값은 입력할 수 없습니다.&lt;/p&gt;

&lt;h3 id=&quot;조인이란-무엇이고-어떠한-조인이-있는지-알려주실-수-있나요&quot;&gt;조인이란 무엇이고 어떠한 조인이 있는지 알려주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;조인이란 2개 이상의 테이블에서 조건에 맞는 데이터를 추출하기 위하여 사용하는 쿼리문을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Inner Join : 2개 이상의 테이블에서 교집합만을 추출&lt;/li&gt;
  &lt;li&gt;Left Join : 2개 이상의 테이블에서 FROM문에 해당하는 부분을 추출&lt;/li&gt;
  &lt;li&gt;Right Join : 2개 이상의 테이블에서 FROM 문의 테이블과 JOIN하는 테이블에 해당하는 부분을 추출&lt;/li&gt;
  &lt;li&gt;Outer Join : 2개 이상의 테이블에서 모든 테이블에 해당하는 부분을 추출&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation3-1.png&quot; style=&quot;width:80%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;transaction&quot;&gt;Transaction&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;트랜잭션은-무엇인가요&quot;&gt;트랜잭션은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;트랜잭션(Transaction)이란 데이터베이스의 상태를 변환시키는 하나의 논리적 기능을 수행하기 위한 작업의 단위 또는 한꺼번에 모두 수행되어야 할 일련의 연산들을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;트랜잭션transaction의-특징은-어떤게-있나요&quot;&gt;트랜잭션(Transaction)의 특징은 어떤게 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;트랜잭션의 특징으로는 ACID라고 하는 4가지 특성이 있으며 이는, 원자성(Atomicity), 일관성(Consistency), 격리성(Isolation), 지속성(Durability)을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;원자성(Atomicity) :&lt;/strong&gt;  트랜잭션의 연산이 데이터베이스에 모두 반영되든지 아니면 전혀 반영되지 않아야 한다는 것을 의미합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;일관성(Consistency) :&lt;/strong&gt; 트랜잭션이 수행된 이후에도 데이터베이스는 언제나 일관성 있는 데이터를 보장해야 한다는 것을 의미합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;독립성(Isolation) :&lt;/strong&gt; 여러 트랜잭션이 동시에 수행되더라도 각각의 트랜잭션은 서로 간섭없이 독립적으로 수행되어야 한다는 것을 의미합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;지속성(Duration) :&lt;/strong&gt; 성공적으로 완료된 트랜잭션의 결과는 데이터베이스에 영구적으로 저장되어야 한다는 것을 의미합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;트랜잭션transaction은-어떻게-동작하나요&quot;&gt;트랜잭션(Transaction)은 어떻게 동작하나요?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation3-2.png&quot; style=&quot;width:90%&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;트랜잭션을 시작합니다.&lt;/li&gt;
  &lt;li&gt;트랜잭션 내의 다양한 작업을 수행합니다.
    &lt;ul&gt;
      &lt;li&gt;트랜잭션 내의 모든 작업을 이상없이 완료했다면 해당 트랜잭션을 Commit 합니다.&lt;/li&gt;
      &lt;li&gt;트랜잭션 내의 작업을 진행하던 중에 실패했다면 해당 트랜잭션을 Rollback 또는 Abort 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;index&quot;&gt;Index&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;인덱스index란-무엇인가요&quot;&gt;인덱스(Index)란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;데이터베이스 인덱스란 테이블의 동작 속도(Row 검색 속도)를 높여주는 자료구조를 의미합니다.&lt;/strong&gt; 마치 책의 앞 부분에 존재하는 목차와 같습니다. 데이터베이스는 인덱스를 따로 저장하며 관계형 DB의 경우에는 테이블로 인덱스를 관리합니다.&lt;/p&gt;

&lt;h3 id=&quot;인덱스를-구현하기-위한-자료구조는-어떤게-존재하나요&quot;&gt;인덱스를 구현하기 위한 자료구조는 어떤게 존재하나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;인덱스를 구현하기 위한 대표적인 자료구조로는 Hash Table과 B+ Tree가 존재합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Hash Table&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;해시 테이블은 Key와 Value로 데이터를 저장하는 자료구조로 &lt;strong&gt;빠른 데이터 검색이 필요할 때 유용&lt;/strong&gt;합니다. 시간복잡도는 O(1) 입니다.&lt;/li&gt;
      &lt;li&gt;해시 테이블은 Key값을 이용해 고유한 Index를 생성하여 그 Index에 저장된 값을 꺼내오는 구조입니다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;해시는 등호(=) 연산에만 특화되어 있기 때문에 부등호 연산(&amp;gt;, &amp;lt;)이 자주 사용되는 데이터베이스 검색을 위해서는 적절하지 않습니다.&lt;/strong&gt; key-value 기반의 DB인 Redis에는 적절한 것 같다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;B+ Tree&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;DB의 인덱스를 위해 자식 노드가 2개 이상인 Binary Tree를 개선시킨 자료구조로서 아래와 같은 특성을 가진다.
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Leaf 노드(데이터 노드)만 인덱스와 함께 데이터(Value)를 가지고 있고, 나머지 노드(인덱스 노드)들은 데이터를 위한 인덱스(key)만을 갖는다.&lt;/strong&gt; Leaf 노드들은 LinkedList로 연결되어 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;B+Tree의 리프노드들은 LinkedList로 연결하여 순차검색을 용이하게 하는 등 인덱스에 맞게 최적화하였다.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[PostgreSQL] GIN(Generalized Inverted Index)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;GIN 자료구조는 인덱스를 적용하는 컬럼의 값을 일정한 규칙에 따라 쪼개고 이를 사용하는 자료구조입니다.&lt;/strong&gt; 즉, LIKE와 같은 연산이 많을 경우 B+ Tree나 Hash Table 인덱스보다 훨씬 빠르게 동작할 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인덱스를-고려할-때-어떠한-점에-주의해야-하나요&quot;&gt;인덱스를 고려할 때 어떠한 점에 주의해야 하나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;인덱스를 설정할 때 해당 테이블에서 어떠한 쿼리가 자주 사용되는지 분석 해야합니다.&lt;/strong&gt; SELECT가 자주 사용되는 테이블이라면 인덱스 설정시 성능 향상의 효과를 기대할 수 있지만 UPDATE, DELETE, INSERT 쿼리가 자주 사용되는 테이블이라면 오히려 인덱스 설정시 성능이 감소될 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;인덱스 설정시 카디널리티가 높은 즉, 컬럼에 중복되는 값이 많이 없는 컬럼을 인덱스로 걸어야 합니다.&lt;/strong&gt; 카디널리티가 낮은 컬럼을 인덱스로 사용시 인덱스를 통해서 수 많은 row가 검색 될 것이며, 이는 다시 Full Search로써 결과값을 검색해야합니다. 만약 카디널리티가 높은 컬럼을 인덱스로 사용한다면 인덱스를 통해서 소수의 row만 검색될 것이며 우리는 이들 중 조건에 맞는 row만 반환하면 되기 때문에 성능이 훨씬 좋습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;정규화normalization&quot;&gt;정규화(Normalization)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;정규화는-무엇이며-왜-필요한가요&quot;&gt;정규화는 무엇이며 왜 필요한가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;정규화란 데이터베이스에서 갱신 이상을 없애고 데이터의 중복을 최소화하기 위해 하나의 테이블을 둘 이상의 테이블로 분리하는 작업을 의미합니다.&lt;/strong&gt; 갱신 이상에는 삽입 이상, 삭제 이상, 수정 이상 등이 포함됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;갱신-이상&quot;&gt;갱신 이상&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;삽입 이상(Insertion Anomalies) :&lt;/strong&gt; 원하지 않는 자료가 삽입된다든지, 삽입하는데 자료가 부족해 삽입이 되지 않아 발생하는 이상을 의미합니다.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;삭제 이상(Deletion Anomalies) :&lt;/strong&gt; 하나의 자료만 삭제하고 싶지만, 그 자료가 포함된 튜플 전체가 삭제됨으로써 원하지 않는 정보의 손실이 발생하는 이상을 의미합니다.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;수정 이상(Modification Anomalies) :&lt;/strong&gt; 데이터 수정시 일부의 튜플만 갱신되어 데이터의 일관성에 이상이 생기는 현상을 의미합니다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;정규형이란-무엇이고-이들의-종류에-대해서-설명해주실-수-있나요&quot;&gt;정규형이란 무엇이고 이들의 종류에 대해서 설명해주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;정규형이란 특정 조건을 만족하는 테이블의 스키마 형태를 말하며 제 1 정규형, 제 2 정규형, 제 3 정규형, BCNF 정규형 등이 존재합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;제 1 정규형 :&lt;/strong&gt; 테이블의 &lt;u&gt;각 로우에 컬럼의 값이 1개&lt;/u&gt;만 있어야 하는 형태의 테이블 스키마를 의미합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;제 2 정규형 :&lt;/strong&gt; 제 1 정규형을 만족하면서 &lt;u&gt;Primary Key가 합성키이며, 부분 종속(Primary Key 중에 특정 컬럼에만 종속된 컬럼)이 없어야 하는 형태&lt;/u&gt;의 테이블 스키마를 의미합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;제 3 정규형 :&lt;/strong&gt; 제 2 정규형을 만족하면서 테이블 내의 &lt;u&gt;비주요 속성이 기본 키에만 의존&lt;/u&gt;하는 테이블 스키마를 의미합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BCNF 정규형 :&lt;/strong&gt; 제 3 정규형을 만족하면서 &lt;u&gt;모든 결정자가 후보키 집합&lt;/u&gt;에 속한 테이블 스키마를 의미합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;함수적-종속성functional-dependency&quot;&gt;함수적 종속성(Functional Dependency)&lt;/h3&gt;

  &lt;p&gt;&lt;strong&gt;함수적 종속성이란 속성 값의 의미와 속성 간의 상호 관계로부터 유도되는 제약조건의 일종을 의미합니다.&lt;/strong&gt; X와 Y를 임의의 속성 집합이라고 할 때, X의 값이 Y의 값을 유일하게(unique) 결정한다면 “X는 Y를 함수적으로 결정한다”라고 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;nosql&quot;&gt;NoSQL&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;nosql이란-무엇이고-어떠한-경우에-사용하는-것이-좋나요&quot;&gt;NoSQL이란 무엇이고 어떠한 경우에 사용하는 것이 좋나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NoSQL 테이터베이스란 전통적인 관계형 모델에서 벗어나서 다양한 데이터 모델을 사용하여 데이터의 관리와 접근을 지원하는 데이터베이스를 의미합니다.&lt;/strong&gt; NoSQL은 데이터의 스펙이 자주 변경되는 경우나, Read 작업이 자주 일어나는 경우, 수 많은 양의 데이터를 다루기 위해 수평 확장이 자주 필요한 경우에 사용하면 좋습니다.&lt;/p&gt;

&lt;h3 id=&quot;nosql의-장점과-단점에-대해서-말해주세요&quot;&gt;NoSQL의 장점과 단점에 대해서 말해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NoSQL의 장점으로는 스키마가 없거나 느슨하게 제공되기 때문에 요구사항 변경에 유연하게 대처할 수 있습니다. 또한 관계형 데이터베이스에 비해 수평 확장이 쉽기 때문에 대용량 데이터 처리시 성능상의 이점을 얻어갈 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NoSQL의 단점으로는 데이터베이스마다 사용하는 데이터의 모델이 다르기 때문에 이를 도입하기 위해서는 해당 데이터베이스를 깊게 공부해야해서 익숙한 관계형 데이터베이스보단 학습 비용이 많이 든다는 단점이 존재하구요, SQL처럼 엄격한 제약조건이 존재하지 않기 때문에 데이터를 수정하거나 삭제하는 경우 모든 컬렉션에 걸쳐서 이를 반영해야 하는 단점이 존재합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;사용해보신-nosql이-있으시나요-있다면-무엇이고-왜-사용했는지-알려주세요&quot;&gt;사용해보신 NoSQL이 있으시나요? 있다면 무엇이고 왜 사용했는지 알려주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;저는 Key-Value 구조의 데이터베이스인 Redis를 사용해 보았습니다. 레디스는 인-메모리 기반의 데이터베이스로써 데이터 접근이 타 DB에 비해 상대적으로 빠르다는 장점을 가지고 있습니다. 이러한 이유에서 추천 정보를 캐싱하기 위해서 Redis를 사용했으며 장애 대응을 위해 Redis가 제공하는 Master-Replica 모델을 도입하였습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;데이터-모델에-따라-nosql을-분류한다면-어떻게-분류할-수-있을까요&quot;&gt;데이터 모델에 따라 NoSQL을 분류한다면 어떻게 분류할 수 있을까요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;대표적으로 하나의 키에 하나의 데이터가 저장되는 Key-Value Data Model을 채택하고 있는 데이터베이스와 Key-Value 모델을 개념적으로 확장해서 하나의 키에 하나의 구조화된 문서를 저장하는 Document Data Model을 채택한 데이터베이스 등으로 나눌 수 있을것 같습니다.&lt;/strong&gt; Key-Value Data Model을 채택하고 있는 데이터베이스는 대표적으로 Redis를 들 수 있구요, Document Data Model을 채택하고 있는 데이터베이스는 대표적으로 MongoDB가 존재합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;computer-network&quot;&gt;Computer Network&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;osi-7-layer에-대해서-설명해주실-수-있나요&quot;&gt;OSI 7 Layer에 대해서 설명해주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;OSI 7 Layer란 네트워크를 7개의 계층으로 추상화한 구조를 의미합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;물리 계층(Physical Layer) :&lt;/strong&gt; 하나의 비트를 노드에서 다음 노드로 전송해주는 &lt;u&gt;하드웨어 전송 기술&lt;/u&gt;을 다루는 계층입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;링크 계층(Link Layer) :&lt;/strong&gt; 물리 계층을 통해 송수신되는 &lt;u&gt;정보의 오류와 흐름을 관리하여 신뢰성있는 전송을 보장&lt;/u&gt;하는 계층입니다. (MAC)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;네트워크 계층(Network Layer) :&lt;/strong&gt; 송신 호스트에서 수신 호스트까지 패킷을 전달하기 위해 &lt;u&gt;라우팅과 포워딩을 담당&lt;/u&gt;하는 계층입니다. (IP)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;전송 계층(Transport Layer) :&lt;/strong&gt; &lt;u&gt;End-to-End 사용자들이 신뢰성있는 데이터를 주고받&lt;/u&gt;을 수 있게 도와주는 계층입니다.(TCP, UDP)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;세션 계층(Session Layer) :&lt;/strong&gt; &lt;u&gt;양 끝단의 응용 프로세스가 통신(동시 송수신, 반이중, 전이중)을 관리하기 위한 방법을 제공&lt;/u&gt;해주는 계층입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;표현 계층(Presentation Layer) :&lt;/strong&gt; &lt;u&gt;코드간의 번역&lt;/u&gt;을 담당하여 사용자 시스템에서 데이터의 형식상 차이를 다루는 부담을 응용 계층으로부터 덜어주는 계층입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;응용 계층(Application Layer) :&lt;/strong&gt; 응용 프로세스와 직접 관계하여 &lt;u&gt;일반적인 응용 서비스를 수행&lt;/u&gt;하는 계층입니다. (HTTP, DNS, SSH)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;네트워크를-7개의-계층으로-나눈-이유가-무엇일까요&quot;&gt;네트워크를 7개의 계층으로 나눈 이유가 무엇일까요?&lt;/h3&gt;

&lt;p&gt;네트워크를 7계층으로 나눈 이유는 &lt;strong&gt;네트워크에서 이상이 발생했을 경우 다른 레이어의 장비 및 소프트웨어를 건들지 않고도 이상이 생긴 특정 레어어만 고칠 수 있는 유지보수 측면에서의 장점&lt;/strong&gt;과, 예로들어 새로운 응용 계층 프로토콜을 개발할 경우 &lt;strong&gt;물리계층 부터 개발하지 않고 표현계층까지 재사용함으로써 확장성 및 재사용성 측면에서의 장점&lt;/strong&gt;을 가지기 때문에 네트워크를 계층적 구조인 OSI 7 레이어로 나눈 것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;dns는-무엇인가요&quot;&gt;DNS는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;DNS란 Domain Name System의 약자로 Host의 Domain Name을 IP로 변환해주는 서비스를 의미합니다.&lt;/strong&gt; DNS는 서버들의 계층 구조로 구현된 분산형 데이터베이스로서 주요 구성 요소로 Root, Top Level Domain(TLD), Authoritative, Local DNS Server가 존재합니다.&lt;/p&gt;

&lt;h3 id=&quot;브라우저에-wwwnavercom을-입력시-dns가-동작하는-순서를-저희에게-설명해주실수-있나요&quot;&gt;브라우저에 www.naver.com을 입력시 DNS가 동작하는 순서를 저희에게 설명해주실수 있나요?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Host가 www.naver.com 도메인 네임에 해당하는 IP를 얻기 위해 Local DNS Server에 요청을 보냅니다.&lt;/li&gt;
  &lt;li&gt;Local DNS Server에 해당 IP가 캐시되어 있을 경우 바로 응답해줄 수 있지만, 없을경우 Root DNS Server에 요청을 보냅니다. &lt;strong&gt;Root DNS Server&lt;/strong&gt;는 &lt;strong&gt;.com&lt;/strong&gt;을 인식한 후  &lt;strong&gt;.com 도메인을 관리하는 서버인 Top Level Domain(TLD) Server의 IP를 알려줍니다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Local DNS Server는 TLD Server에 www.naver.com 도메인 네임에 해당하는 IP를 얻을 수 있는지 요청합니다. TLD Server에서 해당 IP를 캐시하고 있을 경우 바로 응답해줄 수 있지만, 없을경우 &lt;strong&gt;naver.com을 인식한후 naver.com을 관리하는 서버인 Authoritative Server의 IP를 알려줍니다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Local DNS Server는 Authoritative Server에 www.naver.com 도메인 네임에 해당하는 IP를 얻을 수 있는지 요청합니다. &lt;strong&gt;Authoritative Server는 해당 도메인 네임에 대응하는 IP를 응답해 줍니다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Local DNS Server는 Host에게 www.naver.com 도메인 네임에 대응하는 IP를 xxx.xxx.xxx.xxx 응답해줍니다.&lt;/li&gt;
  &lt;li&gt;Host는 IP를 사용해서 다른 호스트에게 요청을 보냅니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ip는-무엇인가요&quot;&gt;IP는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;IP(Internet Protocol)는 Internet Protocol의 약자로써 송신 호스트와 수신 호스트가 패킷 교환 네트워크에서 정보를 주고받는데 사용하는 프로토콜입니다.&lt;/strong&gt; 이는 네트워크 계층에서 &lt;u&gt;호스트의 주소지정과 패킷 분할 및 조립 기능을 담당&lt;/u&gt;합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;IP는 비신뢰성(unreliability)과 비연결성(connectionlessness)이 특징이며 패킷 전송의 정확한 순서를 보장하려면 TCP 프로토콜 즉, 전송 계층과 같은 상위 프로토콜을 사용해야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;tcp와-udp는-각각-무엇이고-이들의-차이점에-대해서-알려주시고-각각-언제-사용하면-좋을지-알려주세요&quot;&gt;TCP와 UDP는 각각 무엇이고 이들의 차이점에 대해서 알려주시고 각각 언제 사용하면 좋을지 알려주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;UDP는 비신뢰적이고 비연결형 서비스를 제공하는 프로토콜이구요 TCP는 신뢰적이고 연결형 서비스를 제공하는 프로토콜입니다.&lt;/strong&gt; 신뢰성이 요구되어지는 HTTP와 같은 응용 계층 프로토콜은 TCP를 사용하구요, 신뢰성이 중요하지 않고 데이터를 빠른 속도로 전송하고자하는 DNS나 VoIP와 같은 응용 계층 프로토콜은 UDP를 사용합니다.&lt;/p&gt;

&lt;h3 id=&quot;3-way-handshake와-4-way-handshake에-대해서-설명해주세요&quot;&gt;3 way handshake와 4 way handshake에 대해서 설명해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;TCP는 정확한 전송을 보장하기 위해서 두 호스트간에 논리적인 접속을 위해 3 way handshake를 진행합니다. 전송이 완료되었다면 4 way handshake를 통해서 호스트간의 연결이 해제됩니다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;3-way-handshake---연결-성립&quot;&gt;&lt;strong&gt;3 way handshake - 연결 성립&lt;/strong&gt;&lt;/h3&gt;

  &lt;p&gt;TCP는 정확한 전송을 보장해야하기 때문에 두 호스트간에 논리적인 접속을 위해서 3 way handshake를 진행합니다.&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation3-3.png&quot; style=&quot;width:60%&quot; /&gt;&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;클라이언트가 서버에게 SYN 패킷을 보낸다.(seq : x)&lt;/li&gt;
    &lt;li&gt;서버가 SYN(x)를 받고, 클라이언트로 ACK와 SYN 패킷을 보낸다. (seq : y , ACK : x + 1)&lt;/li&gt;
    &lt;li&gt;클라이언트가 패킷을 받았다면 ACK(y+1)을 다시 서버로 보낸다.&lt;/li&gt;
    &lt;li&gt;두 호스트간에 연결 성공&lt;/li&gt;
  &lt;/ol&gt;

  &lt;h3 id=&quot;4-way-handshake---연결-해제&quot;&gt;4 way handshake - 연결 해제&lt;/h3&gt;

  &lt;p&gt;TCP는 두 호스트간의 연결을 해제하기위해 4 way handshake를 진행합니다.&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation3-4.png&quot; style=&quot;width:60%&quot; /&gt;&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;클라이언트는 서버에게 연결을 종료한다는 FIN 플래그를 보냅니다.&lt;/li&gt;
    &lt;li&gt;서버는 FIN을 받고, 확인했다는 ACK를 클라이언트에게 보냅니다.
(이때 모든 데이터를 보내기 위해 TIME OUT 상태가 됩니다.)&lt;/li&gt;
    &lt;li&gt;서버는 데이터를 모두 보냈다면, 연결이 종료되었다는 FIN 플래그를 클라이언트에게 보냅니다.&lt;/li&gt;
    &lt;li&gt;클라이언트는 FIN을 받고, 확인했다는 ACK를 서버에게 보냅니다.
(아직 서버로부터 받지 못한 데이터가 있을 수 있으므로 TIME_WAIT을 통해 기다립니다.)&lt;/li&gt;
    &lt;li&gt;두 호스트간에 연결 해제&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;http란-무엇인가요&quot;&gt;HTTP란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HTTP는 어플리케이션 계층 프로토콜의 한 종류로써 TCP/IP 기반의 신뢰적인 프로토콜입니다.&lt;/strong&gt; 주로 브라우저와 서버간의 통신을 하기 위해 자주 사용합니다.&lt;/p&gt;

&lt;h3 id=&quot;http와-https의-차이는-무엇인가요&quot;&gt;HTTP와 HTTPS의 차이는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;HTTP와 HTTPS는 TCP/IP 기반의 신뢰적인 어플리케이션 계층 프로토콜입니다. 두 프로토콜 모두 브라우저와 서버간의 통신을 위해서 자주 사용하지만 HTTP는 텍스트 교환이므로, 누군가가 네트워크에서 신호를 가로채면 내용이 노출되는 보안 이슈가 존재합니다. 이러한 &lt;strong&gt;보안 이슈를 해결하기 위해 SSL 인증서를 사용해서 HTTP를 암호화한 프로토콜이 HTTPS 입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;http-request-method는-무엇이고-어떤-종류가-있는지-설명해주세요&quot;&gt;HTTP Request Method는 무엇이고 어떤 종류가 있는지 설명해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HTTP는 Request Method를 정의하여, 주어진 리소스에서 수행하길 원하는 행동을 나타냅니다.&lt;/strong&gt; HTTP Request Method 종류로는 &lt;u&gt;GET, POST, PUT, DELETE, PATCH&lt;/u&gt; 등이 존재합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GET :&lt;/strong&gt; GET 메서드는 특정 리소스를 요청합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;POST :&lt;/strong&gt; POST 메서드는 특정 리소스에 요청에 포함된 데이터를 처리하는 것을 요청합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PUT :&lt;/strong&gt; PUT 메서드는 특정 리소스의 현재 표현식을 모두 요청에 포함된 payload로 바꿉니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DELETE :&lt;/strong&gt; DELETE 메서드는 특정 리소스를 삭제합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PATCH :&lt;/strong&gt; PATCH 메서드는 특정 리소스의 특정 부분만을 수정하는데 사용합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http-response-status-code는-무엇이며-어떤-종류가-있는지-설명해주세요&quot;&gt;HTTP Response Status Code는 무엇이며 어떤 종류가 있는지 설명해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HTTP Reponse Status Code는 말 그대로 HTTP 요청에 대한 상태를 나타내는 코드이며 100번대 코드부터 500번대 코드까지 존재합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;1xx :&lt;/strong&gt; 서버는 요청을 받았으며 작업을 계속진행한다는 상태를 나타내는 코드들의 집합
    &lt;ul&gt;
      &lt;li&gt;100 Continue&lt;/li&gt;
      &lt;li&gt;101 Switching Protocol&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;2xx :&lt;/strong&gt; 서버는 클라이언트의 요청을 성공적으로 처리했다는 상태를 나타내는 코드들의 집합
    &lt;ul&gt;
      &lt;li&gt;200 OK&lt;/li&gt;
      &lt;li&gt;201 Created&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;3xx :&lt;/strong&gt; 서버는 클라이언트의 요청을 성공적으로 처리했지만 클라이언트는 요청을 마치기 위해 추가 동작을 취해야 한다는 상태를 나타내는 코드들의 집합
    &lt;ul&gt;
      &lt;li&gt;301 Moved Permanently&lt;/li&gt;
      &lt;li&gt;302 Found&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;4xx :&lt;/strong&gt; 서버는 클라이언트의 요청에 오류가 있다는 상태를 나타내는 코드들의 집합
    &lt;ul&gt;
      &lt;li&gt;400 Bad Request&lt;/li&gt;
      &lt;li&gt;401 Unauthorized&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;5xx :&lt;/strong&gt; 서버는 클라이언트의 요청에는 이상이 없지만 이를 처리하는 서버에 문제가 있다는 것을 나타내는 코드들의 집합
    &lt;ul&gt;
      &lt;li&gt;500 Internal Server Error&lt;/li&gt;
      &lt;li&gt;503 Service Unavailable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http-header는-무엇이고-어떠한-종류가-있는지-설명해주세요&quot;&gt;HTTP Header는 무엇이고 어떠한 종류가 있는지 설명해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HTTP Header는 클라이언트와 서버가 요청 또는 응답으로 부가적인 정보를 전송할 수 있도록 하는 데이터 구조입니다.&lt;/strong&gt; HTTP 헤더에는 Content-Type, Content-Language, User-Agent, Host, Server, Set-Cookie 등이 존재합니다.&lt;/p&gt;

&lt;h3 id=&quot;처리량throughput과-지연시간latency에-대해서-설명해주세요&quot;&gt;처리량(Throughput)과 지연시간(Latency)에 대해서 설명해주세요.&lt;/h3&gt;

&lt;p&gt;처리량과 지연시간은 둘 다 컴퓨터의 성능을 나타내는데 중요한 개념입니다. &lt;strong&gt;Throughput은 초당 처리하는 작업의 개수를 말하며, Latency는 하나의 작업을 처리하는데 걸리는 시간을 말합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;cookie와-session이-각각-무엇인지-설명해주시고-어떠한-차이점을-가지는지-설명해주세요&quot;&gt;Cookie와 Session이 각각 무엇인지 설명해주시고 어떠한 차이점을 가지는지 설명해주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;쿠키(Cookie)란 클라이언트의 로컬에 저장되는 Key-Value가 들어있는 작은 데이터 파일을 의미하구요 세션은 클라이언트의 정보를 서버 메모리에 저장하는 기술을 의미합니다.&lt;/strong&gt; 쿠키와 세션의 가장 큰 차이점은 “어디에서 데이터를 관리하느냐”의 차이일 것 같습니다. 쿠키는 클라이언트 쪽에서 데이터를 관리하구요, 세션은 서버 쪽에서 데이터를 관리합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;보통 클라이언트는 무수히 많고, 서버는 상대적으로 적기 때문에 세션이 많을 수록 서버는 부하가 걸리게 됩니다. 이러한 경우를 방지하고자 다양한 방법들을 생각해야만 합니다. 이슈 해결 방법으로는 세션을 디스크에 저장하는 방법도 있을것 같구요, 세션이 아닌 본인만의 클라이언트 식별 프로토콜을 만들어도 좋을 것 같습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;세션과-쿠키가-나오게된-이유는-무엇일까요&quot;&gt;&lt;strong&gt;세션과 쿠키가 나오게된 이유는 무엇일까요?&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HTTP는 무상태(stateless), 무연결(conectionless) 프로토콜입니다.&lt;/strong&gt; 즉, 클라이언트의 상태를 저장하지도, 클라이언트와의 연결을 지속하지도 않습니다. 하지만 대부분의 어플리케이션들은 상태를 기록할 필요와 연결을 유지할 필요가 있습니다. 이러한 문제를 해결하고자 등장한 것이 쿠키와 세션입니다.&lt;/p&gt;

&lt;h3 id=&quot;http-세션-유지란-무엇이고-여러-서버가-존재할-때-세션은-어떻게-유지할-수-있을까&quot;&gt;HTTP 세션 유지란 무엇이고, 여러 서버가 존재할 때 세션은 어떻게 유지할 수 있을까?&lt;/h3&gt;

&lt;p&gt;무상태 무연결 프로토콜인 HTTP의 세션 유지 방법은 &lt;strong&gt;첫 요청시 서버에서 세션을 만들고 클라이언트로 보내 쿠키에서 세션을 관리하게 끔 한 뒤 요청마다 쿠키에 세션을 담아서 서버와의 세션을 유지시킵니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;여러 서버가 존재할 때 세션은 서비스 노드에 들어가기 전에 처리되어야만 합니다. 저라면 클러스터를 구성해서 서비스 노드 앞단에 서버를 만들어 세션 처리를 진행한 뒤 서비스 노드로 요청을 넘길것 같습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;톰켓 레벨 세션 매니저 + 레디스로 클러스터링&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 01 Mar 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2021/03/01/NAVER-Practical-Interview-Preparation-3.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2021/03/01/NAVER-Practical-Interview-Preparation-3.html</guid>
        
        <category>Database</category>
        
        <category>Transaction</category>
        
        <category>Index</category>
        
        <category>Network</category>
        
        <category>OSI</category>
        
        <category>DNS</category>
        
        <category>TCP/UDP</category>
        
        <category>HTTP</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[실무 면접 준비 - 2] 운영체제 (Operating System)</title>
        <description>&lt;hr /&gt;

&lt;h2 id=&quot;process--thread&quot;&gt;Process &amp;amp; Thread&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;core는-무엇인가요&quot;&gt;Core는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;Core란 Processor의 한 종류인 &lt;strong&gt;CPU의 기본 연산 단위를 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;프로세스와-스레드는-각각-무엇이고-어떠한-차이가-존재하나요&quot;&gt;프로세스와 스레드는 각각 무엇이고 어떠한 차이가 존재하나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Process란 메모리에 올라와서 실행 중인 프로그램을 의미하구요, Thread란 프로세스 내에서 실행되는 실행 흐름의 단위를 의미합니다.&lt;/strong&gt; 프로세스와 스레드는 CPU를 여러 실행 흐름으로 나누어서 실행한다는 것은 동일하지만 이들간에 공유되는 자원에서 차이가 발생합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process는 text, data, heap, stack 영역을 포함하는 구조의 메모리를 가지며 이들은 Process간에 공유되어지지 않습니다.  Thread는 프로세스 내에서 Stack만 할당받으며 Code, Data, Heap 영역을 같은 Process내의 Thread간에 공유합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;process와-thread를-위한-참고-자료&quot;&gt;Process와 Thread를 위한 참고 자료&lt;/h3&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation2-1.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;메모리 컴포넌트&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;text :&lt;/strong&gt; 실행 코드가 저장되는 영역&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;data :&lt;/strong&gt; 전역 변수 등을 기록하는 영역&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;heap :&lt;/strong&gt; 프로그램 실행 중에 동적으로 할당되는 메모리 영역&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;stack :&lt;/strong&gt; 함수를 호출할 때 임시 데이터 저장장소를 위한 영역 (ex. 함수 매개변수, 복귀 주소, 지역변수, …)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;스택을-스레드마다-독립적으로-할당하는-이유가-있나요&quot;&gt;스택을 스레드마다 독립적으로 할당하는 이유가 있나요?&lt;/h3&gt;

&lt;p&gt;Stack은 함수의 Argument, Return Address &amp;amp; Value, Local Variable 등을 저장하기 위해 사용되는 메모리 공간입니다. &lt;strong&gt;이들은 프로세스 내에서 독립적인 함수 호출을 위해서 필요한 데이터들이며 스레드별로 스택을 독립적으로 할당함을 통해 독립적인 실행 흐름을 수행할 수 있는 스레드를 만들 수 있다는 것을 의미합니다.&lt;/strong&gt; 프로세스를 여러 개의 실행 흐름인 스레드의 집합으로 만들고 싶다면 스레드마다 스택을 할당하는 것은 어쩌면 당연합니다.&lt;/p&gt;

&lt;h3 id=&quot;멀티-프로세스와-멀티-스레드에-대해서-알려주세요&quot;&gt;멀티 프로세스와 멀티 스레드에 대해서 알려주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;하나의 프로그램을 여러 프로세스로 동작시키는 것을 멀티 프로세스라고 하구요, 여러 스레드로 동작시키는 것을 멀티 스레드라고 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;멀티-프로세스와-멀티-스레드의-장단점에-대해서-알려주세요&quot;&gt;멀티 프로세스와 멀티 스레드의 장단점에 대해서 알려주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;멀티 프로세스의 장점&lt;/strong&gt;으로는 여러 프로세스 중 하나의 프로세스에 문제가 발생한다면 해당 프로세스에서만 문제를 해결하면 되기 때문에 멀티 스레드에서 비해서 상대적으로 안정적입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;멀티 프로세스의 단점&lt;/strong&gt;으로는 프로세스간에 공유 되어지는 메모리가 없기 때문에 프로세스 간의 통신을 위해서 통신 기법이 필요합니다. 이 뿐만 아니라 Context Switching 이나 자식 프로세스 생성 시 많은 오버헤드가 발생하기 떄문에 여러 프로세스가 존재하는 경우 프로그램의 수행 시간이 전체적으로 시간이 느려질 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;멀티 스레드의 장점&lt;/strong&gt;으로는 자식 프로세스를 생성하거나 Context Switching과 같은 오버헤드가 많이 발생하는 작업이 없어짐으로 시스템의 처리량이 증가합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;멀티 스레드의 단점&lt;/strong&gt;으로는 프로세스의 Code, Heap, Data 메모리 영역을 공유하기 때문에 동기화 문제가 발생할 수 있다는 점입니다. 또한 하나의 스레드에서 문제가 발생하면 전체 프로세스가 영향을 받을 수 있어서 이러한 부분을 주의해야 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;context-switching&quot;&gt;Context Switching&lt;/h3&gt;

  &lt;p&gt;CPU에서 여러 프로세스를 돌아가면서 작업을 처리하는데 이 과정을 Context Switching 이라고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;멀티-프로세스와-멀티-스레드는-각각-언제-사용하는것이-좋을까요&quot;&gt;멀티 프로세스와 멀티 스레드는 각각 언제 사용하는것이 좋을까요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CPU가 처리해야하는 task의 특성이 크기가 크지 않으면서 개수가 많을 경우나 실시간성이 중요한 웹과 같은 경우 멀티 스레드를 사용하는 것이 좋구요, CPU가 처리해야하는 task의 특성이 크기가 크면서 개수가 적은 경우나 실시간성이 중요하지 않은 일괄 처리 같은 경우 멀티 프로세스를 사용하면 좋습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;async--sync&quot;&gt;Async &amp;amp; Sync&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;blocking과-non-blocking에-대해서-설명해주시고-언제-사용하면-좋을지-알려주세요&quot;&gt;blocking과 non-blocking에 대해서 설명해주시고 언제 사용하면 좋을지 알려주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;하나의 실행 흐름에서 요청이 일어난 후 응답을 얻기까지 다른 실행 흐름들이 기다리는 전략을 Blocking이라고 하구요, 다른 실행 흐름이 요청에 대한 응답을 기다리지 않고 자유롭게 CPU나 메모리 등을 이용하는 전략을 Non-Blocking이라고 합니다.&lt;/strong&gt; 작업간에 공유 자원이 존재하지 않고 CPU 코어에 여유가 많은 경우 Non-Blocking을 사용하면 좋을 것 같구요, 작업간에 공유 자원이 많이 존재하고 CPU 코어에 여유가 없는 경우 Blocking을 사용하면 좋을것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;동기와-비동기에-대해서-설명해주시고-언제-사용하면-좋을지-알려주세요&quot;&gt;동기와 비동기에 대해서 설명해주시고 언제 사용하면 좋을지 알려주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;동기는 요청에 대한 결과가 동시에 일어나는 경우를 의미하구요, 비동기는 요청에 대한 결과가 동시에 일어나지 않는 경우를 의미합니다.&lt;/strong&gt;&lt;u&gt;(Javascript의 setTimeOut())&lt;/u&gt; 동기의 경우 프로세스의 순서가 정말 중요한 은행권과 같은 프로세스에서 사용하면 좋을 것 같구요, 비동기는 작업의 순서가 그다지 중요하지 않지만 작업을 빠르게 처리해야하는 환경에서 사용하면 좋을 것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;멀티-스레드-환경에서-비동기가-동기보다-무조건-빠를까요&quot;&gt;멀티 스레드 환경에서 비동기가 동기보다 무조건 빠를까요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;멀티 스레드 환경에서 비동기가 동기보다 빠를 수 있는 확률이 많다는 것은 동의하지만 빠르지 않을 수도 있겠다는 생각이 듭니다.&lt;/strong&gt; 만약 비동기 환경에서 작업간에 공유자원이 많을 경우 동기화 문제를 해결 해야만 합니다. 이러한 경우 지연이 발생하며 비동기 작업이 동기 작업에 비해서 빠르지 않을 수도 있겠다는 생각이 듭니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;process-synchronization&quot;&gt;Process Synchronization&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프로세스-동기화는-왜-필요하나요&quot;&gt;프로세스 동기화는 왜 필요하나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;공유 자원을 참조하는 프로세스 간에 질서 있는 실행을 보장하여 &lt;u&gt;데이터의 일관성을 유지하고자 프로세스 동기화가 필요&lt;/u&gt;합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;critical-section은-무엇인가요&quot;&gt;Critical Section은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;공유 자원을 접근하는 작업을 실행하는 코드 영역을 Critical Section&lt;/strong&gt; 이라고 합니다.&lt;/p&gt;

&lt;h3 id=&quot;race-condition이란-무엇인가요&quot;&gt;Race Condition이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;여러 프로세스가 동시에 공유 자원을 접근하여 조작하고, 그 실행 결과가 접근이 발생한 특정 순서에 의존하는 상황을 경쟁 상황(race condition)이라고 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;critical-section-problem을-해결하기-위한-조건이-무엇일까요&quot;&gt;Critical Section Problem을 해결하기 위한 조건이 무엇일까요?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;특정 프로세스가 Critical Section을 수행하고 있다면 다른 프로세스는 이 Critical Section에 들어오지 못하게 하는 &lt;u&gt;상호 배제(Mutual Exclusion)&lt;/u&gt;&lt;/strong&gt; 조건입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Critical Section 에는 별도의 동작이 없는 프로세스들만 Critical Section 진입 후보로 참여할 수 있다는 조건인 &lt;u&gt;진행(Progress)&lt;/u&gt;&lt;/strong&gt; 입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;특정 프로세스가 Ciritcal Section에 진입 신청 후 받아들여지기까지 기간이 한정되어야 함을 나타내는 &lt;u&gt;한정된 대기(Bounded Waiting)&lt;/u&gt;&lt;/strong&gt; 입니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;critical-section-problem을-해결하기-위한-기법에는-무엇이-있나요&quot;&gt;Critical Section Problem을 해결하기 위한 기법에는 무엇이 있나요?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;하드웨어 기반 해결책인 Lock&lt;/strong&gt;입니다. Critical Section에 진입하기전에 Lock을 얻고, Critical Section에서 빠져 나올 때 Lock을 방출함으로써 프로세스간에 동기화를 유지하는 방법입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;소프트웨어 기반 해결책인 Semaphores&lt;/strong&gt;입니다. 두 개의 프로세스 사이에서 동기화를 유지할 수 있는 이진 세마포와 세 개 이상의 프로세스 사이에서 동기화를 유지할 수 있는 카운팅 세마포가 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;세 번째 해결책은 모니터 입니다. 모니터는 내부에서 프로그래머가 정의한 상호 배제가 보장되는 일련의 연산자 집합을 포함하는 추상화된 데이터 타입입니다.&lt;/strong&gt; 모니터에는 한번에 하나의 프로세스만 들어갈 수 있으며 모니터에 들어가야만 공유 자원에 접근할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;deadlock&quot;&gt;DeadLock&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;교착상태deadlock란-무엇인가요&quot;&gt;교착상태(Deadlock)란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;두 개 이상의 프로세스가 서로 상대방의 작업이 끝나기만을 기다려서 결과적으로 아무도 완료되지 못하는 상태를 가리킵니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;교착상태deadlock가-발생하는-조건은-무엇인가요&quot;&gt;교착상태(Deadlock)가 발생하는 조건은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;교착상태가 발생하려면 4가지의 조건이 필요합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;상호배제(Mutual Exclusion) :&lt;/strong&gt; 한번에 한개의 프로세스만이 공유 자원을 사용할 수 있어야 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;점유대기(Hold and wait)&lt;/strong&gt; : 프로세스가 할당된 자원을 가진 상태에서 다른 자원을 기다려야 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;비선점(No preemption) :&lt;/strong&gt; 프로세스에게 할당된 자원은 사용이 끝날 때까지 강제로 빼앗을 수 없어야 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;환형 대기(Circular Wait) :&lt;/strong&gt; 각 프로세스는 순환적으로 다음 프로세스가 요구하는 자원을 가지고 있어야 합니다. 즉, 이러한 요구는 환형이 되어야 합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;교착상태deadlock을-해결할-수-있는-방법은-무엇인가요&quot;&gt;교착상태(Deadlock)을 해결할 수 있는 방법은 무엇인가요?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;교착 상태의 예방&lt;/strong&gt;  (교착 상태 예방 방법들은 자원 사용의 효율성이 떨어지고 비용이 많이 듭니다.)
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;상호배제 조건의 제거 :&lt;/strong&gt; 한번에 여러 개의 프로세스가 공유 자원을 사용할 수 있도록 합니다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;점유와 대기 조건의 제거 :&lt;/strong&gt; 프로세스가 실행되기 전에 필요한 모든 자원을 할당하여 대기를 없애거나, 자원이 점유되지 않은 상태에서만 자원을 요구하도록 합니다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;비선점 조건의 제거 :&lt;/strong&gt; 비선점 프로세스에 대해 선점 가능한 프로토콜을 만들어 줍니다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;환형 대기 조건의 제거&lt;/strong&gt; : 환형을 없애기 위해 자원 유형에 따라 순서를 매깁니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;교착 상태의 회피&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;자원이 어떻게 요청될지에 대한 추가정보를 제공하도록 요구하는 것으로 시스템에 circular wait가 발생하지 않도록 자원 할당 상태를 검사한다. 교착 상태 회피 알고리즘으로는 &lt;strong&gt;자원 할당 그래프 알고리즘&lt;/strong&gt;과 &lt;strong&gt;은행원 알고리즘&lt;/strong&gt;이 존재한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;교착 상태의 무시&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;예방 혹은 회피 기법을 프로그래밍해서 넣으면 성능에 큰 영향을 미칠 수 있기 때문에 데드락의 발생 확률이 비교적 낮은 경우 교착 상태를 무시한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;교착 상태의 발견&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;교착 상태를 감시/발견을 하는 detection 알고리즘으로 Deadlock 발생을 체크하는 방식을 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;memory-management&quot;&gt;Memory Management&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;swapping에-대해서-알려주실-수-있나요&quot;&gt;Swapping에 대해서 알려주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Swapping이란 CPU 할당 시간이 끝난 프로세스의 메모리를 디스크로 보내고 다른 프로세스를 메모리로 불러 들이는 것을 의미합니다.&lt;/strong&gt; 프로세스를 디스크에서 메모리로 불러오는 과정을 Swap-in, 보조 기억장치로 내보내는 과정을 Swap-out 이라고 합니다.&lt;/p&gt;

&lt;h3 id=&quot;swapping을-하면서-발생할-수-있는-문제점에-대해서-알고-있으시나요&quot;&gt;Swapping을 하면서 발생할 수 있는 문제점에 대해서 알고 있으시나요?&lt;/h3&gt;

&lt;p&gt;네! Swapping을 하면서 발생할 수 있는 대표적인 문제는 &lt;strong&gt;단편화(Fragmentation) 문제&lt;/strong&gt; 입니다. &lt;strong&gt;단편화(Fragmentation)란 프로세스들이 메모리에 적재되고 제거되는 일이 반복되면서 메모리 사이 사이에 사용하지 못할 만큼의 작은 자유공간들을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;단편화fragmentation는-어떻게-나눌-수-있을까요&quot;&gt;단편화(Fragmentation)는 어떻게 나눌 수 있을까요?&lt;/h3&gt;

&lt;p&gt;단편화 종류는 크게 외부 단편화(External Fragmentation)와 내부 단편화(Internal Fragmentation)로 나눌 수 있습니다. &lt;strong&gt;외부 단편화란 메모리에서 프로세스와 프로세스 사이에 남는 공간들을 의미하는 것이구요, 내부 단편화란 프로세스가 사용하는 메모리 공간 내부에서 사용하지 않고 남는 공간들을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;외부-단편화를-해소하기-위한-방법은-무엇이-있을까요&quot;&gt;외부 단편화를 해소하기 위한 방법은 무엇이 있을까요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;외부 단편화를 없애기 위해서 프로세스가 사용하는 메모리 공간들을 한쪽으로 몰아 분산된 자유 공간을 확보하는 방법인 메모리 압축(Memory Compression)이 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;외부-단편화를-해결할-수-있는-또-다른-방법인-페이징-기법에-대해서-들어보셨나요&quot;&gt;외부 단편화를 해결할 수 있는 또 다른 방법인 페이징 기법에 대해서 들어보셨나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;페이징(Paging) 기법이란 물리 메모리를 Frame이라는 고정 크기로 분리하고, 논리 메모리는 페이지라 불리는 고정 크기의 블록으로 분리하는 기법입니다.&lt;/strong&gt;  즉, 하나의 프로세스가 사용하는 공간을 여러개의 페이지로 나뉘어서 논리 메모리에서 관리하고, 개별 페이지는 순서에 상관없이 물리 메모리의 프레임에 맵핑되어 저장하는 방법입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;페이징 기법을 통해서 외부 단편화는 없앨 수 있지만, 페이지의 크기는 정해져 있기 때문에 내부 단편화는 발생할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;세그멘테이션이란-무엇일까요&quot;&gt;세그멘테이션이란 무엇일까요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;세그멘테이션(Segmentation)은 프로세스를 물리적 크기의 단위가 아니라 &lt;u&gt;논리적 내용의 단위인 세그먼트로 분할&lt;/u&gt;하여 메모리에 저장하는 방법입니다.&lt;/strong&gt; 논리적 내용의 단위로 분할된 세그먼트는 내부 단편화는 방지할 수 있지만 세그먼트별로 서로 단위가 다르기 때문에 외부 단편화가 발생하는 문제점이 존재합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;virtual-memory&quot;&gt;Virtual Memory&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;가상-메모리란-무엇인가&quot;&gt;가상 메모리란 무엇인가?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;가상 메모리를 통해 실제 물리 메모리 개념과 사용자의 논리 메모리 개념을 분리해서 프로세스 전체가 메모리에 올라오지 않더라도 프로그램의 실행이 가능하도록 하는 기법을 말합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;가상-메모리를-도입할-시-어떠한-효과를-얻을-수-있나요&quot;&gt;가상 메모리를 도입할 시 어떠한 효과를 얻을 수 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;가상 메모리를 통해 프로그램의 일부분만 물리 메모리에 올릴 수 있게 되었고 이를 통해 물리 메모리 크기에 제약을 받지 않게 되었습니다.&lt;/strong&gt; 결국 더 많은 프로그램을 동시에 실행할 수 있게 되었고, swap에 필요한 입출력이 줄었기 때문에 프로그램들이 빠르게 실행되어지는 효과를 얻을 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;가상-주소-공간은-무엇인가요&quot;&gt;가상 주소 공간은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;가상 주소 공간이란 한 프로세스가 물리 메모리에 저장되는 논리적인 모습을 가상메모리에 구현한 공간을 의미합니다.&lt;/strong&gt; 프로세스가 요구하는 메모리 공간을 물리 메모리가 아닌 가상 메모리에서 제공함으로써 현재 직접적으로 필요치 않는 메모리 공간은 실제 물리 메모리에 올리지 않는 것으로 메모리를 절약할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;tip&quot;&gt;Tip&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;가상 메모리는 시스템 라이브러리가 여러 프로세스들 사이에서 공유되어질 수 있도록 합니다.&lt;/strong&gt; 실제 물리 메모리는 공유되어지지만 각 프로세스는 각자 자신의 주소 공간처럼 인식합니다.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;프로세스들이 메모리를 공유하는 것을 가능하게 하고, 프로세스들은 공유 메모리를 통해 통신할 수 있습니다.&lt;/strong&gt; 이 또한 각 프로세스들은 공유 메모리를 각자 자신의 주소 공간처럼 인식하지만, 실제 물리 메모리는 공유되고 있습니다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;요구-페이징demand-paging이란-무엇인가요&quot;&gt;요구 페이징(Demand Paging)이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;요구 페이징(Demand Paging)이란 가상 메모리 시스템에서 많이 사용하는 메모리 관리 기법 중 하나로 &lt;strong&gt;프로그램 실행 시작 시 초기에 필요한 페이지만 메모리에 Load하고 이후 실행 과정에서 페이지들이 실제로 필요할 때만 Load하는 방식을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;페이지-교체-알고리즘이란-무엇인가요&quot;&gt;페이지 교체 알고리즘이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;프로그램 실행시 모든 페이지가 물리 메모리에 올라오지 않기 때문에 실행 과정에서 프로세스의 동작에 필요한 페이지를 요청하는 과정이 필요합니다. &lt;strong&gt;페이지를 요청하는 과정에서 페이지 부재(page fault)가 발생하게 되면, 원하는 페이지를 디스크에서 가져오게 되는데 물리 메모리가 모두 사용중인 상황이라면 페이지 교체가 이루어져야 합니다. 이러한 상황에서 사용하는 알고리즘을 페이지 교체 알고리즘이라고 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;페이지-교체-과정에-대해서-아시나요&quot;&gt;페이지 교체 과정에 대해서 아시나요?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;디스크에서 필요한 페이지의 위치를 찾는다.&lt;/li&gt;
  &lt;li&gt;물리 메모리에서 빈 페이지 프레임을 찾는다.
    &lt;ol&gt;
      &lt;li&gt;빈 프레임이 없을 경우 페이지 교체 알고리즘을 통해 희생될(victim) 페이지를 고른다.&lt;/li&gt;
      &lt;li&gt;희생될 페이지를 디스크에 기록하고, 관련 페이지 테이블을 수정한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;새롭게 비워진 페이지 테이블 내 프레임에 새 페이지를 읽어오고, 프레임 테이블을 수정한다.&lt;/li&gt;
  &lt;li&gt;사용자 프로세스 재시작&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;페이지-교체-알고리즘에-대해서-알고계신-것-모두-말씀해주세요&quot;&gt;페이지 교체 알고리즘에 대해서 알고계신 것 모두 말씀해주세요.&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;FIFO(First-in-First-out) 페이지 교체 :&lt;/strong&gt; 먼저 메모리에 들어온 페이지 순서대로 페이지를 교체한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;최적(Optimal) 페이지 교체 :&lt;/strong&gt; 메모리에서 앞으로 가장 오랫동안 사용되지 않을 페이지를 찾아 교체한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LRU(Least Recently Used) 페이지 교체 :&lt;/strong&gt; 메모리에서 가장 오랫동안 사용되지 않은 페이지를 선택하여 교체한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LFU(Least Frequently Used) 페이지 교체 :&lt;/strong&gt; 메모리에서 가장 참조되지 않은 페이지를 선택하여 교체한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MFU(Most Frequently Used) 페이지 교체 :&lt;/strong&gt; 메모리에서 가장 많이 참조되는 페이지를 선택하여 교체한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;caching&quot;&gt;Caching&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;캐싱caching이란-무엇인가요&quot;&gt;캐싱(Caching)이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;캐싱이란 특정 데이터를 빠르게 접근할 수 있도록 임시적인 저장 위치에 데이터를 저장해두는 방법을 의미합니다.&lt;/strong&gt; 캐싱을 통해서 속도가 빠른 장치와 느린 장치 사이에서 발생하는 병목 현상을 줄일 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;캐싱-작업시-가장-신경써야-하는-문제는-무엇인가요&quot;&gt;캐싱 작업시 가장 신경써야 하는 문제는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;캐시의 역할을 극대화 시키기 위해서는 얼마나 데이터가 많이 참조 되는지를 고려해서 많이 참조되는 데이터들을 캐싱해야 합니다. 즉, 적중률(hit ratio)를 극대화 시켜야 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;캐시-적중률hit-ratio을-어떻게-극대화-시킬-수-있을까요&quot;&gt;캐시 적중률(hit ratio)을 어떻게 극대화 시킬 수 있을까요?&lt;/h3&gt;

&lt;p&gt;적중률(hit ratio)을 극대화 시키기 위해서 &lt;strong&gt;지역성(Locality)의 원리&lt;/strong&gt;를 사용할 수 있습니다. &lt;strong&gt;지역성의 원리 즉, Locality Principle이란 메모리 내의 정보는 균일하게 Access 되는 것이 아닌 &lt;u&gt;어느 한 순간에 특정 부분이 집중적으로 참조&lt;/u&gt;된다는 원리입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;locality는-어떻게-나눌-수-있나요&quot;&gt;Locality는 어떻게 나눌 수 있나요?&lt;/h3&gt;

&lt;p&gt;Locality는 크게 시간 지역성(Temporal Locality)과 공간 지역성(Spatial Locality)으로 나뉩니다. &lt;strong&gt;시간 지역성이란 최근에 참조된 메모리의 특정 주소는 곧 다시 참조된다는 특성을 의미하구요, 공간 지역성이란 참조된 메모리의 주소와 인접한 주소의 내용이 곧 다시 참조된다는 특성을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;caching-line이란-무엇인가요&quot;&gt;Caching Line이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;캐시에 데이터를 저장할 때 특정 자료구조를 사용하여 묶음으로 저장하게 되는데 이를 &lt;u&gt;캐싱 라인(Caching Line)&lt;/u&gt;이라고 합니다.&lt;/strong&gt; 프로세스는 다양한 주소에 있는 데이터를 사용하므로 빈번하게 사용하는 데이터의 주소 또한 흩어져 있습니다. 따라서 캐시에 저장하는 데이터에는 데이터의 메모리 주소 등을 기록해 둔 태그를 달아놓을 필요가 있다. 이러한 태그들의 묶음을 캐싱 라인이라고 하고 메모리로부터 데이터를 가져올 때도 캐싱 라인을 기준으로 가져옵니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;캐싱 라인의 종류&lt;/strong&gt;&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Full Associative&lt;/li&gt;
    &lt;li&gt;Set Associative&lt;/li&gt;
    &lt;li&gt;Direct Map&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sun, 28 Feb 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2021/02/28/NAVER-Practical-Interview-Preparation-2.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2021/02/28/NAVER-Practical-Interview-Preparation-2.html</guid>
        
        <category>Operating-System</category>
        
        <category>OS</category>
        
        <category>Thread</category>
        
        <category>Process</category>
        
        <category>Async</category>
        
        <category>Sync</category>
        
        <category>Concurrent-Control</category>
        
        <category>Memory</category>
        
        
        <category>Interview</category>
        
      </item>
    
      <item>
        <title>[실무 면접 준비 - 1] 인턴 프로젝트 (Booking Recommendation System)</title>
        <description>&lt;hr /&gt;

&lt;h1 id=&quot;booking-recommendation-system&quot;&gt;Booking Recommendation System&lt;/h1&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;인턴-기간-동안에-개발한-예약-추천-시스템에-대해-저희에게-간단히-설명해-주실-수-있나요&quot;&gt;인턴 기간 동안에 개발한 예약 추천 시스템에 대해 저희에게 간단히 설명해 주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;이번 인턴 기간 동안에 개발한 예약 추천 시스템은 &lt;strong&gt;과거 예약 데이터를 사용해 네이버 예약 사용자들이 특정 업체 선택 시 선택한 업체와 가장 유사한 업체, 선택한 업체의 사용자들이 가장 선호하는 업체와 업종을 추천해 주는 시스템&lt;/strong&gt;을 만들었습니다.&lt;/p&gt;

&lt;h3 id=&quot;인턴-기간-동안에-개발한-추천-시스템을-통해-얻은-점이-있나요&quot;&gt;인턴 기간 동안에 개발한 추천 시스템을 통해 얻은 점이 있나요?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DB부터 Front-End까지의 End-To-End 개발로 전체적인 시스템 아키텍처에 대한 이해가 높아질 수 있는 계기가 되었습니다.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;지금까지 많은 프로젝트를 진행하면서 서비스에 필요한 서버 단이나 DB 단만 개발해 왔습니다. 하지만 이번 인턴 기간을 통해 시스템을 처음부터 끝까지 End-To-End로 개발해 전체적인 시스템 아키텍처에 대한 이해가 높아질 수 있었습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;서비스를 만들기 위해 시스템의 구현 뿐만 아니라 운영도 아주 중요한 요소라는 점을 깨닫는 계기가 되었습니다.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;학생 때는 시스템이 정상동작하는 것만 신경썻는데, 막상 인스턴스가 많은 시스템을 구현해보니 DB Lock에 의한 일시적인 에러나 서버 인스턴스에 문제가 생기는 등 운영상의 이슈가 발생했습니다. 예전에는 해당 이슈가 일어난 인스턴스들을 재시작하면 문제가 해결되는 줄 알았으나 이는 일시적인 문제 해결일 뿐이고, 서비스를 위해서는 시스템의 정상적인 운영도 꼭 필요하다는 점을 깨닫게 되었습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;기본기의 중요성에 대해서 깨닫는 계기가 되었습니다.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;추천 시스템을 개발하면서 Spring Boot Web을 제외한 대부분의 인스턴스들은 처음 학습하였습니다. 새로운 기술들을 빠르게 학습하고 적용하기 위해서는 전체 시스템을 이해할 수 있는 능력인 기본기가 가장 중요하다고 느끼게 되었고 현재에도 운영체제(공룡책)을 정독하고 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;추천-시스템-개발간에-가장-어려웠던-점은-무엇인가요&quot;&gt;추천 시스템 개발간에 가장 어려웠던 점은 무엇인가요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;추천 시스템을 개발하면서 가장 어려웠던 점은 추천 알고리즘을 기획하고 설계했던 부분이 가장 어려웠던 것 같습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;제 서비스에서 추천 알고리즘의 성능 평가는 사용자들의 객관적인 지표가 존재하지 않기 때문에 주관적으로 평가가 되어지는데, 좋은 추천 알고리즘을 위해서는 대부분의 사람들이 선호할만한 업체나 업종을 추천하는 알고리즘을 개발했어야만 했고, 이러한 알고리즘을 개발하기 위해서 사용되어지는 모든 로직과 상수값, 기준점들이 다 마땅한 이유가 있어야만 했습니다. 이러한 고민 속에서도 추천 알고리즘이 제 자신만의 색깔을 잃어버리면 안됬었습니다. &lt;strong&gt;종합해보자면 저는 좀 더 특별하고, 재미있고, 성능 좋은 알고리즘을 만들기 위해서 많이 고민했던 것 같습니다.&lt;/strong&gt; 당연히 추천 서비스는 처음 해보는 분야라서 추천 알고리즘의 기획과 설계가 많이 어려웠지만 A4용지로 20장도 넘게 그림을 그리는 것을 통해서 머리속의 생각들을 정리할 수 있었고 이를 통해 재미있고 성능 좋은 알고리즘이 나올 수 있었던 것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;추천-시스템을-개발하시면서-분명히-시간이-부족했을텐데-어떠한-부분을-더-챙기고-싶었나요&quot;&gt;추천 시스템을 개발하시면서 분명히 시간이 부족했을텐데… 어떠한 부분을 더 챙기고 싶었나요?&lt;/h3&gt;

&lt;p&gt;더 개발하고 싶은 부분은 너무 많았습니다. 추천 알고리즘 개선부터 Redis나 Batch의 장애 대응 고도화, 배치에 병렬 프로그래밍 도입 등 다양한 부분을 더 개발 하고 싶었는데, &lt;strong&gt;일단 기간 내에 서비스를 완성하는 것이 가장 중요하니 어느 정도 개발된 부분에 대해서는 만족했어야만 했습니다. 이러한 많은 부분 중에서 그래도 가장 관심있는 부분은 장애 대응 고도화입니다.&lt;/strong&gt; 현재 Batch나 Redis에 장애 대응 전략을 세워서 개발하였지만 아직 부족한 부분이 몇가지 존재해서 현재에도 계속 공부하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;어떻게-장애-대응을-고도화-시키고-싶으시나요&quot;&gt;어떻게 장애 대응을 고도화 시키고 싶으시나요?&lt;/h3&gt;

&lt;p&gt;일단 현재 Batch Process에 장애 대응을 위해서 Skip, Retry, Back-off 전략을 구현한 상태이며 &lt;strong&gt;Batch Process 실패시 알람을 보내는 클라이언트 부분을 더 개발하고 싶습니다.&lt;/strong&gt; 두 번째로는 현재 Redis 장애 대응을 위해 Master-Replica 운영 모델을 도입해서 적용 했는데, 좀 더 &lt;strong&gt;자동화 된 장애 대응을 위해서 Redis Sentinel이나 Redis Cluster 운영 모델을 도입하고 싶습니다. 아니면 Health Checker도 괜찮구요.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;health-checker란-무엇인가요&quot;&gt;Health Checker란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Health check는 서버의 상태를 주기적으로 체크하여 서버의 상태가 Health Checker와 통신이 불가능할 경우 서버에 특정 조치를 취해 서비스를 원활하게 제공하기 위해 이용되는 방법입니다.&lt;/strong&gt; 서버의 상태를 주기적으로 점검하는 방법으로는 Link, ARP, ICMP, TCP, Script 방식이 있으며, Health Checker에서는 일정 시간 간격으로 서버에 Open과 Close를 반복적으로 진행하여 서비스 제공 가능 유무를 점검합니다. 아마 제가 구현하고 싶은 방식은 가장 익숙한 &lt;strong&gt;TCP 방식&lt;/strong&gt;이지 않을까 생각하고 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;헬스체크를 위해 사용되는 패킷의 종류, 패킷을 전송하는 주기와 서버의 응답을 기다리는 시간, 응답이 수신 되지 않았을 때 다시 패킷을 보내주는 횟수는 사용자의 설정에 따라 동작합니다. 전송 주기가 짧을 수록 서버의 장애 여부를 정확하게 파악할 수 있지만, 이는 네트워크의 부하가 될 수 있음으로 Context를 잘 고려해서 설정 해야만 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;네이버-예약에-추천-시스템이-왜-필요할까요&quot;&gt;네이버 예약에 추천 시스템이 왜 필요할까요?&lt;/h3&gt;

&lt;p&gt;현 시대에 사는 사람들은 인터넷에 너무나 많은 정보가 존재하기 때문에 자신이 어떠한 정보를 원하는지 조차도 잘 알지 못합니다. 이러한 상황은 네이버 예약 사용자들에게도 동일하게 발생한다고 생각합니다. &lt;strong&gt;너무나 많은 업체 및 상품들이 등록되어 있어서 사용자들은 어떤 업체를 예약해야될지 잘 알지 못합니다. 이러한 불편함을 해결해주고자 수 많은 업체를 필터링해서 사용자가 선호할만한 업체를 추천해주는 시스템이 네이버 예약에 꼭 필요하다고 생각합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;추천-시스템의-기대-효과는-무엇인가요&quot;&gt;추천 시스템의 기대 효과는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;추천 시스템의 대표적인 기대 효과로는 네이버 예약 사용자들의 &lt;strong&gt;서비스 만족도 증가 효과&lt;/strong&gt;를 기대할 수 있구요, 또한 추천 시스템으로부터 발생한 &lt;strong&gt;다양한 지표를 활용해서 새로운 이벤트를 기획&lt;/strong&gt;할 수도 있습니다. 이 뿐만 아니라 평소라면 검색하지 못할 다양한 업체를 추천 시스템을 통해서 추천해줌으로써 &lt;strong&gt;사용자의 예약의 폭 확장&lt;/strong&gt;을 불러일으킬 수도 있습니다. &lt;strong&gt;결국 추천 시스템을 통해 예약 서비스의 성장을 이룰 수 있다고 생각합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;여러-추천-대상-중-왜-업체를-추천하게-되었나요&quot;&gt;여러 추천 대상 중 왜 업체를 추천하게 되었나요?&lt;/h3&gt;

&lt;p&gt;예약 추천 시스템을 기획해 보았을 때 추천 대상은 크게 업종과 업체, 상품으로 나눌 수 있었습니다. 이들간의 관계를 살펴보면 업종은 업체를 포함하고 업체는 상품을 포함합니다. &lt;strong&gt;업종을 추천하게 된다면 사용자들은 같은 업종에 속한 수 많은 업체 중 특정 업체를 선택해야만 하는 불편함이 발생했고, 상품을 추천하기에는 동일한 업체임에도 불구하고 등록된 상품들의 다양성이 너무 심해서 알고리즘의 성능이 좋지 않을것 같았습니다.&lt;/strong&gt; 이러한 이유에서 업체 추천이 가장 적절하다고 생각해서 업체를 추천하는 시스템을 기획하게 되었습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;패치&quot;&gt;패치&lt;/h3&gt;

  &lt;p&gt;정지 없이 서버 패치를 할 수 있는 방법&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;새 버전으로 준비된 서버들을(site B) 미리 준비한다.&lt;/li&gt;
    &lt;li&gt;기존 서버로의 추가 유입을 막고(Drain) 새 버전 서버로 유입되도록 바꿉니다(Redirect)&lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Draining과 Redirecting을 계속하여 두 개의 Site를 뒤집는(Flip) 방식으로 서비스의 중단 없이 패치를 적용합니다.&lt;/p&gt;

      &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation1-3.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;Flip이 완료되면 모든 접속이 새 Site로 붙게되며 기존 Site는 deactivate 됩니다.&lt;/li&gt;
  &lt;/ol&gt;

  &lt;h3 id=&quot;장애&quot;&gt;장애&lt;/h3&gt;

  &lt;p&gt;&lt;strong&gt;장애는 피할 수 없다. 장애에 견디고 복구 가능한지가 중요하다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;모든 서비스는 Health Check 프로토콜을 구현하고 있습니다. Health Check가 실패한 경우를 모니터링하여 장애를 감지합니다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;SPOF&lt;/strong&gt; 를 피하기 위해 동종 서비스들은 개념적으로 Pool에 담겨 있고 장애 감지시 해당 노드가 Pool 에서 제거됩니다.&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;단일 장애점(single point of failure, SPOF)은 시스템 구성 요소 중에서, 동작하지 않으면 전체 시스템이 중단되는 요소를 말한다&lt;/strong&gt;&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;그리고 서비스 종류별 Pool을 두고 있습니다.&lt;/p&gt;

  &lt;p&gt;만약 예상치 못한 이유로 서비스 전체나 상당부분이 불안정한 경우가 발생한다면 서버들을(Site) 다시 배포합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;recommendation-algorithm&quot;&gt;Recommendation Algorithm&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;업체와-업종-추천을-위해서-사용한-알고리즘에-대해-저희에게-알려주실-수-있나요&quot;&gt;업체와 업종 추천을 위해서 사용한 알고리즘에 대해 저희에게 알려주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;일단 수 많은 업체와 업종 중 특정 대상을 추천하려면 추천 대상간에 랭킹 작업이 필요합니다. 저는 랭킹 작업을 진행하기 위해서 랭킹 점수를 업체 간의 접근성과 유사도, 만족도의 곱으로 정의했고 업체간의 유사도를 구하기 위해서 두 가지의 추천 알고리즘을 사용하였습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;선택한 업체와 가장 유사한 업체를 추천하기 위해 업체와 속성간의 관계를 기반으로 업체를 추천하는 알고리즘인 키워드 기반의 Content Based Filtering을 사용했구요. 선택한 업체의 사용자들이 가장 선호하는 업체를 추천하기 위해 업체와 사용자의 관계를 기반으로 하는 알고리즘인 Collaborative Filtering을 사용하였습니다.&lt;/p&gt;

&lt;h3 id=&quot;키워드-기반의-content-based-filtering이란-무엇인가요&quot;&gt;키워드 기반의 Content Based Filtering이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;일단 Content Based Filtering이란 업체와 속성간의 관계를 기반으로 가장 유사한 업체를 필터링하는 알고리즘을 의미합니다.&lt;/strong&gt; 저는 업체 정보를 분석해 키워드로 나눈 뒤 업체들의 속성을 산출했으며 산출된 속성들과 업체들간의 관계를 행렬로써 표시해 업체간의 유사도를 구할 수 있었습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Content Based Filtering의 한계점으로는 콘텐츠가 많아 질수록 속성을 추출하기 어려워진다는 문제점이 존재한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;collaborative-filtering이란-무엇인가요&quot;&gt;Collaborative Filtering이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Collaborative Filtering이란 사용자와 업체간의 관계를 기반으로 사용자들이 가장 선호하는 업체를 필터링하는 알고리즘 입니다.&lt;/strong&gt; 과거 예약 데이터를 사용하면 특정 업체를 예약한 사용자들을 알 수 있고, 사용자들의 특정 업체 선호도를 알 수 있습니다. 이러한 관계를 행렬로써 표시해 업체간의 유사도를 구할 수 있었습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;협업 필터링의 한계점으로 &lt;strong&gt;콜드 스타트, 계산 효율 저하, 롱 테일 등의 문제&lt;/strong&gt;가 있음&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;업종-추천은-어떠한-방법으로-개발-하셨나요&quot;&gt;업종 추천은 어떠한 방법으로 개발 하셨나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;업종 추천을 위해서 시간, 순서, 기간에 따른 사건의 규칙을 분석하는 방법인 순차 분석을 사용하였습니다.&lt;/strong&gt; 순차 분석을 위해 특정 업체를 예약한 사용자들의 데이터를 분석 했구요, 사용자들의 개인별 업체 예약 시점을 기준으로 특정 기간 내의 예약 데이터를 분석함으로써 예약한 업체가 속해있는 업종과 다른 업종이 특정 기간 내에 얼마나 자주 예약되는지를 산출 할 수 있었습니다. 이러한 관계를 통해 업종간의 관계를 산출할 수 있었구요 특정 업종에 속한 업체 선택시 관련된 업종을 추천할 수 있는 알고리즘을 설계할 수 있었습니다.&lt;/p&gt;

&lt;h3 id=&quot;추천-알고리즘의-성능-문제나-cold-start-문제를-해결하기-위해서-hybrid-filtering은-고려하지-않았나요&quot;&gt;추천 알고리즘의 성능 문제나 Cold Start 문제를 해결하기 위해서 Hybrid Filtering은 고려하지 않았나요?&lt;/h3&gt;

&lt;p&gt;물론 Hybrid Filtering의 도입도 검토해 보았습니다. Hybrid Filtering은 Collaborative Filtering과 Content Based Filtering으로 표현되어지기 때문에 Cold Start나 Long Tail 등의 문제를 해결할 수 있습니다. 하지만 제 서비스는 사용자 없기 때문에 알고리즘의 성능은 개인의 주관으로 평가되어질 수 밖에 없고 제가 적절하다고 생각했던 알고리즘이 남들이 보기에는 적절하지 않을 수도 있겠다고 생각이 들었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이러한 이유에서 선택한 업체와 유사하면서 선택한 업체의 사용자들이 선호하는 업체를 추천하는 것 보다는 이를 분리해서 선택한 업체와 유사한 업체, 선택한 업체의 사용자들이 선호하는 업체로 나누는 것이 인턴 평가 때 팀원분들이 업체 추천에 대해서 더 쉽게 공감할 수 있겠다고 생각해서 Hybrid FIltering 대신 Content Based Filtering과 Collaborative FIltering으로 나누어서 개발하였습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;추천-알고리즘-대신-머신러닝을-사용하지-않은-이유는-무엇인가요&quot;&gt;추천 알고리즘 대신 머신러닝을 사용하지 않은 이유는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;일단 머신러닝을 사용하지 않은 가장 큰 이유는 시간적인 문제 때문에 사용하지 않았습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;총 6주간의 인턴 기간 동안 추천 서비스 기획과 설계에 2주를 사용하고 남은 4주 동안에 추천 시스템을 구현하기 위해 수 많은 기술들을 배우고 적용했어야만 했습니다. 머신러닝을 한번도 접해보지 않은 상황에서 알고리즘을 세우고, 데이터를 전처리하고 학습시켜 모델을 만들고 이를 테스트하고 실제 프로세싱에 적용하기에는 시간이 부족할 거라고 생각했습니다. &lt;strong&gt;또한 로직으로써 추천 알고리즘을 풀어내도 충분히 재미있고 성능 좋은 결과를 낼 수 있을것 같다는 자신감도 조금 있었구요!!&lt;/strong&gt; 이러한 이유에서 머신러닝 대신 추천 알고리즘을 사용했습니다.&lt;/p&gt;

&lt;h3 id=&quot;형태소-분석기인-komoran을-사용한-이유는-무엇인가요&quot;&gt;형태소 분석기인 KOMORAN을 사용한 이유는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;업체와 속성간의 관계 행렬을 구하기 위해 업체 정보를 형태소 분석을 통해 키워드로 만들고 싶어서 형태소 분석기인 KOMORAN을 사용했습니다.&lt;/strong&gt; 또한 KOMORAN은 Maven Repository에 등록되어 있기 때문에 간단히 메이븐 설정 파일을 수정하는 것 만으로도 쉽게 프로젝트에 가져올 수 있다는 장점이 있어서 KOMORAN을 사용하였습니다.&lt;/p&gt;

&lt;h3 id=&quot;cosine-similarity를-사용한-이유는-무엇인가요&quot;&gt;Cosine Similarity를 사용한 이유는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;추천 알고리즘을 사용한다면 업체와 속성 또는 사용자 간의 관계를 벡터로 표현할 수 있습니다. 이러한 벡터간의 유사도 즉, 업체간의 유사도를 구하기 위해 Cosine Similarity를 사용했으며, 이는 벡터의 크기가 아닌 방향의 유사도를 판단하는 함수입니다.&lt;/strong&gt; 실제로 벡터간의 크기의 유사도를 판단하는 방법인 Euclidean, Manhattan, Minkowski Distance 방법보다 Cosine Similarity가 제 로직에서는 훨씬 성능이 좋았습니다.&lt;/p&gt;

&lt;h3 id=&quot;fasttext를-사용한-이유는-무엇인가요&quot;&gt;FastText를 사용한 이유는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;업체와 속성간의 관계 행렬을 구하기 위해 텍스트 유사도가 필요했었고, 텍스트 유사도를 구하기 위해 텍스트를 백터로 임베딩할 필요가 있었습니다. &lt;strong&gt;즉, 텍스트를 백터로 임베딩 하기 위해서 텍스트의 표현 및 분류를 학습할 수 있도록 하는 오픈 소스 라이브러리인 FastText를 사용했으며, 미리 한국어로 학습된 모델을 사용했습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;알고리즘-vs-모델&quot;&gt;알고리즘 vs 모델&lt;/h3&gt;

  &lt;p&gt;&lt;strong&gt;알고리즘&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;어떤 문제의 해결을 위하여 입력된 자료를 토대로 하여 원하는 출력을 유도하여 내는 규칙&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;모델&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;주어진 데이터를 가지고 알고리즘을 통해서 학습을 시켜서 모델을 도출&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;알고리즘 : y = wx + b&lt;/li&gt;
    &lt;li&gt;모델 : y = 2x + 2 (w와 b를 머신러닝이 구해준다.)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;postgresql&quot;&gt;PostgreSQL&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;postgresql을-사용한-이유가-있으시나요&quot;&gt;PostgreSQL을 사용한 이유가 있으시나요?&lt;/h3&gt;

&lt;p&gt;수 많은 관계형 DBMS 중 PostgreSQL만을 사용하게 된 이유는 없습니다. MSSQL이나 MySQL, MariaDB등 다양한 RDBMS를 고려해보기도 했는데요, 일단 운영 데이터를 가져와서 사용해야 하기 때문에 RDBMS는 무조건적으로 사용해야 했었고 그렇다면 &lt;strong&gt;오픈 소스임에도 불구하고 다른 DB에 비해서 좋은 성능과 다양한 기능을 제공해주는 PostgreSQL을 사용해보면 어떨까? 하는 생각에 PostgreSQL을 사용하게 되었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;postgresql의-특징에-대해서-알고-있으신가요&quot;&gt;PostgreSQL의 특징에 대해서 알고 있으신가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;일단, 오픈 소스임에도 불구하고 좋은 성능과 다양한 기능을 제공해주는 것으로 알고 있습니다.&lt;/strong&gt; Microsoft Azure VM 환경에서 여러 DB간에 단순 쿼리 성능을 비교한 지표를 본적이 있는데요 물론 Oracle DB에 비해서는 PostgreSQL의 쿼리 성능이 떨어지긴 하지만 다른 DB에 비해서는 확실히 성능이 좋다는 것을 볼 수 있었습니다. &lt;strong&gt;기능적인 측면에서도 신뢰도를 최우선으로 하여 다양한 인덱싱 기법과, 트랜잭션 및 ACID, 동시성 성능을 높여주는 MVCC 기능, 다양하고 유연한 REPLICA 방식 지원, 다양한 언어에 제공되는 인터페이스, 잘 만든 문서나 메뉴얼 등을 지원해주는 것으로 알고 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;어떠한-인덱싱-기법을-지원해주는가요&quot;&gt;어떠한 인덱싱 기법을 지원해주는가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;PostgreSQL은 기본적으로 B-Tree 인덱스를 지원하구요, 이 뿐만 아니라 복합 인덱스, GIN(Generalized Inverted Index), Gist(Generalized Inverted Search Tree) 인덱스 타입을 제공해주는 것으로 알고 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;동시성-성능을-높여주는-mvcc-기능은-뭔가요&quot;&gt;동시성 성능을 높여주는 MVCC 기능은 뭔가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MVCC란 Multi-Version Concurrency Control의 줄임말로써, 동시 접근을 허용하는 데이터베이스에서 동시성을 제어하기 위해 사용하는 방법 중 하나라고 알고 있습니다.&lt;/strong&gt; PostgreSQL에 접근하는 사용자는 접근한 시점의 데이터베이스 Snapshot을 읽고, 데이터에 대한 변경이 완료될 때 이를 새로운 버젼으로 가정해 이전 버젼의 데이터와 비교해서 변경된 내용을 기록하는 방법으로 동시성을 제어합니다. 이를 MVCC라고 하구요.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Lock이 존재하지 않기 때문에 일반적인 RDBMS보다 확실히 빠르게 작동하지만, 버젼 이슈가 생길 수 있다는 점을 주의해야만 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;

  &lt;h3 id=&quot;postgresql-1&quot;&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;오라클에 준하는 기능을 가지고 있다.&lt;/li&gt;
    &lt;li&gt;MVCC, Point in Time Recovery 등의 특징이 존재한다.&lt;/li&gt;
    &lt;li&gt;INSERT, SELECT, UPDATE 쿼리 성능이 비교적 좋은 편이다.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation1-1.png&quot; style=&quot;width:90%&quot; /&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;PostgreSQL Instance Objects Hierarchy Architecture&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation1-2.png&quot; style=&quot;width:90%&quot; /&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Oracle구조와 가장 유사한 DB이다.&lt;/li&gt;
    &lt;li&gt;성능도 비슷하다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;redis&quot;&gt;Redis&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;추천-시스템에서-redis를-사용하신-이유가-무엇인가요&quot;&gt;추천 시스템에서 Redis를 사용하신 이유가 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Redis를 사용하게 된 대표적인 이유는 인메모리 Key-Value 데이터 저장소로써, 추천 데이터를 캐싱하기 위해서 사용하였습니다.&lt;/strong&gt; 뿐만 아니라 Sorted Set과 같은 다양한 자료구조도 지원해주고, Slave-Replica나 Redis Sentinel과 같은 여러 운영 모델도 지원해주기 때문에 시스템을 더 안정적이고 성능 좋게 만들고 싶어서 Redis를 사용하게 되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;캐싱caching이란-무엇인가요&quot;&gt;캐싱(Caching)이란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;캐싱이란 특정 데이터를 빠르게 접근할 수 있도록 임시적인 저장 위치에 데이터를 저장해두는 방법을 의미합니다.&lt;/strong&gt; 캐싱을 통해서 속도가 빠른 장치와 속도가 느린 장치 사이에서 발생하는 병목 현상을 줄일 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;병목(bottleneck) 현상은 전체 시스템의 성능이나 용량이 하나의 구성 요소로 인해 제한을 받는 현상을 말합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;레디스의-key---value-구조는-어떻게-잡으셨나요&quot;&gt;레디스의 Key - Value 구조는 어떻게 잡으셨나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Redis에 데이터를 저장하기 위한 키는 크게 키워드 기반의 업체 추천과, 사용자 기반의 업체 추천, 업종 추천, 업종별 업체 추천으로 나누었구요 이들 모두 계층적으로 구성하였습니다.&lt;/strong&gt; &lt;strong&gt;Value는 추천 업체 아이디와 추천 점수를 Json 형태의 문자열로써 저장하였습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;추천-데이터-저장을-위해-어떠한-자료구조를-사용하셨나요&quot;&gt;추천 데이터 저장을 위해 어떠한 자료구조를 사용하셨나요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;추천 데이터를 저장하기 위해 SortedSet 자료구조를 사용하였습니다.&lt;/strong&gt; 특정 업체나 업종의 추천 대상들을 저장하기 위해서 Set이나 List와 같은 자료구조를 사용해야만 했으며, 레디스에 저장시 추천 점수별로 정렬 되면 매번 어플리케이션 레이어에서 부담해야하는 정렬 작업이 줄어들어 훨씬 성능면에서 좋아질 것 같아서 SortedSet 자료구조를 사용했으며 정렬을 위한 score는 추천 점수를 사용하였습니다.&lt;/p&gt;

&lt;h3 id=&quot;redis의-운영-모델에-대해서-설명해주세요&quot;&gt;Redis의 운영 모델에 대해서 설명해주세요.&lt;/h3&gt;

&lt;p&gt;레디스 운영 모델은 크게&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;하나의 Redis 인스턴스만을 사용하는 Standalone 모델,&lt;/li&gt;
  &lt;li&gt;Master 인스턴스의 데이터를 비동기적으로 여러개의 Replica 인스턴스로 복제하는 Master - Replica 모델,&lt;/li&gt;
  &lt;li&gt;레디스의 높은 고가용성을 위해 모니터링, 알림, 자동화 된 장애 대응을 지원하는 Redis Sentinel 모델,&lt;/li&gt;
  &lt;li&gt;다양한 장애 대응 및 파티셔닝을 제공하는 Redis Cluster 모델 등&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다양한 운영 모델이 존재합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;데이터-분산-방법&quot;&gt;&lt;strong&gt;데이터 분산 방법&lt;/strong&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Application&lt;/strong&gt;
      &lt;ul&gt;
        &lt;li&gt;Consistent Hashing
          &lt;ul&gt;
            &lt;li&gt;&lt;strong&gt;일관된 해싱&lt;/strong&gt;(Consistent hashing)은 웹서버의 개수가 변동하는 가운데 요청을 분산하는 방법을 말한다. 해시테이블의 크기가 변할 때, 평균적으로 K/n의 키만 재매핑되면 된다.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;Sharding (Horizontal Partitioning)
          &lt;ul&gt;
            &lt;li&gt;같은 테이블 스키마를 가진 데이터를 다수의 데이터베이스에 분산하여 저장하는 방법을 의미합니다.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Redis Cluster&lt;/strong&gt;
      &lt;ul&gt;
        &lt;li&gt;Hash 기반으로 Slot을 0 ~ 16384로 구분하여 자신의 Slot에 해당하는 Node로 Redirect 시킨다.&lt;/li&gt;
        &lt;li&gt;장점
          &lt;ul&gt;
            &lt;li&gt;자체적인 Primary, Secondary Failover&lt;/li&gt;
            &lt;li&gt;Slot 단위의 데이터 관리.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;단점
          &lt;ul&gt;
            &lt;li&gt;메모리 사용량이 더 많음&lt;/li&gt;
            &lt;li&gt;Library 의존성&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;redis-장애-대응을-위해-어떻게-처리-하셨죠&quot;&gt;Redis 장애 대응을 위해 어떻게 처리 하셨죠?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Redis 장애 대응을 위해 하나의 Master와 두 개의 Replica로 이루어진 Master - Replica 운영 모델을 도입하여 Master가 다운될 시 Replica를 통해 Read를 하는 장애 대응 전략을 구축 했습니다.&lt;/strong&gt; 이러한 전략으로는 장애 대응이 완벽하다고 말 할 수는 없으며, Redis Sentinel 이라던지, Health Checker를 도입해서 노드 재시작 및 노드 자동 승격 기능 등을 구현해보고 싶습니다.&lt;/p&gt;

&lt;h3 id=&quot;redis의-구조는-알고-계시나요&quot;&gt;Redis의 구조는 알고 계시나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Redis는 ANSI C를 사용해서 작성되었으며 Disk를 사용해서 persistence를 지원한다.&lt;/strong&gt; redis에서는 데이터를 저장하는 방법으로 snapshot(RDB) 방식과 AOF(Append on file) 방식을 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;snappshot(RDB) 방식은 특정 순간에 메모리에 있는 내용 즉, snapshot을 disk에 옮겨 담는 방식이다. (restart 시간이 빠르지만 특정 snapshot 이후 변경된 데이터는 유실된다.)&lt;/li&gt;
  &lt;li&gt;AOF 방식은 redis의 모든 write/update 연산 자체를 모두 log 파일에 기록해서 서버 재시작시 기록된 write/update를 재실행하는 방법이다. (데이터 유실이 발생하지 않지만 restart시 느리다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Redis는 사용자 명령어를 Single Thread로 처리하기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Long-Time&lt;/code&gt; 명령 수행시 다른 명령어들은 처리할 수 없는 상태가 되기 때문에 꼭 주의해야 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;redis-java-client인-lettuce는-무엇인가요&quot;&gt;Redis Java Client인 Lettuce는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Lettuce는 Netty 기반의 고성능 비동기 Redis 클라이언트로써 다른 Redis 클라이언트인 Jedis보다 훨신 빠릅니다. 또한 레디스의 다양한 운영 모델과 커넥션을 지원하구요 무엇보다도 잘 만들어진 공식 문서가 매력적입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;database-partioning&quot;&gt;Database Partioning&lt;/h3&gt;

  &lt;p&gt;&lt;strong&gt;데이터베이스를 여러 부분으로 분할하는 것을 &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터베이스 파티셔닝(DB Partioning)&lt;/code&gt;이라고 한다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;데이터베이스 파티셔닝은 중요한 튜닝기법으로 데이터가 너무 커져서, 조회하는 시간이 길어질 때 또는 관리 용이성, 성능, 가용성 등의 향상을 이유로 행해진다. 데이터베이스가 분할된 각 부분을 &lt;strong&gt;파티션&lt;/strong&gt;이라고 부른다.&lt;/p&gt;

  &lt;h4 id=&quot;database-sharding-수평-분할-horizontal-partioning&quot;&gt;Database Sharding (수평 분할, Horizontal Partioning)&lt;/h4&gt;

  &lt;p&gt;&lt;strong&gt;테이블을 수평으로 쪼개서 각 행을 다른 DB에 분산시키는 것이다.&lt;/strong&gt; 분할된 각 부분을 &lt;strong&gt;샤드(Shard)&lt;/strong&gt;라고 한다. 즉, 각 샤드의 스키마 구조는 동일하다.&lt;/p&gt;

  &lt;h4 id=&quot;vertical-partioning수직-분할&quot;&gt;Vertical Partioning(수직 분할)&lt;/h4&gt;

  &lt;p&gt;&lt;strong&gt;테이블을 수직으로 쪼개서 테이블의 일부 열을 다른 DB로 빼내는 형태로 분할한다.&lt;/strong&gt; 정규화는 본질적으로 수직 분할에 관련된 과정이다. 특정 테이블에서 자주 참조되는 열을 수직 분할시켜 해당 데이터를 캐싱할 수도 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;이슈&quot;&gt;이슈&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;spring-data-redis-contribution-과정에-대해서-알려주실-수-있나요&quot;&gt;Spring Data Redis Contribution 과정에 대해서 알려주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;redis는 버젼 5.0부터 slave라는 용어가 replica로 변경되었고 Redis 클라이언트인 Lettuce-core는 버젼 5.2.0부터 코드 레벨의 Slave를 Replica로 변경하였습니다. &lt;strong&gt;하지만 최근 Spring Data Redis Doc을 보면 Lettuce-core 버젼 5.2.0 이상을 사용함에도 불구하고 여전히 Deprecated된 SLAVE_PREFERRED를 통해서 특정 기능의 사용을 안내 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;저는 이 부분이 잘못되었다고 생각해 직접 Spring Data Redis 프로젝트에 이슈를 발급하였고 Deprecated 된 부분을 모두 고친 뒤 PR을 날렸습니다. 현재 PR이 머지가 되었으며 해당 이슈가 해결되었습니다.&lt;/p&gt;

&lt;p&gt;많은 사용자가 존재하는 Spring Project에 조그마한 부분이지만 기여할 수 있었다는 점에서 매우 뿌듯하고 행복합니다.&lt;/p&gt;

&lt;h3 id=&quot;outofmemoryexception-이슈에-대해서-공유해주실-수-있나요&quot;&gt;OutOfMemoryException 이슈에 대해서 공유해주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;추천 알고리즘을 위해 업체와 사용자 관계를 벡터 값으로 표현해 Integer 객체로 저장 했는데요, Batch Processing 간에 모든 업체와 모든 사용자간의 관계를 벡터 값으로 표현 했을 경우 수십, 수백억 개의 Interger 객체가 생겼었습니다. &lt;strong&gt;이러한 무분별한 Integer 객체 생성으로 인해 객체를 저장하는 메모리인 Heap의 공간이 부족했었고 결국 JVM의 메모리가 부족하다는 OutOfMemoryError가 발생하였습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;저는 이러한 이슈를 해결하기 위해 업체의 벡터 값을 저장하기 위한 자료구조를 Integer List 에서 Int 배열 즉, &lt;strong&gt;Wrapper 타입에서 Primitive 타입으로 리팩토링 하였고, 이를 통해 Heap 메모리에 저장되는 데이터의 사이즈를 줄여 OutOfMemoryError를 해결할 수 있었을 뿐만 아니라 Wrapper 타입으로 저장 시 발생하는 객체 생성, 참조 등의 부하를 줄여 Batch Processing 성능을 개선할 수 있었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;primitive-와-wrapper-타입은-각각-무엇이고-언제-써야하는지-알려주세요&quot;&gt;Primitive 와 Wrapper 타입은 각각 무엇이고, 언제 써야하는지 알려주세요.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Primitive 타입은 Java에 키워드로 등록된 8개의 비객체형 원시 타입을 의미하구요, Wrapper 타입은 primitive type을 Wrapping해 객체로 다루기 위해서 사용하는 클래스를 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;단순하고 반복적인 계산을 위해 Wrapper 타입의 객체가 계속 생성되는 경우 성능상 Primitive 타입을 사용하는 것이 더 좋고, DB에서 데이터를 가져오는 경우나, primitive 타입의 default 값으로부터 혼란이 발생하기 쉬운 경우 Wrapper 타입을 사용하는 것이 더 좋습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;jvm&quot;&gt;JVM&lt;/h2&gt;

  &lt;p&gt;자바 가상 머신으로 &lt;strong&gt;자바 바이트 코드를 실행할 수 있는 주체&lt;/strong&gt;이다.&lt;/p&gt;

  &lt;p&gt;운영체제 위에서 동작하는 프로세스로 &lt;u&gt;자바 코드(.java)를 컴파일해서 얻는 바이트 코드(.class)를 해당 운영체제가 이해할 수 있는 기계어로 바꿔 실행시켜주는 역할&lt;/u&gt;을 한다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;JVM의 구성을 살펴보면 크게 4가지(Class Loader, Execution Engine, Garbage Collector, Runtime Data Area)로 나뉜다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;/assets/interview/naver-practical-interview-preparation1-4.png&quot; style=&quot;width:90%&quot; /&gt;&lt;/p&gt;

  &lt;h3 id=&quot;1-class-loader&quot;&gt;1. Class Loader&lt;/h3&gt;

  &lt;p&gt;컴파일러를 통해서 생성된 바이트코드(.class)를 엮어서 JVM이 운영체제로부터 할당받은 메모리 영역인 &lt;strong&gt;Runtime Data Area&lt;/strong&gt;로 적재하는 역할을 Class Loader가 한다.&lt;/p&gt;

  &lt;h3 id=&quot;2-execution-engine&quot;&gt;2. Execution Engine&lt;/h3&gt;

  &lt;p&gt;Class Loader에 의해 &lt;strong&gt;메모리에 적재된 클래스(바이트 코드)들을 기계어로 변경해 명령어 단위로 실행하는 역할&lt;/strong&gt;을 한다. 명령어를 하나 하나 실행하는 인터프리터(Interpreter)방식이 있고 JIT(Just-In-Time) 컴파일러를 이용하는 방식이 있다.&lt;/p&gt;

  &lt;p&gt;JIT 컴파일러는 적절한 시간에 전체 바이트 코드를 네이티브 코드로 변경해서 Execution Engine이 네이티브로 컴파일된 코드를 실행하는 것으로 성능을 높이는 방식이다.&lt;/p&gt;

  &lt;h3 id=&quot;3-garbage-collector&quot;&gt;3. Garbage Collector&lt;/h3&gt;

  &lt;p&gt;Garbage Collector(GC)는 Heap 메모리 영역에 생성(적재)된 객체들 중에 &lt;strong&gt;참조되지 않는 객체들을 탐색 후 제거하는 역할&lt;/strong&gt;을 한다.&lt;/p&gt;

  &lt;h3 id=&quot;4-runtime-data-area&quot;&gt;4. Runtime Data Area&lt;/h3&gt;

  &lt;p&gt;JVM은 프로그램 실행간에 사용되어지는 다양한 Runtime Data Area를 제공한다. 이러한 Data Area 중 몇몇은 JVM이 시작할 때 생성되어지고 JVM이 종료되어질 때 소멸된다. 하지만 다른 몇몇의 Data Area는 스레드마다 할당되어진다. 스레드마다 할당되어지는 Data Area는 스레드 생성시 생성되어지고 스레드 종료시 소멸되어진다.&lt;/p&gt;

  &lt;h4 id=&quot;41-the-pc-register&quot;&gt;4.1 The pc Register&lt;/h4&gt;

  &lt;p&gt;JVM은 한번에 많은 스레드의 실행을 지원할 수 있습니다. &lt;strong&gt;각각의 JVM 스레드는 자신의 pc(program counter) register를 갖고 있습니다.&lt;/strong&gt; 언제든지(At any point), JVM 스레드는 단일 메서드 즉(namely), 해당 스레드에 대한 현재 메서드의 코드를 실행할 수 있습니다. 해당 메소드가 native code가 아닌 경우 pc 레지스터에는 현재 실행중인 JVM 명령어의 주소가 포함됩니다. 만약 현재 스레드에 의해서 실행되고 있는 메서드가 native라면, JVM의 pc 레지스터의 값은 정의되지 않을것 입니다. JVM의 pc 레지스터는 특정 플랫폼에서의 native pointer 또는 return Address를 잡을만큼 꽤 큽니다.&lt;/p&gt;

  &lt;h4 id=&quot;42-java-virtual-machine-stacks&quot;&gt;4.2 Java Virtual Machine Stacks&lt;/h4&gt;

  &lt;p&gt;&lt;strong&gt;각각의 JVM 스레드들은 Java Virtual Machine Stack을 가지고 있고 스레드와 동시에 생성됩니다. Java Virtual Machine Stack은 프레임(Frame)을 저장합니다.&lt;/strong&gt; JVM Stack은 C와 같은 기존 언어의 스택과 유사합니다. &lt;strong&gt;JVM 스택은 지역 변수와 부분적인 결과를 보유하고, 메소드 호출과 반환에서 역할을 수행합니다.&lt;/strong&gt; JVM 스택은 프레임을 푸시하고 팝하는 것을 제외하고 직접 조작하지 못하므로 프레임에 heap이 할당될 수 있습니다. JVM 스택의 메모리는 연속적일(contiguous) 필요가 없습니다.&lt;/p&gt;

  &lt;p&gt;스레드에서의 연산이 JVM 스택이 허용하는 것 보다 더 큰 Stack이 필요한 경우 JVM은 StackOverFlowError을 발생합니다.&lt;/p&gt;

  &lt;p&gt;JVM스택이 동적으로 확장되어지고 확장을 위해서 이용가능한 메모리가 불충분함에도 확장을 시도하거나, 새로운 스레드를 위해 JVM 스택의 초기화를 하기위해 메모리가 불충분할 경우 JVM은 OutOfMemoryError를 던집니다.&lt;/p&gt;

  &lt;h4 id=&quot;43-heap&quot;&gt;4.3 Heap&lt;/h4&gt;

  &lt;p&gt;&lt;strong&gt;JVM은 &lt;u&gt;모든 JVM 스레드 사이에서 공유&lt;/u&gt;되어지는 heap 영역을 갖습니다. heap은 모든 클래스의 인스턴스와 배열에 대한 메모리가 할당되는 run-time data area 입니다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;heap은 JVM이 시작되어질 때 생성됩니다.&lt;/strong&gt; &lt;strong&gt;객체들의 heap 저장소는 &lt;u&gt;자동 저장소 관리 시스템(Garbage Collector)&lt;/u&gt;에 의해 회수됩니다.&lt;/strong&gt; 객체들은 절대 명시적으로 할당이 해제되지 않습니다. JVM은 특정 유형의 자동 저장소 관리 시스템을 가정하지 않으며 저장소 관리 기술은 구현자의 시스템 요구사항에 따라서 선택되어질 수 있습니다. 힙은 고정된 사이즈가 될 수 있으며 또는 연산에 의해서 확장되어질 수 있습니다. 만약 더 큰 heap이 필요하지 않다면 축소되어질 수도 있습니다. 힙 메모리는 연속적(contiguous)일 필요가 없습니다.&lt;/p&gt;

  &lt;p&gt;JVM은 초기 heap 사이즈를 조절할 수 있도록 프로그래머 또는 사용자에게 제공해주고, 뿐만 아니라 동적으로 힙을 확장 또는 축소할 수 있도록 최대 및 최소 힙 사이즈를 제어할 수 있습니다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;만약 연산이 자동 저장소 관리 시스템으로부터 이용가능한 heap 보다 더 많은 heap을 필요로 한다면, JVM은 OutOfMemoryError를 던집니다.&lt;/strong&gt;&lt;/p&gt;

  &lt;h4 id=&quot;44-method-area&quot;&gt;4.4 Method Area&lt;/h4&gt;

  &lt;p&gt;&lt;strong&gt;JVM은 &lt;u&gt;모든 JVM 스레드 사이에서 공유&lt;/u&gt;되어지는 method area를 가집니다. &lt;u&gt;method area는 기존 언어의 컴파일된 코드를 위한 저장 영역과 유사하거나 운영 체제 프로세스의 텍스트 세그먼트와 유사합니다.&lt;/u&gt;&lt;/strong&gt; &lt;strong&gt;method area는 &lt;u&gt;run-time constant pool, 필드, 메소드 데이터, 메소드와 생성자를 위한 코드와 같은 클래스별 구조를 저장&lt;/u&gt;합니다.&lt;/strong&gt; 이는 인스턴스 초기화와 인터페이스 및 클래스 초기화에서 사용되어지는 특별한 메소드들도 포함합니다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;method area는 JVM이 시작할 때 생성되어지며, 논리적으로 heap의 일부분&lt;/strong&gt;이지만 간단한 구현에서는 Garbage collector 또는 압축을 선택하지 않을 수 있습니다. 이러한 스펙은 컴파일된 코드를 관리하기 위해서 사용되어지는 정책 또는 method area에 대한 위치를 요구하지 않습니다. method area는 고정된 크기일 수 있고 연산에서 요구된다면 확장되어질 수 있습니다. 그리고 불필요하다면 축소될 수도 있습니다. method area를 위한 메모리는 연속적인 공간을 필요하지 않습니다.&lt;/p&gt;

  &lt;h4 id=&quot;45-run-time-constant-pool&quot;&gt;4.5 Run-Time Constant Pool&lt;/h4&gt;

  &lt;p&gt;&lt;strong&gt;run-time constant pool은 &lt;u&gt;클래스 파일에있는 constant_pool table에 대한 클래스별 또는 인터페이스별 runtime 표현&lt;/u&gt;입니다&lt;/strong&gt;. &lt;strong&gt;run-time constant pool은 컴파일 타임에 알려진 숫자 리터럴부터 런타임에 해결되어야하는 메서드 및 필드 참조에 이르기까지 여러 종류의 &lt;u&gt;상수&lt;/u&gt;들을 포함합니다.&lt;/strong&gt; run-time constant pool은 일반적인 기호 테이블보다 더 넓은 범위의 데이터를 포함하지만 기존 프로그래밍 언어의 기호 테이블과 유사한 기능을 제공합니다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;&lt;u&gt;각각의 run-time constant pool은 JVM method area로부터 할당&lt;/u&gt;되어 집니다. &lt;u&gt;클래스 또는 인터페이스를 위한 run-time constant pool은 클래스와 인터페이스가 JVM에 의해서 생성되어질 때 생성&lt;/u&gt;됩니다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;클래스와 인터페이스가 생성될 때 JVM method area에서 이용가능한 메모리보다 더 많은 run-time constant pool 생성을 요구한다면 JVM은 OutOfMemoryError를 발생할 겁니다.&lt;/p&gt;

  &lt;h4 id=&quot;46-native-method-stacks&quot;&gt;4.6 Native Method Stacks&lt;/h4&gt;

  &lt;p&gt;JVM은 native methods(자바 프로그래밍 언어 이외의 언어로 작성된 메서드)를 지원하기 위해 구어적으로(colloquially) C 스택이라고 하는 기존 스택을 사용할 수 있습니다. Native method stacks은 C와 같은 언어에서 JVM 명령어의 집합을 위한 인터프리터의 구현으로부터 사용되어질 수 있습니다. native methods를 로드할 수 없고, 기존 스택에 의존하지 않는 JVM 구현은 native method 스택을 제공할 필요가 없습니다. 만약 제공되어진다면 native method stacks는 일반적으로 스레드가 생성될 때 스레드마다 할당되어집니다.&lt;/p&gt;

  &lt;h3 id=&quot;5-frames&quot;&gt;5. Frames&lt;/h3&gt;

  &lt;p&gt;&lt;strong&gt;&lt;u&gt;프레임은 데이터와 부분적인 결과를 저장하기 위해 사용되어 집니다. 뿐만 아니라 동적인 linking을 수행하고 메소드를 위해 값을 리턴하고 예외를 dispatch 하기위해서 사용되어집니다.&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;새로운 프레임은 메서드가 호출되어질 때 생성되어지고 메서드 호출이 완료되어질 때 소멸됩니다.&lt;/strong&gt; 프레임들은 프레임을 생성하는 스레드의 JVM stack으로부터 할당되어집니다. &lt;strong&gt;각각의 프레임들은 &lt;u&gt;자신의 지역변수들에 대한 배열과, 피연산자 stack, 현재 메소드의 클래스의 run-time constnat pool의 참조&lt;/u&gt;를 가지고 있습니다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Frame은 디버깅 정보와 같이 추가적인 구현 스펙 정보와 함께 확장되어집니다.&lt;/p&gt;

  &lt;p&gt;지역 변수 배열 및 피연산자 스택의 크기는 컴파일 타임에 결정이 되어지고, 프레임과 관련있는 메서드에 대한 코드가 제공되어집니다. 프레임 데이터 구조의 사이즈는 오직 JVM 구현에 의존하며 이러한 구조의 메모리는 메서드 호출과 동시에 할당되어집니다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;&lt;u&gt;메서드를 실행하기 위한 프레임은 제어를 위한 스레드가 활성화 되는 시점에서 활성화&lt;/u&gt; 됩니다. 이러한 프레임을 현재 프레임(current frame)이라고 하고 이러한 메소드는 현재 메소드라고 합니다. 현재 메서드가 정의되어진 클래스를 현재 클레스라고 합니다. &lt;u&gt;지역 변수와 피연산자 스택의 연산은 일반적으로 현재 프레임을 참조합니다.&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;메서드가 다른 메서드를 호출하거나 해당 메서드가 완료한다면 해당 프레임은 현재 상태가 아닙니다. &lt;strong&gt;메서드가 호출될 때 새로운 프레임이 생성되고 현재 프레임이 되며 제어는 세로운 메서드로 이동합니다. 메서드가 리턴되어지면 현재 프레임은 메서드 호출의 결과를 이전 프레임으로 다시 전달합니다. 현재 프레임은 버려지고 이전의 프레임이 현재 프레임이 될것 입니다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;스레드에 의해서 생성되어지는 프레임은 해당 스레드에 로컬이고 어떠한 다른 스레드에 의해서 참조되어질 수 없습니다.&lt;/p&gt;

  &lt;h3 id=&quot;6-garbage-collection&quot;&gt;6. Garbage Collection&lt;/h3&gt;

  &lt;p&gt;&lt;strong&gt;Runtime Data Area의 Heap 부분은 5개의 영역(eden, survivor1, survivor2, old, permanent)으로 나뉜다.&lt;/strong&gt; heap의 영역을 5개로 나눈 이유는 효율적으로 GC가 일어나게 하기 위함이다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;GC는 Minor GC와 Major GC로 나뉜다.&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Minor GC: New 영역에서 일어나는 GC&lt;/strong&gt;
      &lt;ol&gt;
        &lt;li&gt;최초에 객체가 생성되면 Eden 영역에 생성된다.&lt;/li&gt;
        &lt;li&gt;Eden 영역에 객체가 가득차게 되면 첫 번째 GC가 일어난다.&lt;/li&gt;
        &lt;li&gt;Survivor1 영역에 Eden 영역의 메모리를 그대로 복사한다. 그리고 Survivor1 영역을 제외한 다른 영역의 객체를 제거한다.&lt;/li&gt;
        &lt;li&gt;Eden 영역도 가득차고 Survivor1 영역도 가득차게 된다면, Eden 영역에 생성된 객체와 Survivor1 영역에 생성된 객체 중에 참조되고 있는 객체가 있는지 검사한다.&lt;/li&gt;
        &lt;li&gt;참조 되고있지 않은 객체는 내버려 두고 참조되고 있는 객체만 survivor2 영역에 복사한다.&lt;/li&gt;
        &lt;li&gt;survivor2 영역을 제외한 다른 영역의 객체들을 제거한다.&lt;/li&gt;
        &lt;li&gt;위의 과정중에 일정 횟수이상 참조되고 있는 객체들을 survivor2에서 Old영역으로 이동시킨다.&lt;/li&gt;
        &lt;li&gt;해당 과정의 지속적인 반복&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Major GC(Full GC): Old 영역에서 일어나는 GC&lt;/strong&gt;
      &lt;ol&gt;
        &lt;li&gt;Old 영역에 있는 모든 객체들을 검사하며 참조되고 있는지 확인한다.&lt;/li&gt;
        &lt;li&gt;참조되지 않은 객체들을 모아 한 번에 제거한다.
          &lt;ul&gt;
            &lt;li&gt;Minor GC 보다 시간이 훨씬 많이 걸리고 실행중에 GC를 제외한 모든 쓰레드가 중지된다.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;Major GC(Full GC)가 일어나면,
Old 영역에 있는 참조가 없는 객체들을 표시하고 그 해당 객체들을 모두 제거하게 된다. 그러면서 Heap 메모리 영역에 중간중간 구멍(파편화)이 생기는데 이 부분을 위해 재구성을 하게 된다(디스크 조각모음처럼 조각난 메모리를 정리함)
&lt;strong&gt;따라서 메모리를 옮기고 있는데 다른 쓰레드가 메모리를 사용해버리면 안되기 때문에 모든 쓰레드가 정지하게 되는 것이다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;성능-및-가독성-개선을-위해-쿼리-분리-및-인덱싱-작업을-어떻게-진행하셨나요&quot;&gt;성능 및 가독성 개선을 위해 쿼리 분리 및 인덱싱 작업을 어떻게 진행하셨나요??&lt;/h3&gt;

&lt;p&gt;업종 추천을 위해 사용자가 특정 업체를 예약한 시점을 기준으로 특정 기간 동안의 예약 데이터를 가져와야 하는 쿼리가 필요했습니다. 이를 위해 처음 작성한 쿼리는 조인한 테이블이 많고 WHERE절도 많아서 성능도 좋지 않고 가독성도 매우 떨어졌습니다. 이를 해결하기 위해 &lt;strong&gt;쿼리의 개수가 무분별하게 많아지지 않는 선에서 쿼리를 분리했고, 쿼리의 개수가 늘어나 발생하는 지연을 줄이고자 인덱싱 작업을 진행 하였습니다.&lt;/strong&gt; 이를 통해 쿼리의 성능 및 가독성이 증가될 수 있었습니다.&lt;/p&gt;

&lt;h3 id=&quot;db-인덱스란-무엇인가요&quot;&gt;DB 인덱스란 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;DB 인덱스는 데이터베이스 테이블의 동작 속도를 높여주는 자료 구조를 의미합니다.&lt;/strong&gt; 마치 책의 앞 부분에 존재하는 목차와 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;인덱싱은-어떠한-경우에-사용하면-좋을까요&quot;&gt;인덱싱은 어떠한 경우에 사용하면 좋을까요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;인덱싱은 테이블에 저장된 데이터의 양이 많고 SELECT가 UPDATE보다 잦은 경우, 인덱스를 사용하고자 하는 컬럼의 값이 다양한 경우에 데이터베이스에 인덱스를 추가한다면 성능 개선의 효과를 볼 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;UPDATE나 INSERT가 자주 일어나는 테이블에 수 많은 인덱스를 설정하게 된다면 매번 데이터가 바뀔 때마다 인덱스를 다시 재구성해주어야하는 오버헤드가 발생하기 때문에 성능상의 이슈가 발생할 수 있습니다. 즉, 인덱스는 SELECT 할 때 빛을 발합니다.&lt;/p&gt;

&lt;p&gt;여러 컬럼의 값이 존재하는 경우 보통 여러 컬럼을 활용해서 데이터를 검색하곤 합니다. 이러한 과정에서 매번 PRIMARY KEY로 FULL SEARCH 할 수 없기 때문에 자주 검색되는 컬럼에 인덱스를 걸어주면 성능 향상의 효과를 기대할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;그렇다면-어떠한-컬럼에-인덱스를-설정하는게-좋을까요&quot;&gt;그렇다면 어떠한 컬럼에 인덱스를 설정하는게 좋을까요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;인덱스를 설정하면 좋을 컬럼은&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;WHERE 절과 같은 조건 절에 자주 활용되는 컬럼&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;당연히 자주 활용되는 컬럼이 인덱스로 설정되면 성능 향상을 기대할 수 있겠지?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;카디널리티가 높은(컬럼의 중복되는 값이 많이 없는) 컬럼&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;카디널리티가 낮다면 어차피 full search 할테고, 이점이 많이 사라지는게 아닐까? 되도록이면 인덱스를 통해서 많은 row 들을 필터링한다면 그게 성능이 좋은게 아닐까?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;복합-인덱스는-무엇인가요&quot;&gt;복합 인덱스는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;복합 인덱스란 인덱스에 컬럼이 두개 이상 걸려 있는 경우를 의미하구요, 보통 조건문에 걸리는 컬럼이 많은 경우에 사용됩니다.&lt;/strong&gt; 복합 인덱스에서 컬럼을 지정할 때 보통 카디널리티가 높은 순에서 낮은 순으로 구성하는 것이 성능이 더 좋습니다.&lt;/p&gt;

&lt;h3 id=&quot;어떠한-자료구조를-사용하여서-인덱싱-작업을-진행-했나요&quot;&gt;어떠한 자료구조를 사용하여서 인덱싱 작업을 진행 했나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;저는 PostgreSQL에서 인덱싱 작업시 default로 지원해주는 B-Tree 자료구조를 사용해서 인덱스를 설정하였습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;cardinality&quot;&gt;Cardinality&lt;/h3&gt;

  &lt;p&gt;Cardinality란 특정 컬럼에 존재하는 값의 중복도를 나타내는 상대적인 표현이다.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;중복도가 ‘낮으면’ Cardinality가 ‘높다’고 표현한다.&lt;/strong&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;중복도가 ‘높으면’ Cardinality가 ‘낮다’고 표현한다.&lt;/strong&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ex) 주민등록번호는 중복되는 값이 없으므로 카디널리티가 높고, 이름은 종복되는 값이 많으므로 주민등록번호에 비해 상대적으로 카디닐러티가 낮다고 할 수 있다.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;api&quot;&gt;API&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;api-서버-구현을-위해-어떠한-기술을-사용하셨나요&quot;&gt;API 서버 구현을 위해 어떠한 기술을 사용하셨나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;API 서버 구현을 위해 Spring Boot Web을 사용했구요,&lt;/strong&gt; Front로부터 업체 추천 요청이 들어왔을 경우 Redis에 캐시된 추천 업체 데이터를 읽어와서 이를 사용해서 PostgreSQL로부터 업체 정보를 읽어와 API 를 통해서 추천 데이터를 제공합니다.&lt;/p&gt;

&lt;h3 id=&quot;api-를-설계-및-구현-하면서-어려웠던-점이-있으시나요&quot;&gt;API 를 설계 및 구현 하면서 어려웠던 점이 있으시나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;API 구현보다는 설계가 더 어려웠던 것 같습니다. 설계 중에서 가장 어려웠지만 재미있었던 점은 “어떻게 하면 좀 더 확장성 및 유지보수성이 좋은 API를 만들 수 있을까?” 에 대해서 고민했던 점입니다.&lt;/strong&gt; 현재는 제 API서버의 클라이언트는 크게 한 대이지만, 추후에 수 많은 클라이언트가 제 API를 가져다 사용했을 경우 쉽게 확장할 수 있고 쉽게 유지보수가 가능하게 끔 만들어 보고 싶었던  생각에서부터 생겼던 고민이었던 것 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;그래서-api는-잘-설계-되었나요&quot;&gt;그래서 API는 잘 설계 되었나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;네! 제 API를 사용할 여러 클라이언트들의 입장에서 생각하고 고민한 결과 API 설계는 잘 되었던 것 같습니다.&lt;/strong&gt; 제 API는 크게 업체 정보 API, 상품 정보 API, 업종 추천 API, 업체 추천 API로 각 API들은 되도록 Restful하게 만들었습니다.&lt;/p&gt;

&lt;h3 id=&quot;restful-api가-무엇인지-저희에게-설명해주실-수-있나요&quot;&gt;Restful API가 무엇인지 저희에게 설명해주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Restful API는 REST 아키텍쳐 스타일을 따르는 API를 의미합니다. REST는 분산 하이퍼미디어 시스템(예, 웹)을 위한 소프트웨어 아키텍처 스타일을 의미하구요 이를 위해 6가지의 제약조건이 존재합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Uniform Interface:&lt;/strong&gt; 구성요소(클라이언트, 서버 등) 사이의 인터페이스는 균일(uniform)해야 한다.
    &lt;ul&gt;
      &lt;li&gt;시스템 아키텍처가 단순화되고, 구현과 서비스가 분리되므로 독립적인 진화가 가능하다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;제약조건&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;identification of resources:&lt;/strong&gt; 리소스가 URI로 식별&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;manipulation of resources through representations:&lt;/strong&gt; representation 전송을 통해서 resource를 조작해야 한다.&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;self-descriptiove messages:&lt;/strong&gt; 메시지는 스스로 설명해야한다.
            &lt;ul&gt;
              &lt;li&gt;ex) Content-Type, API&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;hypermedia as the engine of application state (HATEOAS):&lt;/strong&gt; 애플리케이션의 상태는 항상 hyperlink를 통해서 전이가 되어야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Layered System:&lt;/strong&gt; 아키텍처는 계층(hierarchical layers)적으로 구성이 가능해야하며, 각 레이어에 속한 구성요소는 인접하지 않은 레이어의 구성요소를 볼 수 없어야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cacheable:&lt;/strong&gt; 클라이언트는 응답을 캐싱할 수 있어야 한다.
    &lt;ul&gt;
      &lt;li&gt;효율, 규모 확장성, 성능 개선&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Client-Server:&lt;/strong&gt; 클라이언트-서버 스타일은 아키텍처를 단순화시키고 작은 단위로 분리(decouple)함으로써 클라이언트-서버의 각 파트가 독립적으로 개선될 수 있도록 해준다.
    &lt;ul&gt;
      &lt;li&gt;사용자 인터페이스에 대한 관심을 데이터 저장에 대한 관심으로부터 분리 (web-server - api server)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stateless:&lt;/strong&gt; 클라이언트와 서버의 통신에는 상태가 없어야 한다. 모든 요청은 필요한 모든 정보를 담고 있어야 한다.
    &lt;ul&gt;
      &lt;li&gt;상태를 저장할 필요가 없으므로 규모확장성(Scalability)가 개선된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Code-On-Demand (Optional):&lt;/strong&gt; 서버가 네트워크를 통해 클라이언트에 프로그램을 전달하면 그 프로그램이 클라이언트에서 실행될 수 있어야 한다.
    &lt;ul&gt;
      &lt;li&gt;이 제약조건은 팔수는 아니며 Javascript나 Java applet을 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;batch&quot;&gt;Batch&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;추천-시스템에서-batch-processing을-왜-사용하셨나요&quot;&gt;추천 시스템에서 Batch Processing을 왜 사용하셨나요?&lt;/h3&gt;

&lt;p&gt;Web은 실시간 처리를 중요시하기 때문에 사용자로부터 요청이 들어온 순간에 전체 수 십, 수 백만개의 업체 중 추천 대상을 산출해서 응답을 보내는 작업은 시간이 오래걸려서 적절하지 못하다고 생각했습니다. 이를 위해서 &lt;strong&gt;사용자가 요청을 보내기 전에 미리 수 많은 예약 데이터를 분석해서 추천 대상을 캐싱해놓고 싶어 Batch Processing 즉, 일괄 처리를 도입하였습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;batch-processing을-위해서-spring-batch를-사용하게-된-이유가-있나요&quot;&gt;Batch Processing을 위해서 Spring Batch를 사용하게 된 이유가 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Batch Processing을 위해서 Spring Batch를 사용하게 된 대표적인 이유는 Spring Batch의 기본적인 프로세스만 이해한다면 비즈니스 로직에 집중할 수 있다는 점에서 매력을 느껴 Spring Batch를 사용하였습니다.&lt;/strong&gt; 이 외에도 트랜잭션 관리, 장애 대응 전략 등 다양한 기능을 제공해 줘서 Spring Batch를 사용하였습니다. 또한 사실 Spring Framework에서 적용하고 있는 철학이나, 전략, 핵심 기술들이 익숙해서 Spring Batch를 사용했던 이유도 있긴 합니다.&lt;/p&gt;

&lt;h3 id=&quot;spring-batch의-구조에-대해서-저희에게-간단히-설명-해주실-수-있나요&quot;&gt;Spring Batch의 구조에 대해서 저희에게 간단히 설명 해주실 수 있나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring Batch에는 하나의 배치 작업 단위인 Job이 존재하구요, Job은 독립적이고 순차적인 단계를 의미하는 Step의 집합으로 구성되어집니다. Step은 Chunk 지향으로 데이터를 처리할 수 있는 Reader, Processor, Writer로 구성되어질 수 있고, 간단하게 하나의 execute 메서드를 실행하는 Tasklet으로도 구성되어질 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;chunk-기반의-프로세싱은-무엇인지에-대해서-알려주실-수-잇나요&quot;&gt;chunk 기반의 프로세싱은 무엇인지에 대해서 알려주실 수 잇나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring Batch에서 구현하는 Chunk 지향 프로세싱은 Spring Batch 버젼 2.0부터 지원해주는 기능으로써 하나의 트랜잭션 내에서 ItemReader에 의해 한 번에 하나의 아이템을 읽어서 Chunk를 만들고 ItemProcessor에 의해 청크를 프로세싱한 후 aggreagate 시킵니다. 아이템을 읽은 횟수가 설정한 commit interval과 동일할 때 aggregated 된 전체 청크는 ItemWriter에 의해서 write되어지고 트랜잭션은 커밋되어지는 프로세싱을 의미합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;chunk-oriented-processing과-tasklet은-각각-언제-쓰이는게-적절하나요&quot;&gt;chunk-oriented Processing과 Tasklet은 각각 언제 쓰이는게 적절하나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;chunk 지향 프로세싱은 청크 단위로 한번에 하나씩 데이터를 읽어서 처리하고 전송하는 과정이 필요한 경우에 사용하는 것이 적절할 것 같구요, Tasklet은 간단한 스크립트나 단순한 SQL 문을 호출하는 등 Job 수행에는 꼭 필요한 과정이지만 굳이 청크 기반으로 데이터를 처리할 필요가 없는 경우에 사용하는게 적절할 것 같습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;batch에서-어떠한-기준으로-job과-step을-나누셨죠&quot;&gt;Batch에서 어떠한 기준으로 Job과 Step을 나누셨죠?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;추천 대상을 산출하기 위해 사용하는 추천 알고리즘 별로 Job을 나누었으며 추천을 위해선 랭킹 작업이 필요한데 랭킹을 매기기 위해 데이터를 가공할 필요가 있는 경우 랭킹 Step 이전에 데이터 프로세싱 Step들을 구성하였습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;spring-batch-메타-테이블-구조에-대해서-알려주실-수-있나요&quot;&gt;Spring Batch 메타 테이블 구조에 대해서 알려주실 수 있나요?&lt;/h3&gt;

&lt;h4 id=&quot;job&quot;&gt;JOB&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;BATCH_JOB_INSTANCE&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;JOB이 실행될 때 생성되는 JOB_INSTANCE에 관한 정보를 저장하고 있습니다.&lt;/strong&gt;
엄연히 말하자면 JOB_INSTANCE는 JOB이 실행될 때마다 생성되지 않고 &lt;strong&gt;JOB_PARAMETER 값에 따라 새로 생성&lt;/strong&gt;됩니다.&lt;/li&gt;
      &lt;li&gt;JOB_PARAMETER에 의해서 동일한 JOB의 여러 JOB_INSTANCE간에 구분이 이루어집니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BATCH_JOB_EXECUTION&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;JOB(JOB_INSTANCE)을 실행하기위한 단일 시도의 기술적인 개념들을 저장합니다.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;EXECUTION은 실패 또는 성공으로 끝날 수 있지만, EXECUTION이 성공적으로 완료되지 않는한 해당 EXECUTION에 해당하는 JOB_INSTANCE는 완료된 것으로 간주하지 않습니다.&lt;/li&gt;
      &lt;li&gt;JOB_INSATNCE의 단일 실행을 나타내는 JOB_EXECUTE에 관한 정보를 담고 있습니다.&lt;/li&gt;
      &lt;li&gt;JOB_INSTANCE와 JOB_EXECUTION은 부모(1)와 자식(N) 관계입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BATCH_JOB_EXECUTION_PARAMS&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;JOB_PARAMETER에 대한 모든 정보를 기록하고 있습니다.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BATCH_JOB_EXECUTION_CONTEXT&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;EXECUTION_CONTEXT와 관련된 모든 정보를 기록합니다.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;1개의 JOB_EXECTION에 각 JOB_EXECUTION_CONTEXT가 있으며 특정 작업 실행에 필요한 모든 데이터를 포함합니다.&lt;/strong&gt; 일반적으로 JOB_INSTANCE가 중지된 위치에서 다시 시작할 수 있도록, 실패(Fail)이후 지점에 State를 나타냅니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BATCH_JOB_EXECUTE_SEQ, BATCH_JOB_SEQ&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;JOB_EXECUTE와 JOB의 순서 관리 테이블입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;step&quot;&gt;Step&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;BATCH_STEP_EXECUTION&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;STEP을 실행하기위한 단일 시도에 관련된 정보를 저장합니다. 각 STEP이 실행될 때마다 STEP_EXECUTION이 생성되고 저장됩니다&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;이전 STEP이 실패해서 다음 STEP의 실행 또한 실패한다면, 어떠한 STEP_EXECUTION도 persist(영속화) 되어지지 않습니다. &lt;strong&gt;STEP_EXECUTION은 실제로 해당 STEP이 시작될 때만 생성됩니다.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;각각의 STEP_EXECUTION은 해당 &lt;u&gt;STEP의 참조와 관련된 커밋과 롤백 개수, 시작과 종료 시간등 트랜잭션과 관련된 데이터를 포함&lt;/u&gt;합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BATCH_STEP_EXECUTION_CONTEXT&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;STEP의 EXECUTION_CONTEXT와 관련된 모든 정보를 저장합니다.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;STEP_EXECUTION 당 1개의 STEP_EXECUTION_CONTEXT가 있으며 개발자가 batch 실행에서 유지해야하는 모든 데이터(재시작을 위한 정적인 정보 또는 통계 정보)를 포함합니다.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BATCH_STEP_EXECUTION_SEQ&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;STEP_EXECUTION의 시퀀스관리 테이블입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jobrepository는-무엇인가요&quot;&gt;JobRepository는 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;JobRepository란 Batch의 Stereotype 인  JobExecution, StepExectuion 등을 위한 영속성 메커니즘입니다.&lt;/strong&gt; JobRepository는 JobLauncher, Job, Step 구현을 위한 CRUD 작업을 제공합니다. Job이 시작되어질 때, repository로 부터 JobExecution을 가져오고, 실행 과정에서 StepExecution과 JobExecution 구현을 repository로 전달하여 유지합니다.&lt;/p&gt;

&lt;h3 id=&quot;fault-tolerant-시스템을-위해-batch에-어떠한-장애대응-전략을-도입하셨나요&quot;&gt;Fault Tolerant 시스템을 위해 Batch에 어떠한 장애대응 전략을 도입하셨나요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Batch Processing 간에 NPE나, JSONException 등이 발생했을 경우, 해당 chunk 처리를 최대 10회 skip 하는 전략인 Skip 정책을 도입했습니다. 그리고 DB lock이나, 다른 일시적인 이유에 의해서 TransientDataAccessException이나 RedisBusyException 등이 발생했을 경우 300ms의 시간을 두고 최대 3회 재시도하는 정책인 Retry 정책과 Back-off 정책을 도입하였습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;batch-process-scheduling을-위해서-무엇을-사용하셨나요&quot;&gt;Batch Process Scheduling을 위해서 무엇을 사용하셨나요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Batch Process 스케줄링을 위해서 BatchJobLaunchScheduler 클래스를 구현해 매일 아침 7시에 Batch Process가 동작할 수 있도록 Spring Scheduler를 사용해서 스케줄링을 구현하였습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;spring-scheduler를-구현했을-경우-단점이-뭘까요&quot;&gt;&lt;strong&gt;Spring Scheduler를 구현했을 경우 단점이 뭘까요?&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;만약 배치 작업이 너무 거대해서 클러스터로 구성하여 스프링 스케줄러로 스케줄링 하였을 때, 하나의 배치 노드에서 전체 클러스터의 스케줄링 작업을 수행한다는 것이 어색하다.&lt;/strong&gt; 만약 해당 스프링 스케줄러 기능이 포함된 배치 노드가 다운되었다면 배치 실행을 안할 것인가..? 즉, 장애대응에 완벽한 구조를 가지고 있지 않다. 그나마 좀 더 완벽한 장애대응을 가지는 CI 툴의 사용을 고려해 보자.&lt;/p&gt;

&lt;h3 id=&quot;ci-툴을-scheduler로-도입했을-시-장점&quot;&gt;CI 툴을 Scheduler로 도입했을 시 장점&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CI툴은 대부분 Slack이나, Email, SMS 등 다양한 Integration을 제공하고 실행 이력, 로그 관리, Dashboard등 UI가 굉장히 잘 되어 있습니다. 뿐만 아니라 REST API, Scheduling, 수동 실행 등 다양한 실행 방법을 제공하기 때문에 CI 도구를 Scheduler로 도입했을 경우 많은 장점들이 존재합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;spring-scheduler&quot;&gt;Spring Scheduler&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;장점&lt;/strong&gt;
      &lt;ul&gt;
        &lt;li&gt;스프링에서 자체적으로 지원하는 기능으로써 애플리케이션 내부에서 쉽게 구현할 수 있어 비용이 적게든다.&lt;/li&gt;
        &lt;li&gt;자바 어플리케이션을 띄우고 주기적으로 실행할 수 있으므로 스케줄된 메소드를 정시에 실행 가능하다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;단점&lt;/strong&gt;
      &lt;ul&gt;
        &lt;li&gt;스케줄러 interval이 매우 짧을 경우 작업 수행시간이 interval 시간보다 길어질 상황이 생길 수 있다.
          &lt;ul&gt;
            &lt;li&gt;Task 수행을 멀티스레딩으로 설정하는 것을 통해 직접 커스터마이징 가능&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;interval 시간보다 긴 작업이 존재한다면 다른 작업들도 제 시간에 실행되지 않는 문제가 발생할 수 있다.
          &lt;ul&gt;
            &lt;li&gt;비동기 애노테이션(@Async)로 아직 작업이 끝나지 않았더라도, 새로운 스레드를 할당해 작업을 수행할 수 있다.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;멀티 서버일 경우 스케줄러가 중복 실행되는 문제
          &lt;ul&gt;
            &lt;li&gt;ShedLock 잠금으로 해결 가능
              &lt;ul&gt;
                &lt;li&gt;ShedLock은 스케줄링된 task가 최대 동시에 한번만 실행가능하도록 만들어진 라이브러리입니다.&lt;/li&gt;
                &lt;li&gt;만약 테스크가 하나의 노드에서 실행되는 경우, 다른 노드로부터 같은 테스크의 실행을 막기위해 잠금을 획득합니다. &lt;strong&gt;즉, 하나의 작업이 이미 한 노드에서 실행중인 경우 다른 노드에서의 실행은 대기하지 않고 단순히 건너 뜁니다.&lt;/strong&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;front-end-업데이트-예정&quot;&gt;Front-End (업데이트 예정)&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;리액트를-사용한-이유는-무엇인가요&quot;&gt;리액트를 사용한 이유는 무엇인가요??&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;리액트를 사용해서 UI를 확장성 및 재사용성이 높은 컴포넌트의 집합으로 개발하기 위해 사용하였습니다.&lt;/strong&gt; 또한 리액트에서 사용할 수 있는 스타일 라이브러리나 상태 관리 라이브러리를 사용하고 싶어서 리액트를 사용하기도 하였습니다.&lt;/p&gt;

&lt;h3 id=&quot;프론트를-개발하면서-어려운-점은-없으셨나요&quot;&gt;프론트를 개발하면서 어려운 점은 없으셨나요?&lt;/h3&gt;

&lt;p&gt;백앤드 개발에 집중하다 보니 프로젝트 막바지에 프론트앤드 개발에 투자할 시간이 상대적으로 많이 없었는데요, 이러한 상황에서 리액트도 처음 사용하다보니 리액트에서 제공해주는 기능 하나 하나를 완벽히 이해하고 가져다 쓰기에는 어려운 점이 많았습니다. 일단 프론트 앤드는 이상 없이 요구사항 전부를 구현 했으나, &lt;strong&gt;리액트의 장점과 특징들을 제대로 활용하지 못하고 그냥 가져다 사용한 것만 같아서 생산성과 유지 보수성이 높은 코드를 작성하는게 가장 어려웠습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;리액트의-대표적인-특징은-무엇인가요&quot;&gt;리액트의 대표적인 특징은 무엇인가요?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;리액트의 대표적인 특징으로는 UI를 상태를 가지는 간단한 컴포넌트의 집합으로 표현할 수 있고, Virtual DOM을 사용하여 변화가 필요한 곳만 렌더링 할 수 있다는 특징을 가지고 있습니다.&lt;/strong&gt; 또한 리액트는 엄청나게 큰 생태계를 가지고 있어 다양한 기능들이 새로 추가되고 유지보수 되고 있으며 이를 통해 개발자들이 좀 더 쉽게 UI를 개발할 수 있게 해줍니다.&lt;/p&gt;

</description>
        <pubDate>Wed, 24 Feb 2021 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/interview/2021/02/24/NAVER-Practical-Interview-Preparation-1.html</link>
        <guid isPermaLink="true">http://localhost:4000/interview/2021/02/24/NAVER-Practical-Interview-Preparation-1.html</guid>
        
        <category>Booking-Recommendation-System</category>
        
        <category>Batch</category>
        
        <category>PostgreSQL</category>
        
        <category>Spring</category>
        
        <category>Redis</category>
        
        <category>React</category>
        
        
        <category>Interview</category>
        
      </item>
    
  </channel>
</rss>