<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Green Frog Developer</title>
    <description>오늘보다 나은 내일을 위해 변화를 꿈꾸는 개발자입니다.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 15 Oct 2020 22:59:47 +0900</pubDate>
    <lastBuildDate>Thu, 15 Oct 2020 22:59:47 +0900</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>[Operating System - Chapter 4] 스레드와 병행성</title>
        <description>&lt;p&gt;이 포스팅은 공룡책으로 알려진 Operating System Concepts의 4장인 &lt;strong&gt;Threads &amp;amp; Concurrency&lt;/strong&gt;를 공부하면서 정리한 포스팅이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;4-스레드와-병행성-threads--concurrency&quot;&gt;4. 스레드와 병행성 (Threads &amp;amp; Concurrency)&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;대부분의 현대 운영체제는 한 프로세스가 다중 스레드를 포함하는 특성을 제공한다. 또한 다중 CPU를 제공하는 최신 다중 코어 시스템에서 스레드 사용을 통한 병렬 처리의 기회를 식별하는 것이 점차 중요해진다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;41-개요-overview&quot;&gt;4.1 개요 (Overview)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;스레드(Thread)는 CPU 이용의 기본 단위이다.&lt;/strong&gt; 스레드는 ID, PC(Program Counter), 레지스터 집합, 스택으로 구성된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;또한 스레드는 같은 프로세스에 속한 다른 스레드와 코드, 데이터 섹션, 그리고 열린 파일이나 신호와 같은 운영체제 자원들을 공유한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;전통적인 프로세스는 하나의 제어 스레드를 가지고 있지만, 현대 프로세스는 다수의 제어 스레드를 가지고 있기 때문에 해당 프로세스는 동시에 하나 이상의 작업을 수행할 수 있다.&lt;/p&gt;

&lt;p&gt;아래의 그림은 The difference between Single-threaded process and Multithreaded process에 대해서 나타낸다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/threads-and-concurrency-1.png&quot; style=&quot;width:80%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스레드는 ID, PC, stack, 레지스터 집합으로 구성되어 있다.&lt;/li&gt;
  &lt;li&gt;멀티스레드 프로세스에서 스레드간에 코드, 데이터, 파일, 신호등의 리소스를 공유한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;프로세스(process) (from wiki)&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;프로세스(process)는 컴퓨터에서 연속적으로 실행되고 있는 컴퓨터 프로그램을 말한다. 종종 스케줄링의 대상이 되는 작업(task)이라는 용어와 거의 같은 의미로 쓰인다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;411-동기-motivation&quot;&gt;4.1.1 동기 (Motivation)&lt;/h4&gt;

&lt;p&gt;현대의 컴퓨터와 모바일 기기에서 작동하는 거의 모든 소프트웨어 응용들은 다중 스레드를 이용한다. 하나의 어플리케이션은 여러 실행 흐름(스레드)을 가진 독립적인 프로세스로 구현된다.&lt;/p&gt;

&lt;p&gt;멀티 스레드 프로세스가 나오게 된 배경을 설명하기 위해 단일 스레드 프로세스의 defect(결핍)의 예를 들어보자.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;웹 서버를 예로 들어 보겠다.&lt;/p&gt;

  &lt;p&gt;하나의 분주한 웹 서버는 수천, 수만 개의 클라이언트들이 병행하게 접근할 수 있다.&lt;/p&gt;

  &lt;p&gt;만약 웹 서버가 전통적인 단일 스레드 프로세스로 작동한다면, 자신의 단일 프로세스로 한 번에 하나의 클라이언트만 서비스할 수 있게 되어 클라이언트는 자신의 요구가 서비스되기까지 매우 긴 시간을 기다려야 한다.&lt;/p&gt;

  &lt;p&gt;이러한 단점을 개선하기 위해서 여러 요청을 수행할 별도의 프로세스들을 만들 수도 있지만 이는 많은 리소스가 필요함으로 많은 오버헤드가 발생한다.&lt;/p&gt;

  &lt;p&gt;프로세스를 새로 만드는 것 보다 &lt;strong&gt;프로세스의 개념을 확장하여 한 프로세스가 다수의 실행 스레드를 가질 수 있도록 허용한다. 그들은 &lt;u&gt;프로세스가 한 번에 하나 이상의 일을 수행할 수 있도록 허용&lt;/u&gt;함으로써 문제를 해결한다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;이를 웹 서버에 적용 시켜보면, 웹 서버가 다중 스레드화 되게끔 만들어서 서버는 클라이언트의 요청을 listen 하는 별도의 스레드를 생성한다. 요청이 들어오면 다른 프로세스를 생성하는 것이 아니라, 요청을 서비스할 새로운 스레드를 생성하고 추가적인 요청을 listen 하기 위한 작업을 재개한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 예시와 비슷하게 &lt;strong&gt;대부분 운영체제 커널도 일반적으로 다중 스레드&lt;/strong&gt;이다. 예를 들어 Linux 시스템에서 시스템을 부트하는 동안 여러 커널 스레드가 생성된다. 각 스레드는 장치 관리, 메모리 관리 또는 인터럽트 처리와 같은 특정 작업을 수행한다.&lt;/p&gt;

&lt;h4 id=&quot;412-장점-benefits&quot;&gt;4.1.2 장점 (Benefits)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;다중 스레드 프로그래밍의 이점은 다음의 4가지 큰 부류로 나눌 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;응답성(responsiveness):&lt;/strong&gt; 대화형 어플리케이션을 다중 스레드화하면 어플리케이션의 일부분이 봉쇄되거나, 긴 작업을 수행하더라도 프로그램의 수행이 계속되는 것을 허용함으로써, 사용자에 대한 응답성을 증가시킨다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;자원 공유(resource sharing):&lt;/strong&gt; 스레드는 자동으로 그들이 속한 프로세스의 자원들과 메모리를 공유하기 때문에 스레드간의 통신 기법 없이 협업이 가능하다. (프로세스는 공유메모리 or IPC 기법등이 필요)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;경제성(economy):&lt;/strong&gt; 프로세스 생성보다 스레드를 활용 하는 것이 훨씬 경제적이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;규모 적응성(scalability):&lt;/strong&gt; 멀티 프로세서 구조에서 각각의 스레드가 다른 프로세서에서 병렬로 수행될 수 있기 때문에 규모 적응성이 뛰어나다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;42-다중-코어-프로그래밍-multicore-programming&quot;&gt;4.2 다중 코어 프로그래밍 (Multicore Programming)&lt;/h3&gt;

&lt;p&gt;다중 스레드 프로그래밍은 여러 컴퓨팅 코어를 보다 효율적으로 사용하고 병행성을 향상시키는 기법을 제공한다.&lt;/p&gt;

&lt;p&gt;아래의 그림과 같이 여러 코어가 있는 시스템에서 병행성은 시스템이 각 코어에 별도의 스레드를 할당할 수 있기 때문에 일부 스레드가 병렬로 실행될 수 있음을 의미한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/threads-and-concurrency-2.png&quot; style=&quot;width:50%&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;병행성(Concurrency)과 병렬성(Parallelism)의 차이&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;병행 시스템은 모든 작업이 진행되게 하여 둘 이상의 작업을 지원한다.&lt;/p&gt;

  &lt;p&gt;병렬 시스템은 둘 이상의 작업을 동시에 수행할 수 있따.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;따라서 병렬성 없이 병행성을 가질 수 있다. (단일 프로세서의 멀티 태스킹)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;421-프로그래밍-도전과제-programming-challenges&quot;&gt;4.2.1 프로그래밍 도전과제 (Programming Challenges)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;일반적으로 다중 코어 시스템을 위해 프로그래밍하기 위해서는 5개의 극복해야 할 도전 과제가 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;태스크 인식(identifying tasks):&lt;/strong&gt; 어플리케이션을 분석하여 독립된 병행 가능 태스크로 나눌 수 있는 영역을 찾는 작업이 필요하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;균형(balance):&lt;/strong&gt; 찾은 태스크들이 전체 작업에 균등한 기여도를 가지도록 나누는 것이 중요하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;데이터 분리(data spliting):&lt;/strong&gt; 태스크가 접근하고 조작하는 데이터는 개별 코어에서 사용할 수 있도록 나누어져야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;데이터 종속성(data dependency):&lt;/strong&gt; 테스크가 접근하는 데이터는 둘 이상의 태스크 사이에 종속성이 없는지 검토되어야 한다. (동기화 문제)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;시험 및 디버깅(testing and debugging):&lt;/strong&gt; 병행 프로그램을 시험하고 디버깅&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;422-병렬-실행의-유형-types-of-parallelism&quot;&gt;4.2.2 병렬 실행의 유형 (Types of Parallelism)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;데이터 병렬 실행&lt;/strong&gt;은 동일한 데이터의 부분집합을 다수의 계산 코어에 분배한 뒤 각 코어에서 동일한 연산을 실행하는데 초점을 맞춘다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;태스크 병렬 실행&lt;/strong&gt;은 데이터가 아니라 태스크(스레드)를 다수의 코어에 분배한다.&lt;/p&gt;

&lt;p&gt;아래의 그림은 데이터 병렬 실행과 테스크 병렬 실행을 모델링한 그림이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/threads-and-concurrency-3.png&quot; style=&quot;width:60%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;43-다중-스레드-모델-multithreading-models&quot;&gt;4.3 다중 스레드 모델 (Multithreading Models)&lt;/h3&gt;

&lt;p&gt;스레드를 위한 지원은 &lt;strong&gt;사용자 스레드(user threads)를 위해서는 사용자 수준&lt;/strong&gt;에서, 또는 &lt;strong&gt;커널 스레드(kernel threads)를 위해서는 커널 수준&lt;/strong&gt;에서 제공된다.&lt;/p&gt;

&lt;p&gt;사용자 스레드는 커널 위에서 지원되며 커널의 지원 없이 관리되지만 커널 스레드는 운영체제에 의해 직접 지원되고 관리된다.&lt;/p&gt;

&lt;p&gt;사용자 스레드와 커널 스레드의 연관 관계의 세 가지 일반적인 방법에 대해서 알아보자.&lt;/p&gt;

&lt;h4 id=&quot;431-다대일-모델-many-to-one-model&quot;&gt;4.3.1 다대일 모델 (Many to One Model)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;다대일(many to one) 모델은 아래 그림과 같이 많은 사용자 수준 스레드를 하나의 커널 스레드로 맵핑한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/threads-and-concurrency-4.png&quot; style=&quot;width:40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;한 스레드가 blocking 시스템 콜을 할 경우, 전체 프로세스가 봉쇄된다. 또한 한 번에 하나의 스레드만이 커널에 접근할 수 있기 때문에, 다중 스레드가 다중 코어 시스템에서 병렬로 실행될 수 없다.&lt;/p&gt;

&lt;h4 id=&quot;432-일대일-모델-one-to-one-model&quot;&gt;4.3.2 일대일 모델 (One to One Model)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;일대일(one to one) 모델은 아래의 그림과 같이 각 사용자 스레드를 각각 하나의 커널 스레드로 맵핑한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/threads-and-concurrency-4.png&quot; style=&quot;width:40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 모델에서는 하나의 스레드가 blocking 시스템 콜을 호출하더라도 다른 스레드가 실행될 수 있기 떄문에 다대일 모델보다 &lt;strong&gt;더 많은 병렬성&lt;/strong&gt;을 제공한다. 또한 이 모델은 다중 프로세서에서 다중 스레드가 병렬로 수행되는 것을 허용한다.&lt;/p&gt;

&lt;p&gt;ex) Linux, Windows, … 등이 일대일 모델을 구현한다.&lt;/p&gt;

&lt;h4 id=&quot;433-다대다-모델-many-to-many-model&quot;&gt;4.3.3 다대다 모델 (Many to Many Model)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;다대다 모델은 아래의 그림과 같이 여러 개의 사용자 수준 스레드를 그 보다 작은 수, 혹은 같은 수의 커널 스레드로 멀티플렉스 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/threads-and-concurrency-5.png&quot; style=&quot;width:40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;개발자는 필요한 만큼 많은 사용자 수준 스레드를 생성할 수 있다. 그리고 상응하는 커널 스레드가 다중 처리기에서 병렬로 수행될 수 있다. 또한 스레드가 blocking 시스템 콜을 발생시켰을 때, 커널이 다른 스레드의 수행을 스케줄 할 수 있다.&lt;/p&gt;

&lt;p&gt;다대다 모델을 변형시켜 많은 사용자 스레드를 적거나 같은 수의 커널 스레드로 멀티플렉스 시키지만 또한 한 사용자 스레드가 하나의 커널 스레드에만 연관되는 것을 허용하는 &lt;strong&gt;두 수준 모델(two level model)&lt;/strong&gt;을 사용할 수도 잇다.&lt;/p&gt;

&lt;p&gt;아래의 그림은 two level model을 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/threads-and-concurrency-6.png&quot; style=&quot;width:40%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;44-스레드-라이브러리-threads-library&quot;&gt;4.4 스레드 라이브러리 (Threads Library)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;스레드 라이브러리(threads library)는 프로그래머에게 스레드를 생성하고 관리하기 위한 API를 제공한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스레드 라이브러리를 구현하는데에는 주된 두 가지 방법이 있다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;커널의 지원 없이 완전히 사용자 공간에서만 라이브러리를 제공하는 것&lt;/li&gt;
  &lt;li&gt;운영체제에 의해 지원되는 커널 수준 라이브러리를 구현하는 것&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;현재는 POSIX Pthreads, Windows, Java의 세 종류 라이브러리가 주로 사용된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다수의 스레드를 생성하는 전략 2가지는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;비동기 스레딩(asynchronous threading):&lt;/strong&gt; 부모가 자식 스레드를 생성한 후 부모는 자신의 실행을 재개하여 부모와 자식 스레드가 서로 독립적으로 병행하게 실행되는 스레딩 방식 (다중 스레드 서버에서 주로 사용)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;동기 스레딩(synchronous threading):&lt;/strong&gt; 부모 스레드가 하나 이상의 자식 스레드를 생성하고 자식 스레드 모두가 종료할 때까지 기다렸다가 자신의 실행을 재개하는 스레딩 방식 (상당한 양의 데이터 공유를 수반)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래의 모든 스레드 예제의 스레딩 방식은 동기 스레딩 방식을 사용했다.&lt;/p&gt;

&lt;h4 id=&quot;441-pthreads&quot;&gt;4.4.1 Pthreads&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Pthreads는 POSIX(IEEE 1003.1c)가 스레드 생성과 동기화를 위해 재정한 표준 API이다.&lt;/strong&gt; 이것은 스레드의 동작에 관한 명세일 뿐이지 그것 자체를 구현한 것은 아니다.&lt;/p&gt;

&lt;p&gt;Linux와 macOS를 포함한 많은 시스템이 Pthreads 명세를 구현하고 있다.&lt;/p&gt;

&lt;h4 id=&quot;442-windows-스레드-windows-threads&quot;&gt;4.4.2 Windows 스레드 (Windows Threads)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Windows 스레드 라이브러리를 이용하여 스레드를 생성하는 기술은 많은 점에서 Pthreads 기법과 유사하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows API에서 스레드는 CreateThread() 함수에 의해 생성되고 Pthreads와 마찬가지로 이 함수에 스레드를 위한 속성의 집합이 전달된다.&lt;/p&gt;

&lt;p&gt;동기 스레딩 기법을 구현하기 위해서는 WaitForSingleObject(), WaitForMultipleObjects() API를 사용해야 한다.&lt;/p&gt;

&lt;h4 id=&quot;443-java-스레드-java-thread&quot;&gt;4.4.3 Java 스레드 (Java Thread)&lt;/h4&gt;

&lt;p&gt;스레드는 Java 프로그램의 프로그램 실행의 근본적인 모델이고, Java 언어와 API는 스레드 생성과 관리를 지원하는 풍부한 특성을 제공한다. &lt;strong&gt;모든 Java 프로그램은 적어도 하나의 단일 제어 스레드를 포함하고 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Java에서 스레드를 생성하려면 Thread 객체를 생성하고 Runnable을 구현하는 클래스의 인스턴스를 전달한 다음 Thread 객체의 start() 메소드를 호출해야 한다.&lt;/p&gt;

&lt;p&gt;아래는 Runnable 인터페이스를 구현하는 클래스가 스레드를 생성하는 방법이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am a thread.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;새 thread 객체에 start() 메소드를 호출하면 두 가지 작업이 수행된다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;메모리가 할당되고, JVM 내에 새로운 스레드가 초기화된다.&lt;/li&gt;
  &lt;li&gt;run() 메소드를 호출하면 스레드가 JVM에 의해 수행될 자격을 갖게 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;자바의 부모 스레드는 worker.join() 메소드를 통해서 자식 스레드를 기다릴 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.4.3.1 Java Executor 프레임워크 (Java Executor Framework)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;자바 1.5부터 개발자에게 스레드 생성 및 통신에 대한 제어 기능을 크게 향상시키는 몇 가지 새로운 병행 처리 기능을 도입하였다. 이것이 바로 Executor Framework이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thread 객체를 명시적으로 생성하는 대신 Executor 인터페이스를 중심으로 스레드 생성을 구성한다.&lt;/p&gt;

&lt;p&gt;아래의 코드는 Executor 인터페이스를 나타낸다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Executor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이전에는 별도의 Thread 객체를 만들고 start() 메소드를 호출하였지만 그 대신 Executor를 사용하라는 것이다.&lt;/p&gt;

&lt;p&gt;아래의 코드는 Executor가 어떻게 사용되는지에 대해서 알려준다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Executor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Executor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 방법은 &lt;strong&gt;스레드 생성을 실행에서 분리할 뿐만 아니라 병행하게 실행되는 작업 간의 통신 기법을 제공한다는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;결과를 반환할 수 없는 Runnable 과 달리 java.util.concurrent 패키지는 Callable 인터페이스를 추가로 정의하여 Future 객체를 반환할 수 있게 해준다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;JVM과 호스트 운영체제 (The JVM and the Host Operating System)&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;JVM은 일반적으로 호스트 운영체제 위에서 구현된다. &lt;strong&gt;이 설정을 통해 JVM은 하부 운영체제의 구현 세부 사항을 숨기고 Java 프로그램이 JVM을 지원하는 모든 플랫폼에서 작동할 수 있도록 일관되고 추상적인 환경을 제공할 수 있다.&lt;/strong&gt; JVM 명세는 Java 스레드가 하부 운영체제에 매핑되는 방법을 명시하지 않고 대신 각 JVM의 구현에 맡긴다. 또한 Java 스레드 라이브러리와 호스트 운영체제의 스레드 라이브러리간(Pthreads API, Windows API, …)에 관계가 있을 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;45-암묵적-스레딩-implicit-threading&quot;&gt;4.5 암묵적 스레딩 (Implicit Threading)&lt;/h3&gt;

&lt;p&gt;다중 코어 처리의 지속적 성장에 따라 수백 또는 수천 개의 스레드를 가진 응용이 등장하게 되었다.&lt;/p&gt;

&lt;p&gt;많은 수의 스레드를 사용하는 어플리케이션의 병행 및 병렬 설계를 도와주는 한 가지 방법은 &lt;strong&gt;스레딩의 생성과 관리 책임을 어플리케이션 개발자로부터 &lt;u&gt;컴파일러와 실행시간 라이브러리에게 넘겨주는 암묵적 스레딩 기법&lt;/u&gt;을 사용하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;암묵적 스레딩 전략은 일반적으로 응용 프로그램 개발자가 병렬로 실행할 수 있는 스레드가 아닌 작업을 식별해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;즉, 암묵적 스레딩 전략에서는 개발자는 병렬 작업만 식별하면 되고 라이브러리는 스레드 생성 및 관리에 대한 특정 세부 사항을 결정하면 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;451-스레드-풀&quot;&gt;4.5.1 스레드 풀&lt;/h4&gt;

&lt;p&gt;다중 스레드 프로세스의 여러 문제점을 해결해 줄 수 있는 방법이 &lt;strong&gt;스레드 풀(Thread pool) 방법&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;스레드 풀의 기본 아이디어는 프로세스를 시작할 때 아예 일정한 수의 스레드들을 미리 풀로 만들어두는 것이다.&lt;/strong&gt; 이 스레드들은 평소에 하는 일 없이 일감을 기다리게 된다. 서버는 스레드를 생성하지 않고 요청을 받으면 대신 스레드 풀에 제출하고 추가 요청 대기를 재개한다. 풀에 사용 가능한 스레드가 있으면 깨어나고 요청이 즉시 서비스 된다. 스레드가 서비스를 완료하면 풀로 돌아가서 더 많은 작업을 기다린다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;스레드 풀의 장점&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;새 스레드를 만들어 주기보다 기존 스레드로 서비스해 주는 것이 종종 더 빠르다.&lt;/li&gt;
  &lt;li&gt;스레드 풀은 임의 시각에 존재할 스레드 개수에 제한을 둔다.&lt;/li&gt;
  &lt;li&gt;태스크를 생성하는 방법을 태스크로부터 분리하면 태스크의 실행을 다르게 할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;4.5.1.1 Java 스레드 풀&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;java.util.concurrent 패키지의 여러 종류의 스레드 풀 구조에 대한 API에 대해 알아보도록 하겠다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;단일 스레드 Executor, newSingleThreadExecutor()는 크기가 1인 스레드 풀을 생성한다.&lt;/li&gt;
  &lt;li&gt;고정 스레드 Executor, newFixedThreadPool(int size)는 지정된 수의 스레드가 있는 스레드 풀을 생성한다.&lt;/li&gt;
  &lt;li&gt;캐시 스레드 Executor, newCachedThreadPool()는 많은 경우 스레드를 재사용하는 무제한 스레드 풀을 생성한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;스레드 풀을 생성하고 execute() 메소드를 사용하여 풀의 스레드에서 실행할 작업을 제출한다. shutdown()메소드가 호출되면 스레드 풀은 추가 작업을 거부하고 기존의 모든 작업의 실행이 완료되면 종료한다.&lt;/p&gt;

&lt;h4 id=&quot;452-fork-join&quot;&gt;4.5.2 Fork Join&lt;/h4&gt;

&lt;p&gt;fork-join 모델이란 동기식 모델으로 암시적 스레딩에 사용된다면 라이브러리가 생성할 실제 스레드 수를 결정하는 동기 버전의 스레드 풀이다.&lt;/p&gt;

&lt;p&gt;아래의 그림은 fork-join 모델의 그림을 나타낸 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/threads-and-concurrency-7.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.5.2.1 Java에서의 Fork Join&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Java는 Quicksort 및 Mergesort와 같은 재귀 분할-정복 알고리즘과 함께 사용되도록 설계된 버전 1.7 API에 Fork join 라이브러리를 도입하였다.&lt;/p&gt;

&lt;p&gt;이 라이브러리를 사용하여 분할-정복 알고리즘을 구현할 때 분할 단계 동안 별도의 작업이 fork 되고 원래 문제의 작은 부분집합이 할당된다.&lt;/p&gt;

&lt;p&gt;아래의 그림은 이 모델의 그림을 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/threads-and-concurrency-8.png&quot; style=&quot;width:50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java의 fork-join 모델에서 흥미로운 점은 라이브러리가 작업자 스레드 풀을 생성하고 사용 가능한 작업자 간 부하의 균형을 조정하는 작업 관리에 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;453-openmp&quot;&gt;4.5.3 OpenMP&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;OpenMP는 C, C++, FORTRAN으로 작성된 API와 컴파일러 디렉티브의 집합이다.&lt;/strong&gt; OpenMP는 공유 메모리 환경에서 병렬 프로그래밍을 할 수 있도록 도움을 준다.&lt;/p&gt;

&lt;p&gt;OpenMP는 병렬로 실행될 수 있는 블록을 찾아 &lt;strong&gt;병렬 영역(parallel regions)&lt;/strong&gt;이라고 부른다. 어플리케이션 개발자는 자신들의 코드 중 병렬 영역에 컴파일러 디렉티브를 삽입한다.&lt;/p&gt;

&lt;p&gt;아래의 그림은 OpenMP를 사용하는 C 프로그램의 예제이다.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;omp.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// sequential code&lt;/span&gt;

    &lt;span class=&quot;cp&quot;&gt;#pragma omp parallel {
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am a parallel region.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// sequential code&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OpenMP가 &lt;code class=&quot;highlighter-rouge&quot;&gt;#pragma omp parallel&lt;/code&gt;과 같은 컴파일러 디렉티브를 만나게 되면 &lt;strong&gt;시스템의 코어 개수만큼 스레드를 생성&lt;/strong&gt;한다.&lt;/p&gt;

&lt;p&gt;OpenMP는 병렬화를 위한 디렉티브를 제공할 뿐만 아니라 개발자가 병렬화 수준을 선택할 수 있게 한다. (필요한 스레드 개수 지정 및 데이터 공유 여부, …)&lt;/p&gt;

&lt;h4 id=&quot;454-grand-central-dispatch&quot;&gt;4.5.4 Grand Central Dispatch&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Grand Central Dispatch(이하 GCD)는 macOS 및 iOS 운영체제를 위해 개발자가 병렬로 실행될 코드 섹션(태스크)을 식별할 수 있도록 하는 런타임 라이브러리, API 및 언어 확장의 조합이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GCD는 실행시간 수행을 위해 태스크를 디스패치 큐에 넣어서 스케줄 한다. 큐에서 태스크를 제거할 때 관리하는 스레드 풀에서 가용 스레드를 선택하여 태스크를 할당한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GCD는 직렬(serial)과 병행(concurrent)의 두 가지 유형의 디스패치 큐를 유지한다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;직렬 큐에 넣어진 태스크는 &lt;strong&gt;FIFO&lt;/strong&gt; 순서대로 제거된다.&lt;/li&gt;
  &lt;li&gt;병행 큐에 넣어진 태스크는 FIFO 순서로 제거되지만 한 번에 여러 태스크가 제거되어 &lt;strong&gt;병렬로 실행&lt;/strong&gt;될 수 있게 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여러 시스템 전체의 병행 큐가 존재하며 4가지 주요 서비스 품질 클래스로 나뉜다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;QOS_CLASS_USER_INTERACTIVE (사용자 대화형 클래스)&lt;/li&gt;
  &lt;li&gt;QOS_CLASS_USER_INITIATED (사용자 시작 클래스)&lt;/li&gt;
  &lt;li&gt;QOS_CLASS_UTILITY (유틸리티 클래스)&lt;/li&gt;
  &lt;li&gt;QOS_CLASS_BACKGROUND (백그라운드 클래스)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;내부적으로 GCD의 스레드 풀은 POSIX 스레드로 구성된다. GCD는 풀을 적극적으로 관리하여 응용 프로그램 요구 및 시스템 용량에 따라 스레드 수가 늘어나거나 줄어들게 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;46-스레드와-관련된-문제들-threading-issues&quot;&gt;4.6 스레드와 관련된 문제들 (Threading Issues)&lt;/h3&gt;

&lt;h4 id=&quot;461-fork-및-exec-시스템-콜-the-fork-and-exec-system-calls&quot;&gt;4.6.1 Fork() 및 Exec() 시스템 콜 (The fork() and exec() System Calls)&lt;/h4&gt;

&lt;p&gt;우리는 다중 스레드 프로그램에서 fork()와 exec()의 의미에 대해서 생각해 보아야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;만일 한 프로그램의 스레드가 fork()를 호출하면 새로운 프로세스는 모든 스레드를 복제해야 하는가 아니면 한 개의 스레드만 가지는 프로세스여야 하는가?
    &lt;ul&gt;
      &lt;li&gt;UNIX 시스템은 fork() API로써 이 둘의 기능을 다 지원한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;보통 어떤 스레드가 exec() 시스템 콜을 부르면 exec()의 매개변수로 지정된 프로그램이 모든 스레드를 포함한 전체 프로세스를 대체시킨다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;우리는 운영체제에서 지원해주는 기능에 따라 적절히 fork()와 exec()를 사용해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;462-신호-처리-signal-handling&quot;&gt;4.6.2 신호 처리 (Signal Handling)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;신호는 UNIX에서 프로세스에 어떤 이벤트가 일어났음을 알려주기 위해 사용된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;신호는 비동기적, 동기적으로 발생할 수 있는데 이와 상관없이 모든 신호는 다음과 같은 형태로 전달되어야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;신호는 특정 이벤트가 일어나야 생성된다.&lt;/li&gt;
  &lt;li&gt;생성된 신호가 프로세스에 전달된다.&lt;/li&gt;
  &lt;li&gt;신호가 전달되면 반드시 처리되어야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;모든 신호는 둘 중 하나의 처리기에 의해 처리된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;디폴트 신호 처리기&lt;/li&gt;
  &lt;li&gt;사용자 정의 신호 처리기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;프로세스가 여러 스레드를 가지고 있는 경우 동기식 신호는 그 신호를 야기한 스레드에 전달되어야 하고 다른 스레드에 전달되면 안 된다. 반면에 비동기 신호의 경우에는 그 프로세스 내 모든 스레드에 전달되어야 한다.&lt;/p&gt;

&lt;h4 id=&quot;463-스레드-취소-thread-cancellation&quot;&gt;4.6.3 스레드 취소 (Thread Cancellation)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;스레드 취소(thread cancellation)는 스레드가 끝나기 전에 그것을 강제 종료시키는 작업을 일컫는다.&lt;/strong&gt; (ex. 여러 스레드가 데이터베이스를 병렬로 검색하고 있다가 그 중 한 스레드가 결과를 찾았다면 나머지 스레드는 취소 되어야 하는 경우, …)&lt;/p&gt;

&lt;p&gt;이 처럼 취소되어야 할 스레드를 &lt;strong&gt;목적 스레드(target thread)&lt;/strong&gt;라고 부른다. 목적 스레드는 다음과 같은 두 가지 방식으로 취소할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;비동기식 취소(asynchronous cancellation):&lt;/strong&gt; 한 스레드가 즉시 목적 스레드를 강제 종료시킨다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;지연 취소(deferred cancellation):&lt;/strong&gt; 목적 스레드가 주기적으로 자신이 강제 종료 되어야 할지를 점검한다. (질서 정연하게 강제 종료 가능)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;스레드 취소를 어렵게 만드는 것은 취소 스레드들에 할당된 자원의 문제가 가장 크기 때문에 이를 잘 고려해서 스레드 취소를 해야 한다.&lt;/p&gt;

&lt;p&gt;Pthreads에서는 pthread_cancel() 함수를 사용하여 스레드를 취소할 수 있다. pthread_cancel()을 호출하면 &lt;u&gt;대상 스레드를 취소하라는 요청만 표시&lt;/u&gt;된다. 그러나 실제 취소는 요청을 처리하기 위해 대상 스레드가 설정되는 방식에 달려 있다. 대상 스레드가 최종적으로 취소되면 취소 스레드의 pthread_join() 호출이 반환된다.&lt;/p&gt;

&lt;p&gt;Pthreads는 아래와 같이 3가지 취소 모드를 지원한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/threads-and-concurrency-9.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기본 스레드 취소 유형은 deferred 이다. 즉, 스레드가 취소 점에 도달한 경우에만 취소가 발생한다.&lt;/p&gt;

&lt;p&gt;또한 Pthreads는 스레드가 취소될 때 &lt;strong&gt;정리 핸들러(clean handler)&lt;/strong&gt;라고 하는 스레드가 획득한 모든 자원을 해제할 수 있는 함수를 제공한다.&lt;/p&gt;

&lt;p&gt;Java의 스레드 취소는 Pthread의 지연 취소와 유사한 정책을 사용한다. 스레드를 취소하려면 thread객체.interrupt() 메소드를 호출하여 대상 스레드의 인터럽트 상태를 true로 설정하면 된다.&lt;/p&gt;

&lt;h4 id=&quot;464-스레드-로컬-저장장치-thread-local-storage&quot;&gt;4.6.4 스레드-로컬 저장장치 (Thread-Local Storage)&lt;/h4&gt;

&lt;p&gt;한 프로세스에 속한 스레드들은 그 프로세스의 데이터를 스레드간에 모두 공유한다. 하지만 상황에 따라서는 각 스레드가 &lt;strong&gt;자기만 액세스할 수 있는 데이터를 가져야 할 필요도 있다. 그러한 데이터를 스레드-로컬 저장장치(thread-local storage, TLS)&lt;/strong&gt;라고 부른다.&lt;/p&gt;

&lt;p&gt;ex) 트랜잭션 처리 시스템에서 각 트랜잭션을 독립된 스레드가 처리해 준다고 가정할 때 스레드마다 고유한 식별자를 연관시키기 위해서는 TLS가 있어야만 한다.&lt;/p&gt;

&lt;h4 id=&quot;465-스케줄러-액티베이션-scheduler-activations&quot;&gt;4.6.5 스케줄러 액티베이션 (Scheduler Activations)&lt;/h4&gt;

&lt;p&gt;many to many 또는 two level model을 구현하는 많은 시스템은 사용자와 커널 스레드 사이에 중간 자료구조를 둔다. 이 자료구조는 통상 &lt;strong&gt;경량 프로세스 또는 LWP&lt;/strong&gt;라고 불리며 아래의 그림과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/threads-and-concurrency-10.png&quot; style=&quot;width:40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;각 LWP는 하나의 커널 스레드에 부속되어 있으며 Processor가 스케줄 하는 대상은 바로 이 커널 스레드이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;사용자 스레드 라이브러리와 커널 스레드 간의 통신 방법의 하나는 스케줄러 액티베이션이라고 알려진 방법이다.&lt;/strong&gt; 커널은 어플리케이션에 LWP의 집합을 제공하고 어플리케이션은 사용자 스레드를 가용한 가상 처리기로 스케줄 한다. 커널은 어플리케이션에 특정 이벤트에 대해 알려줘야 한다. 이 프로시저를 &lt;strong&gt;upcall&lt;/strong&gt;이라고 부른다.&lt;/p&gt;

&lt;p&gt;Upcall은 스레드 라이브러리의 upcall 처리기에 의해 처리되고, upcall 처리기는 가상 처리기상에서 실행되어야 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;47-운영체제-사례-operating-system-examples&quot;&gt;4.7 운영체제 사례 (Operating System Examples)&lt;/h3&gt;

&lt;h4 id=&quot;471-windows-스레드-windows-threads&quot;&gt;4.7.1 Windows 스레드 (Windows Threads)&lt;/h4&gt;

&lt;p&gt;Windows 어플리케이션들은 프로세스 형태로 실행되며 이들 각 프로세스는 한개 또는 그 이상의 스레드를 가질 수 있다. Windows는 사용자 수준 스레드 하나마다 커널 스레드 하나가 맵핑되는 일대일 대응을 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;스레드의 일반적인 구성요소는 다음과 같다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;각 스레드를 유일하게 지목하는 스레드 ID&lt;/li&gt;
  &lt;li&gt;처리기의 상태를 나타내는 레지스터 집합&lt;/li&gt;
  &lt;li&gt;프로그램 카운터(PC)&lt;/li&gt;
  &lt;li&gt;사용자 모드에서 실행될 때 필요한 사용자 스택, 커널 모드에서 실행될 때 필요한 커널 스택&lt;/li&gt;
  &lt;li&gt;실행 시간 라이브러리와 동적 링크 라이브러리(DLL) 등이 사용하는 개별 데이터 저장 영역&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;스레드의 주요 자료 구조는 다음과 같다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ETHREAD: 실행 스레드 블록(executive thread block)
    &lt;ul&gt;
      &lt;li&gt;스레드가 속한 프로세스를 가리키는 포인터와 스레드가 실행을 시작해야 할 루틴의 주소 등이 있다.&lt;/li&gt;
      &lt;li&gt;ETHREAD는 KTHREAD에 대한 포인터도 가지고 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;KTHREAD: 커널 스레드 블록(kernel thread block)
    &lt;ul&gt;
      &lt;li&gt;스레드의 스케줄링 및 동기화 정보를 가지고 있다.&lt;/li&gt;
      &lt;li&gt;커널 모드에서 실행될 때 사용되는 커널 스택과 TEB에 대한 포인터를 가지고 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TEB: 스레드 환경 블록(thread environment block)
    &lt;ul&gt;
      &lt;li&gt;스레드 식별자, 사용자 모드 스택 및 TLS를 위한 배열을 가지고 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;ETHREAD와 KTHREAD는 모두 커널 안에 존재하지만 TEB는 사용자 모드에서 실행될 때 접근되는 사용자 공간 자료 구조이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래의 그림은 Windows 스레드의 구조를 나타낸 그림이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/threads-and-concurrency-11.png&quot; style=&quot;width:60%&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;472-linux-스레드-linux-threads&quot;&gt;4.7.2 Linux 스레드 (Linux Threads)&lt;/h4&gt;

&lt;p&gt;Linux는 프로세스와 스레드를 구별하지 않는다. &lt;strong&gt;사실 Linux는 프로그램 내의 제어 흐름을 나타내기 위하여 프로세스나 스레드보다는 &lt;u&gt;태스크&lt;/u&gt;라는 용어를 사용한다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;clone()이 호출될 때 부모와 자식 태스크가 자료구조를 얼마나 공유할지 결정하는 플래그의 집합이 전달된다. 이는 아래의 그림과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/threads-and-concurrency-12.png&quot; style=&quot;width:60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Linux 커널이 태스크를 표현하는 방식 때문에 다양한 공유 수준이 가능하다. 시스템의 태스크마다 고유한 커널 자료구조가(stuct task_strcut) 존재한다. 이 자료구조는 태스크의 데이터를 저장하는 것이 아니라 데이터가 저장된 다른 자료구조를 가리키는 포인터를 포함한다.&lt;/p&gt;

&lt;p&gt;이러한 태스크를 표현하는 방식 때문에 clone()을 사용해서 태스크간에 다양한 공유 수준이 가능하다. 또한 clone() 시스템 콜의 융통성은 컨테이너 개념으로 확장될 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이번장은 나에게 익숙하지 않은 개념들이 많아서 이해하는데 어려웠다!!! 하지만, 이러한 기반 기술들은 모든 기술의 기초이기 때문에 추후에 꼭 한번 더 살펴볼 것을 기약하고 다음 장인 CPU Scheduling 으로 넘어가도록 하겠다.&lt;/p&gt;

</description>
        <pubDate>Wed, 14 Oct 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/computer-science(cs)/2020/10/14/Threads-and-Concurrency.html</link>
        <guid isPermaLink="true">http://localhost:4000/computer-science(cs)/2020/10/14/Threads-and-Concurrency.html</guid>
        
        <category>Operating-System</category>
        
        <category>CS</category>
        
        <category>Threads</category>
        
        <category>Concurrency</category>
        
        
        <category>Computer-Science(CS)</category>
        
      </item>
    
      <item>
        <title>[Operating System - Chapter 3] 프로세스</title>
        <description>&lt;p&gt;이 포스팅은 공룡책으로 알려진 Operating System Concepts의 3장인 Process를 공부하면서 정리한 포스팅이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;3-프로세스-process&quot;&gt;3. 프로세스 (Process)&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;프로세스 : 실행 중인 프로그램을 말한다. 프로세스는 현대의 컴퓨팅 시스템에서의 작업의 단위이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;시스템은 사용자 코드를 실행하는 프로세스와 운영체제 코드를 실행하는 프로세스들의 집합이다. 이들 모든 프로세스는 잠재적으로 병행 실행이 가능하고 CPU는 이들 프로세스 가운데서 &lt;strong&gt;다중화(multiplex)&lt;/strong&gt; 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;다중화(Multiplex)&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;여러 프로세스들 사이에서 이들을 처리(?)한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;31-프로세스-개념-process-concept&quot;&gt;3.1 프로세스 개념 (Process Concept)&lt;/h3&gt;

&lt;h4 id=&quot;311-프로세스-the-process&quot;&gt;3.1.1 프로세스 (The Process)&lt;/h4&gt;

&lt;p&gt;비공식적으로, 프로세스란 실행 중인 프로그램이다. 프로세스의 현재 활동의 상태는 &lt;strong&gt;프로그램 카운터(PC) 값&lt;/strong&gt;과 &lt;strong&gt;프로세서 레지스터의 내용&lt;/strong&gt;으로 나타낸다.&lt;/p&gt;

&lt;p&gt;프로세스의 메모리는 아래의 그림과 같이 배치되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/process-1.png&quot; style=&quot;width:40%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;text :&lt;/strong&gt; 실행 코드&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;data :&lt;/strong&gt; 전역 변수&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;heap :&lt;/strong&gt; 프로그램 실행 중에 동적으로 할당되는 메모리&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;stack :&lt;/strong&gt; 함수를 호출할 때 임시 데이터 저장장소 (ex. 함수 매개변수, 복귀 주소, 지역변수, …)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;stack 및 heap 섹션은 Runtime에 서로의 방향으로 더 커질 수 있음으로 &lt;u&gt;운영체제는 서로 겹치지 않도록 해야 한다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프로그램(Program)은 명령어 리스트를 내용으로 가진 디스크에 저장된 파일(실행 파일이라고 불림)과 같은 &lt;u&gt;수동적인 존재(passive entity)&lt;/u&gt;이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프로세스(Process)는 다음에 실행할 명령어를 지정하는 프로그램 카운터(PC)와 관련 자원의 집합을 가진 &lt;u&gt;능동적인 존재(active entity)&lt;/u&gt;이다. &lt;u&gt;실행 파일이 메모리에 적재될 때 프로그램은 프로세스가 된다.&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;프로세스 자체가 다른 개체를 위한 실행 환경으로 동작할 수 있다는 사실에 주목해야 한다. (ex. JVM)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JVM은 적재된 Java 코드를 해석하고 그 코드를 대신하여 원 기계어를 이용하여 행동을 취하는 프로세스로서 프로그램을 실행한다.&lt;/p&gt;

  &lt;p&gt;java 명령어는 JVM을 보통의 프로세스처럼 실행시키고, JVM은 Java 프로그램을 가상기계 안에서 실행한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;312-프로세스-상태-process-state&quot;&gt;3.1.2 프로세스 상태 (Process State)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;프로세스는 실행되면서 그 상태가 변한다.&lt;/strong&gt; 프로세스의 상태는 부분적으로 그 프로세스의 현재의 활동에 따라서 정의된다.&lt;/p&gt;

&lt;p&gt;아래의 Status Diagram을 참고해 프로세스의 상태에 대해서 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/process-2.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;new :&lt;/strong&gt; 프로세스가 생성 중이다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;running :&lt;/strong&gt; 명령어들이 실행되고 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;waiting :&lt;/strong&gt; 프로세스가 어떤 이벤트(입출력 완료 또는 신호의 수신 같은)가 일어나기를 기다린다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ready :&lt;/strong&gt; 프로세스가 Processor에 할당되기를 기다린다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;terminated :&lt;/strong&gt; 프로세스의 실행이 종료되었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;어느 한 순간에 한 Processor의 코어에서는 오직 하나의 프로세스만이 실행된다는 것을 인식하는 것이 중요하다.&lt;/strong&gt; 그렇지만 많은 프로세스가 &lt;strong&gt;ready or waiting 상태&lt;/strong&gt;에 있을 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;313-프로세스-제어-블록-process-control-block&quot;&gt;3.1.3 프로세스 제어 블록 (Process Control Block)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;각 프로세스는 운영체제에서 프로세스 제어 블록(process control block, PCB)에 의해 표현된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래의 그림은 PCB를 나타내며 이를 통해 PCB에 대해서 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/process-3.png&quot; style=&quot;width:40%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;프로세스 상태 :&lt;/strong&gt; 프로세스의 상태(new, ready, running, waiting, …)를 나타낸다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;프로그램 카운터 :&lt;/strong&gt; 프로그램 카운터는 이 프로세스가 다음에 실행할 명령어의 주소를 가리킨다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CPU 레지스터들 :&lt;/strong&gt; 레지스터들과 상태 코드에 대한 정보가 포함된다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CPU-스케줄링 정보 :&lt;/strong&gt; 프로세스 우선순위, 스케줄 큐에 대한 포인터와 다른 스케줄 매개변수를 포함한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;메모리 관리 정보 :&lt;/strong&gt; 운영체제에 의해 사용되는 메모리 시스템에 따라 기준 레지스터와 한계 레지스터의 값, 운영체제가 사용하는 메모리 시스템에 따라 페이지 테이블 또는 세그먼트 테이블 등과 같은 정보를 포함한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;회계 정보 :&lt;/strong&gt; CPU 사용 시간과 경과된 실시간, 시간 제한, 계정 번호, 잡 또는 프로세스 번호 등을 포함한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;입출력 상태 정보 :&lt;/strong&gt; 프로세스에 할당된 입출력 장치들과 열린 파일의 목록 등을 포함한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;요약하면 PCB는 약간의 회계 데이터와 함께 프로세스를 시작시키거나 다시 시작시키는데 필요한 모든 데이터를 위한 저장소의 역할을 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;314-스레드-threads&quot;&gt;3.1.4 스레드 (Threads)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;프로세스의 개념을 확장하여 한 프로세스가 다수의 실행 스레드를 가질 수 있도록 허용한다. 그들은 따라서 &lt;u&gt;프로세스가 한 번에 하나 이상의 일을 수행할 수 있도록 허용&lt;/u&gt;한다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;스레드 활용 예시&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;ex) 다중 스레드 워드 프로세서는 하나의 스레드에 사용자 입력 관리를 맡기는 동안 다른 스레드가 철자 검사기를 수행하도록 만들 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;32-프로세스-스케줄링-process-scheduling&quot;&gt;3.2 프로세스 스케줄링 (Process Scheduling)&lt;/h3&gt;

&lt;p&gt;다중 프로그래밍의 목적은 &lt;strong&gt;CPU 이용을 최대화&lt;/strong&gt;하기 위하여 항상 어떤 프로세스가 실행되도록 하는 데 있다.&lt;/p&gt;

&lt;p&gt;시분할의 목적은 각 프로그램이 실행되는 동안 &lt;strong&gt;사용자가 상호 작용할 수 있도록 프로세스들 사이에서 CPU코어를 빈번하게 교체&lt;/strong&gt;하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;위의 목적을 달성하기 위해 프로세스 스케줄러(Process Scheduler)는 코어에서 실행 가능한 여러 프로세스 중에서 하나의 프로세스를 선택한다.&lt;/strong&gt; 다중 코어 시스템은 한 번에 여러 프로세스를 실행할 수 있다.&lt;/p&gt;

&lt;p&gt;현재 메모리에 있는 프로세스 수를 &lt;strong&gt;다중 프로그래밍 정도&lt;/strong&gt;라고 한다.&lt;/p&gt;

&lt;h4 id=&quot;321-스케줄링-큐-scheduling-queue&quot;&gt;3.2.1 스케줄링 큐 (Scheduling Queue)&lt;/h4&gt;

&lt;p&gt;프로세스가 시스템에 들어가면 &lt;strong&gt;준비 큐(Ready Queue)&lt;/strong&gt;에 들어가서 준비 상태가 되어 CPU 코어에서 실행되기를 기다린다.&lt;/p&gt;

&lt;p&gt;I/O 완료와 같은 특정 이벤트가 발생하기를 기다리는 프로세스는 &lt;strong&gt;대기 큐(Wait Queue)&lt;/strong&gt;에 삽입된다.&lt;/p&gt;

&lt;p&gt;프로세스 스케줄링의 일반적인 표현은 아래와 같은 &lt;strong&gt;큐잉 다이어그램&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/process-4.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;원은 큐에 서비스를 제공하는 자원을 나타내고 화살표는 시스템의 프로세스의 흐름을 나타낸다. 이 다이어그램을 통해서 말하고 싶은 것은 3가지이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;프로세스가 I/O 요청을 공표한 다음 I/O 대기 큐에 놓일 수 있다.&lt;/li&gt;
  &lt;li&gt;프로세스는 새 자식 프로세스를 만든 다음 자식의 종료를 기다리는 동안 대기 큐에 놓일 수 있다.&lt;/li&gt;
  &lt;li&gt;인터럽트 또는 타임슬라이스가 만료되어 프로세스가 코어에서 강제로 제거되어 준비 큐로 돌아갈 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;322-cpu-스케줄링-cpu-scheduling&quot;&gt;3.2.2 CPU 스케줄링 (CPU Scheduling)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;CPU 스케줄러의 역할은 준비 큐에 있는 프로세스 중에서 선택된 하나의 프로세스에 CPU 코어를 할당하는 것이다.&lt;/strong&gt; CPU 스케줄러는 CPU를 할당하기 위한 새 프로세스를 자주 선택해야 한다.&lt;/p&gt;

&lt;h4 id=&quot;323-문맥-교환-context-switch&quot;&gt;3.2.3 문맥 교환 (Context Switch)&lt;/h4&gt;

&lt;p&gt;인터럽트는 운영체제가 CPU 코어를 현재 작업에서 뺏어 내어 &lt;strong&gt;커널 루틴&lt;/strong&gt;을 실행할 수 있게 한다. 이러한 연산은 범용 시스템에서는 자주 발생한다. &lt;strong&gt;인터럽트가 발생하면 시스템은 인터럽트 처리가 끝난 후에 &lt;u&gt;문맥(Context)&lt;/u&gt;을 복구할 수 있도록 현재 실행 중인 프로세스의 문맥을 저장할 필요가 있다. 이는 PCB에 저장된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;문맥(Context)은 CPU 레지스터의 값, 프로세스 상태, 메모리 관리 정보 등을 포함한다.&lt;/p&gt;

&lt;p&gt;CPU 코어를 다른 프로세스로 교환하려면 이전의 프로세스의 상태를 보관하고 새로운 프로세스의 보관된 상태를 복구하는 작업이 필요하다. 이 작업은 &lt;strong&gt;문맥 교환(context switch)&lt;/strong&gt;이라고 하고 아래의 그림에 묘사되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/process-5.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;운영체제가 복잡할수록, 문맥 교환 시 해야만 하는 작업의 양이 더 많아진다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;33-프로세스에-대한-연산-operation-on-processes&quot;&gt;3.3 프로세스에 대한 연산 (Operation on Processes)&lt;/h3&gt;

&lt;p&gt;대부분 시스템 내의 프로세스들은 병행 실행될 수 있으며, 반드시 동적으로 생성되고, 제거되어야 한다. 그러므로 운영체제는 프로세스 생성 및 종료를 위한 기법을 제공해야 한다.&lt;/p&gt;

&lt;h4 id=&quot;331-프로세스-생성-process-creation&quot;&gt;3.3.1 프로세스 생성 (Process Creation)&lt;/h4&gt;

&lt;p&gt;프로세스가 실행되는 동안 프로세스는 여러 개의 새로운 프로세스들을 생성할 수 있다.&lt;/p&gt;

&lt;p&gt;생성하는 프로세스를 &lt;strong&gt;부모 프로세스&lt;/strong&gt;라고 부르고, 새로운 프로세스는 &lt;strong&gt;자식 프로세스&lt;/strong&gt;라고 부른다. 이 새로운 프로세스들은 각각 다시 다른 프로세스들을 생성할 수 있으며 그 결과 &lt;strong&gt;&lt;u&gt;프로세스의 트리(The tree of processes)&lt;/u&gt;&lt;/strong&gt;를 형성한다.&lt;/p&gt;

&lt;p&gt;현대 운영체제들은 유일한 &lt;strong&gt;프로세스 식별자(pid)&lt;/strong&gt;를 사용하여 프로세스를 구분하는데 이 식별자는 보통 정수이다.&lt;/p&gt;

&lt;p&gt;아래의 그림은 Linux 운영체제의 전형적인 프로세스 트리이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/process-6.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;언제나 pid가 1인 systemd 프로세스가 모든 사용자 프로세스의 루트 부모 프로세스 역할을 수행하고 시스템이 부트될 때 생성되는 첫 번째 사용자 프로세스이다.&lt;/u&gt; 시스템이 부팅되면 systemd프로세스는 다양한 사용자 프로세스를 생성한다.&lt;/p&gt;

&lt;p&gt;일반적으로 프로세스가 자식 프로세스를 생성할 때, 그 &lt;strong&gt;자식 프로세스는 자신의 임무를 달성하기 위하여 어떤 자원(CPU 시간, 메모리, 파일, 입출력 장치)이 필요&lt;/strong&gt;하다. 이 자원은 운영체제로부터 직접 얻을 수도 있고, 부모 프로세스가 가진 자원의 부분 집합만을 사용하도록 제한(시스템 과부하 방지)할 수도 있다.&lt;/p&gt;

&lt;p&gt;물리적, 논리적 자원을 제공하는 것 이외에 부모 프로세스는 자식 프로세스에 &lt;strong&gt;초기화 데이터(입력)를 전달&lt;/strong&gt;할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프로세스가 새로운 프로세스를 생성할 때, &lt;u&gt;두 프로세스를 실행시키는 데 두 가지 가능한 방법&lt;/u&gt;이 존재한다.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;부모와 자식은 병행하게 실행을 계속한다.&lt;/li&gt;
  &lt;li&gt;부모는 일부 또는 모든 자식이 실행을 종료할 때까지 기다린다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;새로운 프로세스들의 주소 공간 측면&lt;/u&gt;에서 볼 때 다음과 같은 두 가지 가능성이 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;자식 프로세스는 부모와 똑같은 프로그램과 데이터를 가진다.&lt;/li&gt;
  &lt;li&gt;자식 프로세스가 자신에게 적재될 새로운 프로그램을 가지고 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;UNIX 운영체제에서 새로운 프로세스의 생성&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/process-7.png&quot; style=&quot;width:90%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;새로운 프로세스는 fork() 시스템 콜로 생성되고, 원래 프로세스의 주소 공간의 복사본으로 구성된다.&lt;/li&gt;
  &lt;li&gt;exec() 시스템 콜은 이진 파일을 메로리로 적재(load)하고 그 프로그램을 실행을 시작한다.
    &lt;ul&gt;
      &lt;li&gt;원래의 프로그램의 메모리 이미지를 파괴한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;부모 프로세스는 자식 프로세스가 실행되는 동안 할 일이 없으면 자식이 종료될 때까지 준비 큐에서 자신을 제거하기 위해 wait() 시스템 콜을 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Windows 운영체제에서 새로운 프로세스의 생성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Windows API의 CreateProcess() 함수를 이용하여 새로운 프로세스를 생성한다.
    &lt;ul&gt;
      &lt;li&gt;CreateProcess() API는 자식 프로세스가 생성될 때 주소 공간에 명시된 프로그램을 적재한다. (10개 이상의 매개변수를 요구)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WaitForSingleObject() 함수는 자식 프로세스의 핸들을 전달받고 이 프로세스가 종료되기를 기다린다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;332-프로세스-종료-process-termination&quot;&gt;3.3.2 프로세스 종료 (Process Termination)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;프로세스가 마지막 문장의 실행을 끝내고, exit 시스템 콜을 사용하여 운영체제에 자신의 삭제를 요청하면 종료한다.&lt;/strong&gt; 물리 메모리와 가상 메모리, 열린 파일, 입출력 버퍼를 포함한 프로세스의 모든 자원이 할당 해제되고 운영체제로 반납된다.&lt;/p&gt;

&lt;p&gt;다른 방법으로 한 프로세스는 적당한 시스템 콜(ex. TerminateProcess())을 통해서 다른 프로세스의 종료를 유발할 수 있다. 통상적으로 그런 시스템 콜은 단지 종료될 프로세스의 부모만이 호출할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;부모 프로세스는 다음과 같이 여러가지 이유로 자식 중 하나의 실행을 종료할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;자식이 자신에게 할당된 자원을 초과하여 사용할 때&lt;/li&gt;
  &lt;li&gt;자식에게 할당된 태스트가 더이상 필요 없을 때&lt;/li&gt;
  &lt;li&gt;부모가 exit를 하는데, 운영체제는 부모가 exit 한 후에 자식이 실행을 계속하는 것을 허용하지 않는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프로세스가 종료하면 사용하던 자원은 운영체제가 되찾아 간다. &lt;strong&gt;종료되었지만 부모 프로세스가 아직 wait() 호출을 하지 않은 프로세스를 좀비(zombie) 프로세스라고 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;부모 프로세스가 wait()을 호출해서 자식 프로세스의 종료를 기다리지 않고 자신을 종료해버린다면 이 상황에 부닥친 자식 프로세스를 &lt;u&gt;고아(orphan) 프로세스&lt;/u&gt;&lt;/strong&gt;라고 한다. UNIX의 경우 고아 프로세스는 init 프로세스(Linux의 systemd와 동일)가 상속하고 종료를 관리한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Android 프로세스 계층 (Android Process Hierarchy)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Android는 임의의 프로세스를 종료하지 않고 프로세스의 &lt;strong&gt;중요도 계층&lt;/strong&gt;을 식별했으며, 시스템이 프로세스를 종료하여 새로운 또는 보다 중요한 프로세스를 위한 자원을 확보해야 할 경우 &lt;strong&gt;중요도가 낮은 프로세스부터 종료한다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The order of process importance in android&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;forground processs&lt;/li&gt;
  &lt;li&gt;visible process&lt;/li&gt;
  &lt;li&gt;service process&lt;/li&gt;
  &lt;li&gt;background process&lt;/li&gt;
  &lt;li&gt;empty process&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;즉, 시스템 자원을 회수해야만 하는 경우 Android는 먼저 empty process -&amp;gt; background process -&amp;gt; … 순서로 종료한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;34-프로세스-간-통신-interprocess-communication&quot;&gt;3.4 프로세스 간 통신 (Interprocess Communication)&lt;/h3&gt;

&lt;p&gt;운영체제 내에서 실행되는 &lt;strong&gt;병행 프로세스들은 독립적이거나 또는 협력적인 프로세스들&lt;/strong&gt; 일 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프로세스 협력을 허용하는 환경을 제공하는 데는 몇 가지 이유가 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;정보 공유(information sharing) :&lt;/strong&gt; 여러 응용 프로그램이 동일한 정보에 흥미를 느낄 수 있으므로, 그러한 정보를 병행적으로 접근할 수 있는 환경을 제공해야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;계산 가속화(computation speedup) :&lt;/strong&gt; 만일 우리가 특정 태스크를 빨리 실행하고자 한다면, 우리는 그것을 서브태스크로 나누어 이들 각각이 다른 서브태스크들과 병렬로 실행되게 해야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;모듈성(modularity) :&lt;/strong&gt; 시스템 기능을 별도의 프로세스들 또는 스레드들로 나누어, 모듈식 형태로 시스템을 구성하기를 원할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;협력적 프로세스들은 데이터를 교환할 수 있는, &lt;strong&gt;즉 서로 데이터를 보내거나 받을 수 있는 프로세스 간 통신(IPC) 기법&lt;/strong&gt;이 필요하다. 프로세스 간 통신에는 기본적으로 &lt;strong&gt;공유 메모리(sharing memory)&lt;/strong&gt;와 &lt;strong&gt;메시지 전달(message passing)&lt;/strong&gt;의 두 가지 모델이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;공유 메모리 모델에서는 협력 프로세스들에 의해 공유되는 메모리의 영역이 구축된다.
    &lt;ul&gt;
      &lt;li&gt;공유 메모리 영역을 구축할 때만 시스템 콜이 필요하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메시지 전달 모델에서는 통신이 협력 프로세스들 사이에 교환되는 메시지를 통하여 이루어진다.
    &lt;ul&gt;
      &lt;li&gt;분산 시스템에서 공유메모리보다 구현하기 쉽다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;메시지 전달 시스템은 통상 시스템 콜을 사용하여 구현되므로 커널 간섭 등의 부가적인 시간 소비 작업이 필요하기 때문에 공유 메모리 모델이 메시지 전달보다 더 빠르다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래의 그림은 위에 소개된 2가지의 통신 모델(공유 메모리, 메시지 전달)의 그림을 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/process-8.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;35-공유-메모리-시스템에서의-프로세스-간-통신-ipc-in-shared-memory-systems&quot;&gt;3.5 공유 메모리 시스템에서의 프로세스 간 통신 (IPC in Shared-Memory Systems)&lt;/h3&gt;

&lt;p&gt;공유 메모리를 사용하는 프로세스 간 통신에서는 &lt;strong&gt;통신하는 프로세스들이 공유 메모리 영역을 구축&lt;/strong&gt;해야 한다.&lt;/p&gt;

&lt;p&gt;통상 공유 메모리 영역은 공유 메모리 세그먼트를 생성하는 프로세스의 주소 공간에 위치한다. &lt;u&gt;이 공유 메모리 세그먼트를 이용하여 통신하고자 하는 다른 프로세스들은 이 세그먼트를 자신의 주소 공간에 추가하여야 한다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;협력하는 프로세스의 개념을 설명하기 위해서, 협력하는 프로세스의 일반적인 패러다임인 생산자-소비자 문제를 생각해 보자. 생산자 프로세스는 정보를 생성하고 소비자 프로세스는 정보를 소비한다. 생산자-소비자 문제의 하나의 해결책은 &lt;strong&gt;공유 메모리(buffer)를 사용&lt;/strong&gt;하는 것이다.&lt;/p&gt;

&lt;p&gt;생산자와 소비자가 병행하게 공유 버퍼를 접근하는 상황에 대한 고려 즉, &lt;strong&gt;동기화&lt;/strong&gt;도 고려해야만 한다. (Locking을 사용할 수 있다.)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;36-메시지-전달-시스템에서의-프로세스-간-통신-ipc-in-message-passing-systems&quot;&gt;3.6 메시지 전달 시스템에서의 프로세스 간 통신 (IPC in Message-Passing Systems)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;메시지 전달 방식은 동일한 주소 공간을 공유하지 않고도 프로세스들이 통신을 하고, 그들의 동작을 동기화할 수 있도록 허용하는 기법을 제공한다.&lt;/strong&gt; 특히 분산된 환경에서 유용하다.&lt;/p&gt;

&lt;p&gt;만약 프로세스 P와 Q가 통신을 원하면, 반드시 서로 메시지를 보내고 받아야 한다. 이들 사이에 &lt;strong&gt;통신 연결(communication link)&lt;/strong&gt;이 설정되어야 한다. 이 연결은 다양한 논리적 방법으로 구현할 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;직접 또는 간접 통신&lt;/li&gt;
  &lt;li&gt;동기식 또는 비동기식 통신&lt;/li&gt;
  &lt;li&gt;자동 또는 명시적 버퍼링&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;361-명명-naming&quot;&gt;3.6.1 명명 (Naming)&lt;/h4&gt;

&lt;p&gt;통신을 원하는 프로세스들은 서로를 가리킬 방법이 있어야 한다. 이들은 간접 통신 또는 직접 통신을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;직접 통신하에서, 통신을 원하는 각 프로세스는 통신의 수신자 또는 송신자의 이름을 명시해야 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;send(P, message) : 프로세스 P에 메시지를 전송한다.&lt;/li&gt;
  &lt;li&gt;receive(Q, message) : 프로세스 Q로부터 메시지를 수신한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;직접 통신 기법에서 통신 연결은 다음의 특성을 가진다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;통신을 원하는 각 프로세스의 쌍들 사이에 연결이 자동으로 구축된다. 프로세스들은 통신하기 위해 상대방의 신원(identity)만 알면 된다.&lt;/li&gt;
  &lt;li&gt;연결은 정확히 두 프로세스 사이에만 연관된다.&lt;/li&gt;
  &lt;li&gt;통신하는 프로세스들의 각 쌍 사이에는 정확히 하나의 연결이 존재해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 기법은 주소 방식에서 대칭성을 보이나, 주소 지정 시에 비대칭을 사용할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;간접 통신에서 메시지들은 &lt;u&gt;메일박스(mailbox) 또는 포트(port)&lt;/u&gt;로 송신되고, 그것으로부터 수신된다.&lt;/strong&gt; 포트는 추상적으로 프로세스들에 의해 메시지들이 넣어지고 메시지들이 제거될 수 있는 객체라고도 볼 수 있다.&lt;/p&gt;

&lt;p&gt;각 포트(메일박스)는 고유의 id를 가지고 두 프로세스들이 공유 포트(메일박스)를 가질 때만 이들 프로세스가 통신할 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;send(A, message) : 메시지를 메일박스 A로 송신한다.&lt;/li&gt;
  &lt;li&gt;receive(A, message) : 메시지를 메일박스 A로부터 수신한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;간접 통신 방법에서 통신 연결은 다음의 성질을 가진다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;한 쌍의 프로세스들 사이의 연결은 이들 프로세스가 공유 메일박스를 가질 때만 구축된다.&lt;/li&gt;
  &lt;li&gt;연결은 두 개 이상의 프로세스들과 연관될 수 있다.&lt;/li&gt;
  &lt;li&gt;통신하고 있는 각 프로세스 사이에는 다수의 서로 다른 연결이 존재할 수 있고, &lt;strong&gt;각 연결은 하나의 메일박스(포트)에 대응된다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;메일박스는 한 프로세스 또는 운영체제에 의해 소유될 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;362-동기화-synchronization&quot;&gt;3.6.2 동기화 (Synchronization)&lt;/h4&gt;

&lt;p&gt;프로세스 간의 통신은 send와 receive 프리미티브에 대한 호출에 의해 발생한다. 각 프리미티브를 구현하기 위한 서로 다른 설계 옵션이 있다. &lt;strong&gt;메시지 전달은 봉쇄형(blocking)이거나 비봉쇄형(nonblocking) 방식으로 전달된다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;blocking send : 송신하는 프로세스는 메시지가 수신 프로세스 또는 메일박스에 의해 수신될 때까지 봉쇄된다.&lt;/li&gt;
  &lt;li&gt;nonblocking send : 송신하는 프로세스가 메시지를 보내고 작업을 재시작한다.&lt;/li&gt;
  &lt;li&gt;blocking receive : 메시지가 이용 가능할 때까지 수신 프로세스가 봉쇄된다.&lt;/li&gt;
  &lt;li&gt;nonblocking receive : 송신하는 프로세스가 유효한 메시지 또는 null을 받는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;send()와 receive()가 모두 봉쇄형일 때, 우리는 송신자와 수신자 간에 &lt;strong&gt;랑데부(rendezvous)&lt;/strong&gt;를 하게 된다.&lt;/p&gt;

&lt;h4 id=&quot;363-버퍼링-buffering&quot;&gt;3.6.3 버퍼링 (Buffering)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;통신이 직접적이든 간접적이든 간에, 통신하는 프로세스에 의해 교환되는 메시지는 임시 큐에 들어 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이러한 큐를 구현하는 방식은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;무 용량(zero capacity) :&lt;/strong&gt; 큐의 최대 길이가 0이다. 즉, 링크는 자체 안에 대기하는 메시지들을 가질 수 없다. 이 경우에,송신자는 메시지를 수신할 때까지 기다려야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;유한 용량(bounded capacity) :&lt;/strong&gt; 큐는 유한한 길이 n을 가진다. 즉, 최대 n개의 메시지가 그 안에 들어 있을 수 있다. 큐가 가득 차면 봉쇄된다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;무한 용량(unbounded capacity) :&lt;/strong&gt; 큐는 잠재적으로 무한한 길이를 가진다. 따라서 메시지들이 얼마든지 큐 안에서 대기할 수 있다. 송신자는 절대 봉쇄되지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;37-ipc-시스템의-사례-examples-of-ipc-systems&quot;&gt;3.7 IPC 시스템의 사례 (Examples of IPC Systems)&lt;/h3&gt;

&lt;p&gt;네 가지 다른 IPC 시스템을 탐구해 보자.&lt;/p&gt;

&lt;h4 id=&quot;371-posix-공유-메모리-posix-shared-memory&quot;&gt;3.7.1 POSIX 공유 메모리 (POSIX Shared Memory)&lt;/h4&gt;

&lt;p&gt;POSIX 공유 메모리는 memory-mapped 파일을 사용하여 구현된다. memory-mapped 파일은 공유 메모리의 특정 영역을 파일과 연관시킨다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;프로세스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;fd = shm_open(name,  O_CREAT | O_RDWR, 0666)&lt;/code&gt; 와 같이 시스템 콜을 사용하여 공유 메모리 객체를 생성한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ftruncate(fd, SIZE)&lt;/code&gt;와 같은 함수를 사용하여 공유 메모리 객체의 크기를 바이트 단위로 설정한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ptr = (char *)mmap(0, SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0)&lt;/code&gt;와 같은 함수를 사용하여 공유 메모리 객체를 포함하는 memory-mapped 파일을 구축한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;372-mach-메시지-전달-mach-message-passing&quot;&gt;3.7.2 Mach 메시지 전달 (Mach Message Passing)&lt;/h4&gt;

&lt;p&gt;모든 태스크 간 통신을 포함하여 Mach에서 대부분의 통신은 &lt;strong&gt;메시지(Message)&lt;/strong&gt;로 수행된다. Mach에서 &lt;strong&gt;포트(port)&lt;/strong&gt;라고 하는 메일박스로 메시지를 주고 받는다. 포트는 크기가 정해져 있고 단방향이다.
양방향 통신의 경우 메시지가 한 포트로 전송되고 응답이 별도의 응답 포트로 전송된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;각 포트에는 여러 송신자가 있을 수 있지만 수신자는 오직 하나만 존재한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;태스크가 생성되면 Task Self 포트와 Notify 포트라는 두 개의 특별한 포트도 생성된다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;커널은 Task Self 포트에 대한 수신 권한을 가지고 있어 태스크가 커널에 메시지를 보낼 수 있다.&lt;/li&gt;
  &lt;li&gt;커널의 이벤트 발생 알림을 작업의 Notify 포트로 보낼 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;mach_port_allocate() API는 새 포트를 작성하고 메시지 큐를 위한 공간을 할당한다. 또한 포트에 대한 권한을 식별한다.&lt;/p&gt;

&lt;p&gt;각 태스크는 또한 &lt;strong&gt;부트스트랩 포트&lt;/strong&gt;에 액세스 할 수 있어서 태스크가 생성한 포트를 시스템 전체의 &lt;strong&gt;부트스트랩 서버&lt;/strong&gt;에 등록할 수 있다. &lt;u&gt;포트가 부트스트랩 서버에 등록되면 다른 태스크가 이 레지스트리에서 포트를 검색하여 포트로 메시지를 보낼 수 있는 권한을 얻을 수 있다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;mach_msg() 함수는 메시지를 보내고 받는 표준 API이다. mach_msg()가 호출되면 이는 mach_msg_trap() 함수를 호출하고 mach_msg_trap()은 mach_msg_overwrite_trap()함수를 호출하여 메시지의 실제 전달을 처리한다.&lt;/p&gt;

&lt;p&gt;포트(메일박스)가 가득 찼을 경우 mach_msg()에서 설정할 수 있는 옵션&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;큐에 공간이 생길 때까지 무기한 기다린다.&lt;/li&gt;
  &lt;li&gt;최대 n 밀리초 동안 기다린다.&lt;/li&gt;
  &lt;li&gt;기다리지 말고 즉시 복귀한다.&lt;/li&gt;
  &lt;li&gt;메시지를 일시적으로 캐시 한다. 메시지가 전송되는 큐가 가득 차더라도 운영체제에 전달하여 보존한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;메시지 시스템의 주요 문제점은 일반적으로 송신자의 포트에서 수신자의 포트로 메시지를 복사해야 하므로 발생하는 성능 저하이다.&lt;/strong&gt;(가상 메모리 관리 기술을 사용하면 같은 시스템 내의 메시지 전송간에 성능 저하를 최소화 할 수 있다.)&lt;/p&gt;

&lt;h4 id=&quot;373-windows&quot;&gt;3.7.3 Windows&lt;/h4&gt;

&lt;p&gt;Windows는 다중 운영 환경 또는 서브시스템을 지원하며, &lt;strong&gt;Application은 메시지 전달(Message Passing) 기법을 통해 이들과 통신한다.&lt;/strong&gt; 따라서 응용 프로그램은 서브시스템 서버의 클라이언트로 간주할 수 있다.&lt;/p&gt;

&lt;p&gt;Windows의 메시지 전달 설비는 &lt;strong&gt;고급 로컬 프로시저 호출 설비(advanced local procedure call facility, ALPC)&lt;/strong&gt;라 불린다. &lt;strong&gt;ALPC는 동일 기계상에 있는 두 프로세스간의 통신에 사용한다.&lt;/strong&gt; 원격 프로시저 호출(RPC) 기법과 같으나, Windows에 맞게 특별히 최적화 되었다.&lt;/p&gt;

&lt;p&gt;Windows는 두 프로세스 간에 연결을 구축하고 유지하기 위해 &lt;strong&gt;포트 객체&lt;/strong&gt;를 사용한다. Windows는 &lt;strong&gt;연결 포트(Connection port)&lt;/strong&gt;와 &lt;strong&gt;통신 포트(communication port)&lt;/strong&gt;의 두 가지 유형의 포트를 사용한다.&lt;/p&gt;

&lt;p&gt;다음은 Windows의 ALPC 과정의 그림이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/process-9.png&quot; style=&quot;width:80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ALPC 채널이 생성되면 다음 3가지 중 하나의 메시지 전달 기법의 하나가 선택된다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;256바이트까지의 작은 메시지의 경우, &lt;u&gt;포트의 메시지 큐가 중간 저장소로 사용되고&lt;/u&gt;, 메시지는 프로세스에서 프로세스로 복사된다.&lt;/li&gt;
  &lt;li&gt;대용량 메시지는 반드시 &lt;strong&gt;섹션 객체(Section Object)&lt;/strong&gt;를 통하여 전달되어야 한다. 섹션 객체란 채널과 연관된 공유 메모리의 영역을 말한다.&lt;/li&gt;
  &lt;li&gt;데이터의 양이 너무 많아서 섹션 객체에 저장될 수 없는 경우, 서버 프로세스가 클라이언트의 주소 공간을 직접 읽거나 쓸 수 있는 API를 사용할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;클라이언트는 채널을 설정할 때 메시지 전달 기법을 설정해야만 한다. (즉, 대용량 메시지 전송의 필요 여부)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Windows의 ALPC는 Windows API의 부분이 아니기 때문에 응용 프로그래머는 사용할 수 없다.&lt;/u&gt; Windows API를 사용하는 어플리케이션은 RPC(Remote Procedure Calls)를 부르고, &lt;strong&gt;같은 시스템 상에 존재하는 프로세스의 경우 RPC가 호출되면 이 RPC는 간접적으로 ALPC를 호출&lt;/strong&gt;하여 처리된다.&lt;/p&gt;

&lt;h4 id=&quot;374-파이프-pipes&quot;&gt;3.7.4 파이프 (Pipes)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;파이프는 두 프로세스가 통신할 수 있게 하는 전달자로서 동작한다.&lt;/strong&gt; 파이프는 초기 UNIX 시스템에서 제공하는 IPC 기법의 하나였다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.7.4.1 일반 파이프 (Ordinary Pipes)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;일반 파이프는 생산자-소비자 형태로 두 프로세스 간에 통신을 허용한다.&lt;/strong&gt; 생산자는 파이프의 한 종단(쓰기 종단)에 쓰고, 소비자는 다른 종단(읽기 종단)에서 읽는다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;결과적으로 일반 파이프는 한쪽으로만 데이터를 전송할 수 있으며 오직 단방향 통신만을 가능하게 한다.&lt;/strong&gt; 양방향 통신이 필요하다면 각각 다른 방향으로 데이터를 전송할 수 있는 두 개의 파이프를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;일반 파이프는 파이프를 생성한 프로세스 이외에는 접근할 수 없다.&lt;/strong&gt; 따라서 통상 부모 프로세스가 파이프를 생성하고 fork()로 생성한 자식 프로세스와 통신하기 위해 사용한다.&lt;/p&gt;

&lt;p&gt;다음의 그림은 일반 파이프를 위한 파일 디스크립터를 나타낸 그림이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/process-10.png&quot; style=&quot;width:60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;fd 배열은 파일 디스크립터와 부모 및 자식 프로세스의 관계를 보여준다. 이 그림에서 보듯이 부모가 파이프의 쓰기 종단(fd[1])에 데이터를 쓰면 파이프의 읽기 종단(fd[0])에서 자식이 읽을 수 있다.&lt;/p&gt;

&lt;p&gt;Windows 시스템은 일반 파이프를 &lt;strong&gt;익명 파이프(anonymous pipe)&lt;/strong&gt;라고 부른다. &lt;strong&gt;UNIX와 Windows 시스템 모두에서 통신하는 두 프로세스는 부모-자식 관계를 가져야 한다는 것을 꼭 명심하라!! 이 유형의 파이프는 동일한 기계상의 두 프로세스끼리만 통신이 가능하다는 것을 의미한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.7.4.2 지명 파이프 (Named Pipes)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;지명 파이프(Named Pipes)는 양방향으로 통신이 가능하며 부모-자식 관계도 필요로 하지 않는다. &lt;u&gt;Named Pipes가 구축되면 여러 프로세스들이 이를 사용하여 통신할 수 있다.&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;통신 프로세스가 종료하더라도 지명 파이프는 계속 존재한다. UNIX와 Windows 시스템은 구현상에 차이점은 있지만 모두 지명 파이프를 지원한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UNIX에서 지명 파이프는 FIFO&lt;/strong&gt;라고 부른다. 생성되면 지명 파이프는 파일 시스템의 보통 파일처럼 존재한다. 시스템 콜로 생성 및 조작되며 명시적으로 파일 시스템에서 삭제될 때까지 존재한다. 
&lt;strong&gt;FIFO는 반이중 전송만이 가능하다.&lt;/strong&gt; 서로 다른 기계에 존재하는 프로세스 사이에 통신이 필요하다면 소켓을 사용해야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;반이중 통신 :&lt;/strong&gt; 양방향으로 데이터가 전송될 수는 있으나 양쪽에서 동시에 전송하는 것은 불가능한 방식&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;전이중 통신 :&lt;/strong&gt; 양쪽에서 동시에 데이터를 전송할 수 있는 방식&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Windows 시스템의 지명 파이프는 전이중 통신을 허용하며, 통신하는 두 프로세스는 같은 기계 또는 다른 기계상에 존재할 수 있다.&lt;/strong&gt; 또한 Windows 시스템은 바이트-단위 또는 메시지-단위 데이터의 전송을 허용한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;실제-파이프-사용-예시-in-unix&quot;&gt;실제 파이프 사용 예시 in UNIX&lt;/h4&gt;

  &lt;p&gt;&lt;strong&gt;파이프는 UNIX 명령어 라인 환경에서 한 명령의 출력이 다른 명령의 입력으로 사용되는 상황에서 자주 사용된다.&lt;/strong&gt; 파이프는 명령어 라인에서 | 문자를 사용하여 구축될 수 있다.&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ex) ls | less&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;이 시나리오에서 ls 명령은 생산자 역할을 하며 출력은 less 명령에 의해 소비된다.&lt;/p&gt;

  &lt;p&gt;Dos Shell도 파이프를 구축하기 위하여 | 문자를 사용한다.&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ex) dir | more&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;38-클라이언트-서버-환경에서-통신-communication-in-client-server-systems&quot;&gt;3.8 클라이언트 서버 환경에서 통신 (Communication in Client-Server Systems)&lt;/h3&gt;

&lt;p&gt;클라이언트 서버에서 사용할 수 있는 &lt;strong&gt;두 가지 다른 통신 전략(Socket, RPC)&lt;/strong&gt;에 대해서 설명하도록 하겠다.&lt;/p&gt;

&lt;h4 id=&quot;381-소켓-socket&quot;&gt;3.8.1 소켓 (Socket)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;소켓(socket)은 통신의 극점(endpoint)을 뜻한다.&lt;/strong&gt; 두 프로세스가 네트워크상에서 통신을 하려면 양 프로세스마다 하나씩, 총 두 개의 소켓이 필요하다. &lt;strong&gt;각 소켓은 IP 주소와 포트 번호 두가지를 접합(concatenate)해서 구별한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;클라이언트 프로세스가 연결을 요청하면 호스트 컴퓨터가 포트 번호를 부여한다. 이 번호는 1024보다 큰 임의의 정수가 된다.&lt;/p&gt;

&lt;p&gt;아래의 그림을 통해서 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/process-11.png&quot; style=&quot;width:60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;두 호스트 사이에 패킷들이 오갈 때 그 패킷들은 이 목적지 포트 번호가 지정하는 데 따라 적절한 프로세스로 배달된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;모든 연결은 유일한 소켓 쌍으로 구성되어야 한다!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;책에는 Java를 사용한 Socket 프로그래밍 예제가 아주 잘 나와 있음으로 이를 참고해 보자!!&lt;/p&gt;

&lt;p&gt;소켓을 이용한 통신은 분산된 프로세스 간에 널리 사용되고 효율적이기는 하나 스레드 간에 구조화되지 않은 바이트 스트림만을 통신하도록 하기 때문에 너무 낮은 수준이다. 이 바이트 스트림의 해석은 오롯이 클라이언트와 서버의 책임이 되기 때문에 더 높은 수준의 소켓 기반 통신을 사용해 보자.&lt;/p&gt;

&lt;h4 id=&quot;382-원격-프로시저-호출-remote-procedure-calls-rpc&quot;&gt;3.8.2 원격 프로시저 호출 (Remote Procedure Calls, RPC)&lt;/h4&gt;

&lt;p&gt;원격 서비스와 관련한 가장 보편적인 형태 중 하나는 RPC 패러다임으로서, &lt;strong&gt;네트워크에 연결된 두 시스템 사이의 통신에 사용하기 위하여 프로시저 호출 기법을 추상화하는 방법으로 설계되었다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;원격 프로시저 호출(RPC)&lt;/strong&gt; (From Wiki)&lt;/p&gt;

  &lt;p&gt;별도의 원격 제어를 위한 코딩 없이 다른 주소 공간에서 함수나 프로시저를 실행할 수 있게하는 프로세스 간 통신 기술이다. 다시 말해, 
원격 프로시저 호출을 이용하면 프로그래머는 함수가 실행 프로그램에 로컬 위치에 있든 원격 위치에 있든 동일한 코드를 이용할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;RPC에서는 프로세스들이 서로 다른 시스템 위에서 돌아가기 때문에 원격 서비스를 제공하기 위해서는 &lt;u&gt;메시지 기반 통신&lt;/u&gt;을 해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RPC 통신에서 전달되는 &lt;strong&gt;메시지는 구조화 되어&lt;/strong&gt; 있고, &lt;strong&gt;데이터 패킷 수준을 넘어선다.&lt;/strong&gt; 각 메시지에는 원격지 포트에서 listen 중인 &lt;strong&gt;RPC 디먼&lt;/strong&gt;의 주소가 지정되어 있고 &lt;strong&gt;실행되어야 할 함수의 식별자&lt;/strong&gt;, 그리고 그 &lt;strong&gt;함수에게 전달되어야 할 매개변수&lt;/strong&gt;가 포함된다. 그런 후에 요청된 함수가 실행되고 &lt;strong&gt;어떤 출력이든지 별도의 메시지를 통해 요청자에게 반환&lt;/strong&gt;된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;데몬(디먼, Daemon)&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;멀티태스킹 운영 체제에서 데몬(daemon, 발음: 데이먼/’deɪmən/ 또는 디먼 /’dimən/[1])은 사용자가 직접적으로 제어하지 않고, 백그라운드에서 돌면서 여러 작업을 하는 프로그램을 말한다.&lt;/strong&gt; 시스템 로그를 남기는 syslogd처럼 보통 데몬을 뜻하는 ‘d’를 이름 끝에 달고 있으며, 일반적으로 프로세스로 실행된다.&lt;/p&gt;

  &lt;p&gt;데몬은 대개 부모 프로세스를 갖지 않으며, 즉 PPID가 1이며, 따라서 &lt;strong&gt;프로세스 트리에서 init 바로 아래에 위치&lt;/strong&gt;한다. 데몬이 되는 방법은 일반적으로 자식 프로세스를 포크(fork)하여 생성하고 자식을 분기한 자신을 죽이면서 init이 고아가 된 자식 프로세스를 자기 밑으로 데려가도록 하는 방식이다. 이러한 방법을 ‘fork off and die’라 부르기도 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;원격 프로세스가 어떤 서비스를 받고자 하면 그 서비스에 대응되는 RPC 디먼이 listen하고 있는 포트 주소로 메시지를 보내야 한다. (보통 이를 도와주기 위해 &lt;strong&gt;matchmaker&lt;/strong&gt;가 존재한다.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;matchmaker :&lt;/strong&gt; 클라이언트가 원하는 RPC Daemon의 포트번호를 알려주는 랑데부용 디먼이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;RPC는 클라이언트가 원격 호스트의 프로시저 호출하는 것을 마치 자기의 프로시저 호출하는 것처럼 해준다. &lt;strong&gt;RPC 시스템은 클라이언트 쪽에 스텁을 제공하여 통신을 하는데 필요한 자세한 사항들을 숨겨준다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;클라이언트 측에서는 서버에게 데이터를 보내기 전 매개변수 정돈 작업의 일환으로 전송할 데이터를 &lt;strong&gt;기종 중립적인 XDR 형태&lt;/strong&gt;로 바꾸어서 보낸다.&lt;/p&gt;

&lt;p&gt;RPC는 분산 파일 시스템(distributed file system, DFS)을 구현하는 데 유용하다. DFS는 몇 개의 RPC daemon과 클라이언트로 구현할 수 있다.&lt;/p&gt;

&lt;p&gt;아래의 그림은 RPC의 실행을 나타낸다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/process-12.png&quot; style=&quot;width:80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.8.2.1 Android RPC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Android 운영체제는 바인더 프레임워크에 포함된 풍부한 IPC기법의 집합을 가지고 있는데, 이 중 RPC는 프로세스가 다른 프로세스의 서비스를 요청할 수 있게 한다.&lt;/p&gt;

&lt;p&gt;Android 응용 프로그램 구성요소 중 하나는 사용자 인터페이스가 없지만 백그라운드로 실행되며 장기 실행 연산을 실행하거나 원격 프로세스에 대한 작업을 수행하는 서비스이다.&lt;/p&gt;

&lt;p&gt;이 서비스를 이용해 백그라운드에서 음악을 재생하고 다른 프로세스 대신 네트워크 연결을 통해 데이터를 검색하여 데이터를 다운로드 할 때 다른 프로세스가 실행 중단되는 것을 방지할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;여기까지 3장 Process에 대한 정리는 마치도록 하고 다음에는 4장 Threads &amp;amp; Concurrency로 돌아오도록 하겠다. Coming Soon~&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Oct 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/computer-science(cs)/2020/10/02/Process.html</link>
        <guid isPermaLink="true">http://localhost:4000/computer-science(cs)/2020/10/02/Process.html</guid>
        
        <category>Operating-System</category>
        
        <category>OS</category>
        
        <category>CS</category>
        
        <category>Computer</category>
        
        <category>Process</category>
        
        
        <category>Computer-Science(CS)</category>
        
      </item>
    
      <item>
        <title>CORS with Spring (MVC, Security)</title>
        <description>&lt;p&gt;이번 포스팅에서는 &lt;strong&gt;CORS with Spring (MVC, Security)&lt;/strong&gt;에 대해서 다루어 보도록 하겠다.&lt;/p&gt;

&lt;p&gt;프로젝트 진행간에 CORS(Cross-Origin Resource Sharing) 이슈를 경험하고 대략 두달이 지나서야 이 글을 작성한다. 다른 일들에 밀려 이제 글을 작성하는 것이 조금 못마땅하기도 하지만 블로깅을 놓지 않고 열심히 하는 내 모습이 대견하기도 하다.&lt;/p&gt;

&lt;p&gt;어쨋든 이 포스팅의 목적은 &lt;strong&gt;Spring에서 CORS이슈를 해결하는 방법&lt;/strong&gt;에 대해서 알아보기로 한 것이니 CORS란 무엇이고, 왜 나왔는지에 대해서 먼저 알아보도록 하자~&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;매번 느끼는 거지만, 무언가를 배우기 앞서 본질을 파악하는 것이 가장 중요한 것 같다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;cors란-무엇인가&quot;&gt;CORS란 무엇인가?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CORS란 Cross-Origin Resource Sharing의 약자이다. 영어 그대로 해석해 보면 교차 출처 리소스 공유이다. 즉, 한 출처에서 실행중인 웹 애플리케이션이 다른 출처의 선택한 자원에 접근할 수 있는 권한을 부여하도록 브라우저에 알려주는 정책이다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;그렇다면 출처(Origin)이란 무엇일까?&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;도메인 + 프로토콜 + 포트를 통틀어 출처(Origin)이라고 한다.&lt;/strong&gt; 이 글에서는 출처를 오리진 or Origin이라고 부르도록 하겠다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;즉, 프로토콜, 포트, 호스트(도메인) 중 서로 하나라도 다를 경우 Cross Origin이라고 이해하면 된다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;ex) http://localhost:8080/api 와 https://localhost:8080/api 은 Cross Origin이다. (프로토콜이 다르기 때문)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이제 CORS가 무엇인지에 대해서 알아보았음으로, 왜 CORS가 나오게 되었는지에 대해서 알아보도록 하자.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;cors는-왜-필요한가&quot;&gt;CORS는 왜 필요한가?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;보안 상의 이유로, 브라우저는 스크립트에서 시작한 Cross Origin HTTP Request를 제한한다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;XMLHttpRequest&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fetch API&lt;/code&gt;는 &lt;strong&gt;동일 출처 정책(SOP)&lt;/strong&gt;을 따른다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;즉, 이 API를 사용하는 웹 애플리케이션은 자신의 Origin과 동일한 리소스만 불러올 수 있으며, &lt;strong&gt;다른 Origin의 리소스를 불러오려면 그 Origin에서 올바른 CORS 헤더를 포함한 응답을 반환해야만 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;동일 출처 정책 (Same-Origin Policy)&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;불러온 문서나 스크립트가 다른 출처(Origin)에서 가져온 리소스와 상호작용하는 것을 제한하는 중요한 보안 방식입니다. 이것은 잠재적 악성 문서를 격리하여, 공격 경로를 
줄이는데 도움이 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;결국 대부분의 웹 어플리케이션의 Web API Client는 XMLHttpRequest 또는 Fetch API를 사용하기 떄문에 Cross Origin HTTP Request를 위해선 CORS 정책을 따라야만 한다.&lt;/p&gt;

&lt;p&gt;CORS란 무엇이고, 왜 필요한지에 대해서 알아보았으니, 우리는 Cross-Origin HTTP Request 간에 발생하는 여러 시나리오에 대해서 알아보도록 하자.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;접근-제어-시나리오&quot;&gt;접근 제어 시나리오&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Simple Request (단순 요청)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Simple Request 조건을 모두 충족하는 요청을 Preflight request 없이 보내 서버는 이에 대한 응답으로 Access-Control-Allow-Origin 헤더를 응답하는 방식&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Access-Control-Allow-Origin : &amp;lt;origin&amp;gt; | *&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Origin을 지정하여 브라우저가 해당 Origin이 리소스에 접근하도록 허용한다. Credential이 없는 요청의 경우 &quot;*&quot; 와일드 카드는 브라우저의 origin에 상관없이 모든 리소스에 접근하도록 허용한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;The Communication between client and server using simple request 
 &lt;img src=&quot;/assets/spring/cors-with-spring-2.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;preflighted request (프리플라이트 요청)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;OPTIONS&lt;/code&gt; 메서드를 통해 다른 도메인의 리소스로 HTTP request를 보내 실제 요청이 전송하기에 안전한지 확인한다. Cross-site request는 유저 데이터에 영향을 줄 수 있기 때문에 이와 같이 미리 전송(preflighted)한다.&lt;/li&gt;
      &lt;li&gt;The Communication between client and server using preflighted request
 &lt;img src=&quot;/assets/spring/cors-with-spring-3.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Access-Control-Request-Method: &amp;lt;method&amp;gt;&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Access-Control-Request-Method 헤더는 실제 요청에서 어떤 HTTP 메서드를 사용할지 서버에게 알려주기 위해, preflight request 할 때에 사용된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Access-Control-Allow-Methods: &amp;lt;method&amp;gt;[, &amp;lt;method&amp;gt;]*&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Access-Control-Allow-Methods 헤더는 리소스에 접근할 때 허용되는 메서드를 지정한다. 이 헤더는 preflight request에 대한 응답으로 사용된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Access-Control-Request-Headers: &amp;lt;header-name&amp;gt;[, &amp;lt;header-name&amp;gt;]*&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Access-Control-Request-Headers 헤더는 실제 요청에서 어떤 HTTP 헤더를 사용할지 서버에게 알려주기 위해, preflight request 할 때에 사용된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Access-Control-Allow-Headers: &amp;lt;header-name&amp;gt;[, &amp;lt;header-name&amp;gt;]*&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;preflight request 에 대한 응답으로 Access-Control-Allow-Headers 헤더가 사용된다. 실제 요청시 사용할 수 있는 HTTP 헤더를 나타낸다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;credentialed request (인증정보를 포함한 요청)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;credentialed requests는 HTTP cookies 와 HTTP Authentication 정보를 인식한다. 기본적으로 cross-site &lt;code class=&quot;highlighter-rouge&quot;&gt;XMLHttpRequest&lt;/code&gt; 나 Fetch 호출에서 브라우저는 자격 증명을 보내지 않는다. XMLHttpRequest 객체나 Request 생성자가 호출될 때 특정 플래그를 설정해야만 한다.&lt;/li&gt;
      &lt;li&gt;Access-Control-Allow-Credentials: true 로 응답하지 않으면, 응답은 무시되고 웹 컨텐츠는 제공되지 않는다.&lt;/li&gt;
      &lt;li&gt;The Communication between client and server using credentialed request
 &lt;img src=&quot;/assets/spring/cors-with-spring-4.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Access-Control-Allow-Credentials: true&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Access-Control-Allow-Credentials 헤더는 credentials 플래그가 true일 때 요청에 대한 응답을 표시할 수 있는지를 나타낸다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CORS에서 발생할수 있는 접근 제어 시나리오에 대해서 알아보았다. 이제는 스프링에서 어떻게 이러한 접근 제어 시나리오를 적절히 활용하는지에 대해서 알아보자!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;cors-configuration-in-spring&quot;&gt;CORS Configuration in Spring&lt;/h2&gt;

&lt;p&gt;Spring에서 CORS 정책을 따르기 위한 설정에 대해서 알아보도록 하자!!&lt;/p&gt;

&lt;p&gt;나의 프로젝트에서는 Sprint Security와 MVC 모두 사용하였음으로 CORS를 위해서 Security와 MVC 설정이 모두 필요하였다.&lt;/p&gt;

&lt;h3 id=&quot;cors-with-spring-security&quot;&gt;CORS with Spring Security&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring Security에서 CORS를 다루는 가장 확실하고 쉬운 방법은 CorsFilter를 사용하는 것이다.&lt;/strong&gt; 사용자는 다음과 같이 CorsConfigurationSource를 제공하여 CorsFilter를 Spring Security와 통합 할 수 있다.&lt;/p&gt;

&lt;p&gt;Spring Security 사용시 CORS에 걸리지 않으려면 Authentication Filter 인증 보다 앞단계의 필터/인터셉터에서 path 검증로직이 일어나야만 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The CORS configuration in Spring Security&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@EnableWebSecurity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebSecurityConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebSecurityConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// by default uses a Bean by the name of corsConfigurationSource&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	
    &lt;span class=&quot;c1&quot;&gt;// You can configure allowed Origin, Method, Header and Credential &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// and how long, as a duration, the response from a pre-flight request can be eached by clients&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;CorsConfigurationSource&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;corsConfigurationSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;CorsConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CorsConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAllowedOrigins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://example.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAllowedMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// you can configure many allowed CORS headers&lt;/span&gt;

		&lt;span class=&quot;nc&quot;&gt;UrlBasedCorsConfigurationSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UrlBasedCorsConfigurationSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerCorsConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cors-with-spring-mvc&quot;&gt;CORS with Spring MVC&lt;/h3&gt;

&lt;p&gt;Spring MVC에서 CORS를 적용하는 방법은 크게 총 2가지로 나뉜다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;부분적으로 컨트롤러에서 CORS를 설정하는 방법 (Annotation based)&lt;/li&gt;
  &lt;li&gt;전역적으로 Spring MVC 설정에서 CORS를 설정하는 방법&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;컨트롤러에서-부분적으로-cors를-설정하는-방법&quot;&gt;컨트롤러에서 부분적으로 CORS를 설정하는 방법&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Handler 메소드에 @CrossOrigin 애노테이션을 붙이는 방법&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/account&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
    &lt;span class=&quot;nd&quot;&gt;@CrossOrigin&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DELETE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;모든 Origin이 허용되고&lt;/li&gt;
  &lt;li&gt;@RequestMapping 애노테이션에서 명시되어진 HTTP 메소드가(GET Method) 허용된다.&lt;/li&gt;
  &lt;li&gt;preflight 응답이 캐시되어지는 시간은 30분이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Controller에 @CrossOrigin 애노테이션을 붙이는 방법&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@CrossOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://example.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxAge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/account&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DELETE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;클래스 레벨에 @CrossOrigin 애노테이션을 추가 했고, 해당 컨트롤러에 속해있는 두 핸들러 메소드 모두에게 클래스 레벨에서 설정한 CORS정책이 적용된다.&lt;/p&gt;

&lt;p&gt;@CrossOrigin 애노테이션을 통해 origins, methods, allowedHeaders, exposedHeaders, allowCredentials, maxAge 모두 설정할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;클래스 레벨과 메소드 레벨 모두에게 @CrossOrigin 애노테이션을 붙이는 방법&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@CrossOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxAge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/account&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
    &lt;span class=&quot;nd&quot;&gt;@CrossOrigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://example.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DELETE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;클래스 레벨의 @CrossOrigin 애노테이션이 기본으로 적용되고 핸들러 메소드의 @CrossOrigin 애노테이션이 추가로 적용된다.&lt;/p&gt;

&lt;h4 id=&quot;spring-mvc-설정에서-전역적으로-cors를-설정하는-방법&quot;&gt;Spring MVC 설정에서 전역적으로 CORS를 설정하는 방법&lt;/h4&gt;

&lt;p&gt;부분적으로 컨트롤러 마다 설정하는 애노테이션 기반 설정의 대안으로 Spring은 컨트롤러 외부에서 전역으로 CORS 설정을 할 수 있게 해준다. 이는 필터 기반 솔루션을 사용하는 것과 유사하지만 Spring MVC 내에서 선언하고 @CrossOrigin 설정과 결합할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaConfig를 통해 CORS 전역 설정&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableWebMvc&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebMvcConfigurer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addCorsMappings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CorsRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allowedOrigins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.example.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allowedMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allowCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;maxAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 JavaConfig를 통해 paths, origins, methods, allowedHeaders, exposedHeaders, allowCredentials, maxAge 모두 설정할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;XML을 통해 CORS 전역 설정&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;mvc:cors&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;mvc:mapping&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/**&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;allowed-origins=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://domain1.com, http://domain2.com&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;allowed-methods=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET, PUT&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;allowed-headers=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header1, header2, header3&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;exposed-headers=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header1, header2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;allow-credentials=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;max-age=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;123&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;mvc:mapping&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/resources/**&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;allowed-origins=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://domain1.com&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/mvc:cors&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 XMLConfig를 통해 paths, origins, methods, allowedHeaders, exposedHeaders, allowCredentials, maxAge 모두 설정할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;integration-cors-configuration-with-spring-mvc-and-security&quot;&gt;Integration CORS configuration with Spring MVC and Security&lt;/h3&gt;

&lt;p&gt;만약 Spring MVC의 CORS 지원을 사용한다면, Spring Security의 &lt;code class=&quot;highlighter-rouge&quot;&gt;CorsConfigurationSource&lt;/code&gt; 설정을 생략(omit)할 수 있다. &lt;strong&gt;Spring Security는 Spring MVC에서 제공되어지는 CORS 설정을 활용(leverage)할 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;여기까지 CORS에 대해서 알아 보았다!!! 아래의 자료는 이 글을 작성하면서 참고한 문서이니 독자 여러분들도 참고 바란다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/spring-cors&quot;&gt;https://www.baeldung.com/spring-cors&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/4.2.x/reference/html/cors.html&quot;&gt;https://docs.spring.io/spring-security/site/docs/4.2.x/reference/html/cors.html&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/CORS&quot;&gt;https://developer.mozilla.org/ko/docs/Web/HTTP/CORS&lt;/a&gt;&lt;/p&gt;

&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 01 Oct 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2020/10/01/CORS-with-Spring.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2020/10/01/CORS-with-Spring.html</guid>
        
        <category>CORS</category>
        
        <category>MVC</category>
        
        <category>Security</category>
        
        <category>Spring</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>[Operating System - Chapter 2] 운영체제 구조</title>
        <description>&lt;p&gt;이 포스팅은 공룡책으로 알려진 Operating System Concepts의 2장인 Operating System Structures를 공부하면서 정리한 포스팅이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;2-운영체제-구조-operating-system-structures&quot;&gt;2. 운영체제 구조 (Operating System Structures)&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;운영체제는 그 속에서 프로그램이 실행되는 환경을 제공해 준다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;운영체제를 살펴보기 위한 몇가지 &lt;strong&gt;유리한 관점&lt;/strong&gt;에 대해서 소개하겠다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;운영체제가 제공하는 &lt;strong&gt;서비스에 초점&lt;/strong&gt;을 맞추는 것이다.&lt;/li&gt;
  &lt;li&gt;운영체제가 사용자와 &lt;strong&gt;프로그래머에게 제공하는 인터페이스에 초점&lt;/strong&gt;을 맞추는 것이다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;시스템의 구성요소와 그들의 상호 연결에 초점&lt;/strong&gt;을 맞추는 것이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 포스팅에서는 운영체제가 제공하는 서비스는 무엇이며, 이 서비스는 어떤 방식으로 제공되는지, 이 서비스들이 어떻게 디버깅 되며, 이러한 시스템을 설계하기 위해서는 어떤 다양한 방법들이 사용되는지 고려한다. 마지막으로 운영체제가 어떻게 만들어지고 컴퓨터가 운영체제를 구동시키는 방법에 관해 설명한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;21-운영체제-서비스-operating-system-services&quot;&gt;2.1 운영체제 서비스 (Operating System Services)&lt;/h3&gt;

&lt;p&gt;운영체제는 프로그램 &lt;strong&gt;실행 환경&lt;/strong&gt;을 제공한다. 운영체제는 프로그램과 그 프로그램의 사용자에게 &lt;strong&gt;특정 서비스&lt;/strong&gt;를 제공한다.&lt;/p&gt;

&lt;p&gt;아래의 그림은 다양한 운영체제 서비스에 대한 한 가지 관점(계층적 관점)과 그들의 상호 관계를 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/operating-system-structures-1.png&quot; style=&quot;width:90%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;운영체제가 제공하는 서비스에 대해서 소개하도록 하겠다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;사용자 인터페이스(user interface)&lt;/strong&gt; : 거의 모든 운영체제는 사용자 인터페이스(UI)를 제공한다. 이 인터페이스는 여러 형태로 제공될 수 있으며 대표적으로 &lt;strong&gt;Graphic User Interface(GUI), TouchScreen Interface, Command Line Interface&lt;/strong&gt;등이 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;프로그램 수행(program execution)&lt;/strong&gt; : 시스템은 프로그램을 메모리에 적재해 실행할 수 있어야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;입출력 연산(I/O operation)&lt;/strong&gt; : 수행 중인 프로그램은 입출력을 요구할 수 있다. 이러한 입출력에는 파일 혹은, 입출력 장치가 연관될 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;파일 시스템 조작(file system manipulation)&lt;/strong&gt; : 프로그램은 파일을 읽고 쓸 필요가 있고, 이름에 의해 파일을 생성하고 삭제할 수 있고 지정된 파일을 찾을 수 있어야 하고 파일의 정보를 열거할 수 있어야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;통신(communication)&lt;/strong&gt; : 프로세스 사이에 정보 교환(IPC)을 지원해 준다. (Shared Memory, Message-Passing)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;오류 탐지(error detection)&lt;/strong&gt; : 운영체제는 모든 가능한 오류를 항상 의식하고 탐지해야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;자원 할당(resource allocation)&lt;/strong&gt; : 다수의 프로세스나 다수의 작업이 동시에 실행될때, 그들 각각에 자원을 할당해 주어야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;기록 작성(logging)&lt;/strong&gt; : 어떤 프로그램이 어떤 종류의 컴퓨터 자원을 얼마나 많이 사용하는지에 대해서 기록 작성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;보호(protection)와 보안(security)&lt;/strong&gt; : 보호는 시스템 자원에 대한 모든 접근이 통제되도록 보장, 보안은 네트워크 어댑터 등과 같은 외부 입출력 장치들을 부적합한 접근 시도로부터 지키고, 침입의 탐지를 위해 모든 접속을 기록&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;22-사용자와-운영체제-인터페이스-user-and-operating-system-interface&quot;&gt;2.2 사용자와 운영체제 인터페이스 (User and Operating System Interface)&lt;/h3&gt;

&lt;h4 id=&quot;221-명령-인터프리터-command-interpreter&quot;&gt;2.2.1 명령 인터프리터 (Command Interpreter)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Linux, UNIX 및 Windows를 포함한 운영체제 대부분은 프로세스가 시작되거나 사용자가 (대화형 시스템상에서) 처음 로그온 할 때 명령 인터프리터를 특수한 프로그램으로 취급한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;선택할 수 있는 여러 명령 인터프리터를 제공하는 시스템에서 이 해석기는 &lt;strong&gt;&lt;u&gt;셸(shell)&lt;/u&gt;&lt;/strong&gt;이라고 불린다.&lt;/p&gt;

&lt;p&gt;명령 인터프리터의 중요한 기능은 사용자가 지정한 명령을 가져와서 그것을 수행하는 것이다. 이 명령어들은 &lt;strong&gt;두 가지 일반적인 방식&lt;/strong&gt;으로 구현될 수 있다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;명령 인터프리터 자체가 명령을 실행할 코드를 가지는 경우&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;시스템 프로그램에 의해 대부분의 명령을 구현하는 경우&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;인터프리터는 해당 명령에 대해서 전혀 알지 못하며, 단지 메모리에 적재되어 실행될 파일을 식별하기 위해 명령을 사용한다.
        &lt;blockquote&gt;
          &lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;

          &lt;p&gt;&lt;strong&gt;rm file.txt라는 명령어를 예로 들어보면 “rm이라 불리는 파일을 찾아서, 그 파일을 메모리에 적재하고, rm 이라 불리는 파일을 매개변수 file.txt로 수행한다”&lt;/strong&gt; 라는 의미이다. rm명령과 관련된 로직은 rm이라는 파일 내의 코드로 완전하게 정의되기 때문에 프로그래머는 적합한 프로그램 로직을 가진 새로운 파일을 생성함으로써 시스템에 새로운 명령을 쉽게 추가할 수 있다. &lt;strong&gt;해당 방법을 사용할 시 명령 인터프리터 프로그램은 아주 작아질 수 있으며, 새로운 명령을 추가하기 위해 변경될 필요가 없다.&lt;/strong&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;222-그래픽-기반-사용자-인터페이스-graphical-user-interface&quot;&gt;2.2.2 그래픽 기반 사용자 인터페이스 (Graphical User Interface)&lt;/h4&gt;

&lt;p&gt;그래픽 기반 사용자 인터페이스란 CLI를 통하여 사용자가 직접 명령어를 입력하는 것이 아니라 &lt;strong&gt;데스크톱이라고 특정지어지는 마우스를 기반으로 하는 윈도 메뉴 시스템을 사용한다.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;223-터치스크린-인터페이스touch-screen-interface&quot;&gt;2.2.3 터치스크린 인터페이스(Touch Screen Interface)&lt;/h4&gt;

&lt;p&gt;대부분의 모바일 시스템에는 명령 라인 인터페이스나 마우스 및 키보드 시스템이 실용적이지 않기 떄문에 &lt;strong&gt;스마트폰 및 휴대용 태블릿 컴퓨터는 일반적으로 터치스크린 인터페이스(TouchScreen Interface)를 사용한다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ex) iPad와 iPhone에서의 Springboard 터치스크린 인터페이스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;224-인터페이스-선택-choice-of-interface&quot;&gt;2.2.4 인터페이스 선택 (Choice of Interface)&lt;/h4&gt;

&lt;p&gt;컴퓨터를 관리하는 시스템 관리자와 시스템에 대해 깊게 알고 있는 파워 유저들은 &lt;strong&gt;명령어 라인 인터페이스(CLI)&lt;/strong&gt;를 사용한다.&lt;/p&gt;

&lt;p&gt;몇몇 시스템에서는 GUI를 통해서는 시스템 기능의 일부만을 이용할 수 있고 자주 쓰이지 않는 나머지 기능은 CLI를 사용할 수 있는 사용자만이 이용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;셸 스크립트(shell scripts)는 UNIX와 Linux와 같이 명령어-라인 인터페이스에 기반을 둔 시스템에서는 매우 흔한 형태이다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;셸 스크립트(shell script)는 셸이나 Command Line 인터프리터에서 돌아가도록 작성되었거나 한 운영 체제를 위해 쓰인 스크립트이다.&lt;/strong&gt; 단순한 도메인 고유 언어로 여기기도 한다. 셸 스크립트가 수행하는 일반 기능으로는 &lt;u&gt;파일 이용, 프로그램 실행, 문자열 출력 등&lt;/u&gt;이 있다.&lt;/p&gt;

  &lt;p&gt;셸 스크립트라는 말은 유닉스 셸을 위해 쓰인 스크립트를 말하는 반면, COMMAND.COM(도스)과 cmd.exe (윈도) Command Line 스크립트는 보통 Batch File이라고 불리지만 이 글에는 두 개의 속성 모두를 논한다.&lt;/p&gt;

  &lt;p&gt;.sh라는 파일 확장자를 가진 파일이 특정 종류의 셸 스크립트를 가리키는 것이 보통이지만, 대부분의 셸 스크립트는 파일 확장자를 지니지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;23-시스템-콜-system-calls&quot;&gt;2.3 시스템 콜 (System Calls)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;시스템 콜은 운영체제에 의해 사용 가능하게 된 서비스에 대한 &lt;u&gt;인터페이스를 제공&lt;/u&gt;한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;특정 저수준 작업(ex. 하드웨어를 직접 접근해야 하는 작업)은 어셈블리 명령을 사용하여 작성되어야 하더라도 이러한 호출은 일반적으로 C와 C++ 언어로 작성된 함수 형태로 제공된다.&lt;/p&gt;

&lt;h4 id=&quot;232-응용-프로그래밍-인터페이스-application-programming-interface-api&quot;&gt;2.3.2 응용 프로그래밍 인터페이스 (Application Programming Interface, API)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;대부분의 Application 개발자들은 API에 따라 프로그램을 설계한다.&lt;/strong&gt; API는 각 함수에 전달되어야 할 매개변수들과 프로그래머가 기대할 수 있는 반환 값을 포함하여 Application 프로그래머가 사용 가능한 함수의 집합을 명시한다.&lt;/p&gt;

&lt;p&gt;프로그래머가 사용 가능한 가장 흔한 3가지의 API는 &lt;u&gt;Windows API, POSIX API, Java API&lt;/u&gt;이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;최종적으로 API를 구성하는 함수들은 통상 Application Programmer를 대신하여 실제 시스템 콜을 호출한다.&lt;/strong&gt; (ex. Windows 함수 CreateProcess() API는 실제로 Windows 커널의 NTCreateProcess() 시스템 콜을 부른다.)&lt;/p&gt;

&lt;p&gt;시스템 콜을 처리하는데 있어 중요한 또 다른 요소는 &lt;strong&gt;실행시간 환경(RTE, 런타임 환경)&lt;/strong&gt;이다. RTE는 운영체제가 제공하는 시스템 콜에 대한 연결고리 역할을 하는 &lt;strong&gt;시스템 콜 인터페이스&lt;/strong&gt;를 제공한다. 이 시스템 콜 인터페이스는 API 함수의 호출을 intercept해서 필요한 운영체제 시스템 콜을 부른다.&lt;/p&gt;

&lt;p&gt;통상 각 시스템 콜에는 번호가 할당되고 시스템 콜 인터페이스는 이 번호에 따라 색인되는 테이블을 유지한다. 시스템 콜 인터페이스는 의도하는 시스템 콜을 부르고 시스템 콜의 상태와 반환 값을 돌려준다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;운영체제 인터페이스에 대한 대부분의 자세한 내용은 API에 의해 프로그래머로부터 숨겨지고 RTE에 의해 관리된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래의 그림에서는 API가 open() 시스템 콜을 불렀을 떄 운영체제가 어떻게 처리하는지 설명하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/operating-system-structures-2.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;시스템 콜 호출을 위해서는 운영체제에 매개변수를 전달해야만 한다. 이를 위해서 보통 운영체제는 3개의 일반적인 방법을 사용한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;매개변수를 레지스터 내에 전달하는 방법&lt;/li&gt;
  &lt;li&gt;매개변수를 메모리 내의 블록이나 테이블에 저장하고, 블록의 주소가 레지스터 내에 매개변수로 전달되는 방법&lt;/li&gt;
  &lt;li&gt;매개변수를 메모리 내의 스택에 push &amp;amp;&amp;amp; pop 하는 방법.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;233-시스템-콜의-유형-types-of-system-calls&quot;&gt;2.3.3 시스템 콜의 유형 (Types of System Calls)&lt;/h4&gt;

&lt;p&gt;시스템 콜은 다섯 가지의 중요한 범주, 즉 &lt;strong&gt;프로세스 제어, 파일 조작, 장치 조작, 정보 유지 보수, 통신, 보호&lt;/strong&gt;등으로 묶을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프로세스 제어 (Prcess Control)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프로세스에 실행 중인 프로그램은 수행을 정상적으로(end()) 또는 비정상적으로(abort()) 멈출 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;한 프로그램을 실행하고 있는 프로세스가 다른 프로그램을 적재(load())하고 실행(execute()) 할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;운영체제는 프로세스의 속성들을 결정하고 재설정(reset)할 수 있는 능력이 있어야 한다.&lt;/li&gt;
  &lt;li&gt;특정 이벤트가 일어날 때까지 프로세스를 기다려야 할 수도 있다.&lt;/li&gt;
  &lt;li&gt;프로세스 간에 공유되는 일관성을 보장하기 위해서 운영체제는 종종 프로세스가 공유 데이터를 잠글(lock) 수 있는 시스템 콜을 제공한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;파일 관리 (File Management)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;파일을 생성(create())하고 삭제(delete())할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;파일을 열고(open())고 읽고(read()), 쓰고(write()), 위치 변경(reposition()), 되감기(rewind()), 파일 닫기(close())를 할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;파일에 대한 속성을 얻을(get_file_attribute()) 수 있어야 하고 파일 속성을 설정(set_file_attribute())할 수 있어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;장치 관리 (Device Management)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;다수의 사용자가 동시에 사용하는 시스템은 독점적인 장치 사용을 보장받기 위해 우선 그 장치를 요청(request())할 수 있어야 하고 그 장치의 사용이 끝나면 우리는 방출(release())할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;장치를 읽고(read()), 쓰고(write()), 위치 변경(reposition())할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;장치의 속성을 얻을 수 있어야 하고, 설정할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;논리적으로 장치를 붙이고 제거할 수 있어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;정보 유지 관리 (Information Maintenance)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;현재 시간(time())과 날짜 정보를(date()) 제공할 수 있어야 하고 설정할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;프로그램이 특정 위치, 혹은 위치의 집합에서 수행한 시간의 양을 나타내는 시간 프로파일(time profile)을 제공한다.&lt;/li&gt;
  &lt;li&gt;프로세스, 파일, 장치에 대한 속성을 얻을 수 있고 설정할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;시스템 데이터를 얻을 수 있어야 하고, 설정할 수 있어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;통신 (Communications)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;메시지 전달을 위해 communication connection을 생성할 수 있어야하고 삭제할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;메시지를 받을 수 있어야 하고 보낼 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;상태 정보를 전송할 수 잇어야 한다.&lt;/li&gt;
  &lt;li&gt;원격 장치를 붙이고 땔 수 있어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;보호 (Protection)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;자원 접근 허가를 얻을 수 있어야 하고 설정할 수 있어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;24-시스템-서비스-system-services&quot;&gt;2.4 시스템 서비스 (System Services)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;시스템 서비스는, 시스템 유틸리티(system utility)로도 알려진, 프로그램 개발과 실행을 위해 더 편리한 환경을 제공한다.&lt;/strong&gt; 이 중 몇몇은 단순히 시스템 콜에 대한 사용자 인터페이스이며, 반면에 나머지는 훨씬 더 복잡하다.&lt;/p&gt;

&lt;p&gt;다음에서는 시스템 서비스를 중요한 몇가지 범주로 나누었다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;파일 관리 :&lt;/strong&gt; 파일과 디렉터리를 생성, 삭제, 복사, rename, 인쇄, 열거할 수 있는 서비스&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;상태 정보 :&lt;/strong&gt; 시스템의 날짜, 시간, 사용 가능한 메모리와 디스크 공간의 양, 사용자 수, 로깅 및 디버깅 정보 등의 상태 정보를 제공하는 서비스&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;파일 변경 :&lt;/strong&gt; 파일의 내용을 생성하고 변경하기 위한 서비스&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;프로그래밍 언어 지원:&lt;/strong&gt; 일반적인 프로그래밍 언어들에 대한 컴파일러, 어셈블러, 디버거 및 인터프리터가 운영체제와 함께 제공되는 서비스&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;프로그램 적재와 수행 :&lt;/strong&gt; 프로그램이 어셈블되거나 컴파일된 후, 그것이 수행하기 앞서 메모리에 적재시키는 서비스&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;통신 :&lt;/strong&gt; 프로세스, 사용자, 다른 컴퓨터 시스템들 사이에 가상 접속을 이루기 위한 기법을 제공하는 서비스&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;백그라운드 서비스 :&lt;/strong&gt; 네트워크 디먼, 프로세스 스케줄러 등과 같은 백그라운드 서비스&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;사용자 대부분이 보는 운영체제의 관점은 실제의 시스템 콜에 의해서보다는 시스템 프로그램과 Application에 의해 정의된다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;25-링커와-로더linkers-and-loaders&quot;&gt;2.5 링커와 로더(Linkers and Loaders)&lt;/h3&gt;

&lt;p&gt;일반적으로 프로그램은 디스크에 이진 실행 파일(ex. a.out 또는 prog.exe)로 존재한다. &lt;strong&gt;CPU에서 실행하려면 프로그램을 메모리로 가져와 프로세스 형태로 배치되어야 한다.&lt;/strong&gt; 이 절에서는 프로그램을 컴파일하고 메모리에 배치하여 사용 가능한 CPU 코어에서 실행할 수 있게 되기까지의 이러한 절차를 단계별로 설명한다.&lt;/p&gt;

&lt;p&gt;이 절차를 설명한 그림은 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/operating-system-structures-4.png&quot; style=&quot;width:60%&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;소스 파일은 임의의 물리 메모리 위치에 적재되도록 설계된 오브젝트 파일로 컴파일 된다. 이러한 형식을 &lt;strong&gt;재배치 가능 오브젝트 파일&lt;/strong&gt;이라고 한다.&lt;/li&gt;
  &lt;li&gt;다음으로 &lt;strong&gt;링커&lt;/strong&gt;는 이러한 재배치 가능 오브젝트 파일을 하나의 &lt;strong&gt;이진 실행 파일&lt;/strong&gt;로 결합한다. (다른 오브젝트 파일 또는 라이브러리도 포함될 수 있다.)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;로더&lt;/strong&gt;는 이진 실행 파일을 &lt;strong&gt;메모리에 적재하는데 사용&lt;/strong&gt;되며, &lt;strong&gt;실행 파일이 CPU 코어에서 실행할 수 있는 상태가 된다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;링크 및 로드와 관련된 활동은 재배치로, 프로그램 부분에 최종 주소를 할당하고 프로그램 코드와 데이터를 해당 주소와 일치하도록 조정하여 프로그램이 실행될 때 코드가 라이브러리 함수를 호출하고 변수에 접근할 수 있게 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;UNIX 시스템(ex. ./main)의 명령어 라인에 프로그램 이름을 입력하면 셸은 먼저 fork()시스템 콜을 사용하여 프로그램을 실행하기 위한 &lt;strong&gt;새 프로세스를 생성&lt;/strong&gt;한다. 그런 다음 셸은 exec() 시스템 콜로 &lt;strong&gt;로더를 호출&lt;/strong&gt;하고 exec()에 실행 파일 이름을 전달한다. 그런 다음 로더는 새로 생성된 프로세스의 주소 공간을 사용하여 &lt;strong&gt;지정된 프로그램을 메모리에 적재&lt;/strong&gt;한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;실제 시스템 대부분에서는 프로그램이 적재될 때 라이브러리를 동적으로 링크할 수 있는 기능을 지원한다.&lt;/strong&gt; (ex. The dynamic linked library(DLL) of Windows) 링커는 프로그램이 적재될 때 동적으로 링크되고 적재될 수 있도록 재배치 정보를 삽입하기 때문에 &lt;u&gt;여러 프로세스가 동적으로 링크된 라이브러리를 공유할 수 있어 메모리 사용이 크게 절약&lt;/u&gt;될 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;26-응용-프로그램이-운영체제마다-다른-이유-why-applications-are-operating-system-specific&quot;&gt;2.6 응용 프로그램이 운영체제마다 다른 이유 (Why Applications Are Operating-System Specific)&lt;/h3&gt;

&lt;p&gt;기본적으로 한 운영체제에서 컴파일된 응용 프로그램은 다른 운영체제에서 실행할 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application이 여러 운영체제에서 실행될 수 있게 만드는 방법 3가지&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;운영체제마다 인터프리터가 제공되는 인터프리터 언어로 Application을 만드는 방법 (ex. Python, Ruby)&lt;/li&gt;
  &lt;li&gt;실행 중인 Application을 포함하고 있는 가상 머신을 가진 언어로 Application을 만드는 방법 (ex. JAVA)&lt;/li&gt;
  &lt;li&gt;컴파일러가 기기 및 운영체제 고유의 이진 파일을 생성하는 표준 언어 또는 API를 사용하는 방법 (ex. POSIX API)&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;27-운영체제-설계-및-구현-operating-system-design-and-implementation&quot;&gt;2.7 운영체제 설계 및 구현 (Operating SYstem Design and Implementation)&lt;/h3&gt;

&lt;h4 id=&quot;271-설계-목표-design-goals&quot;&gt;2.7.1 설계 목표 (Design Goals)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;시스템을 설계하는 데에 첫째 문제점은 시스템의 목표와 명세를 정의하는 일이다.&lt;/strong&gt; 시스템 설계는 최상위 수준에서는 하드웨어와 시스템 유형의 선택에 의해 영향을 받을 것이다.&lt;/p&gt;

&lt;p&gt;최상위 설계 수준을 넘어서면 요구 조건들을 &lt;strong&gt;사용자 목적&lt;/strong&gt;과 &lt;strong&gt;시스템 목적&lt;/strong&gt;의 두 그룹으로 나눌 수 있다.&lt;/p&gt;

&lt;p&gt;운영체제의 명세와 설계는 매우 창조적인 일이며, 어떤 책에서도 이런 문제점을 해결하는 방법을 알려줄 수는 없지만, 특별히 운영체제에 적용 가능한 일반적인 원칙들은 존재한다.&lt;/p&gt;

&lt;h4 id=&quot;272-기법과-정책-mechanisms-and-policies&quot;&gt;2.7.2 기법과 정책 (Mechanisms and Policies)&lt;/h4&gt;

&lt;p&gt;한 가지 중요한 원칙은 &lt;strong&gt;기법(Mechanism)&lt;/strong&gt;으로부터 &lt;strong&gt;정책(Policy)&lt;/strong&gt;를 분리하는 것이다. 기법은 어떤 일을 어떻게 할 것인가를 결정하는 것이고, 정책은 무엇을 할 것인가를 결정하는 것이다. (ex. 타이머, 마이크로 커널 기반 운영체제)&lt;/p&gt;

&lt;h4 id=&quot;273-구현-implementation&quot;&gt;2.7.3 구현 (Implementation)&lt;/h4&gt;

&lt;p&gt;초기 운영체제는 어셈블리 언어로 작성되었다. 이제 대부분은 C 또는 C++와 같은 고급 언어로 작성되며, 극히 일부의 시스템이 어셈블리 언어로 작성된다.&lt;/p&gt;

&lt;p&gt;운영체제의 주요 성능 향상은 운영체제를 구현하는 고급 언어의 유/무 보다는 좋은 자료구조와 알고리즘의 결과일 가능성이 크다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;28-운영체제-구조-operating-system-structures&quot;&gt;2.8 운영체제 구조 (Operating System Structures)&lt;/h3&gt;

&lt;p&gt;이 절에서는 운영체제의 공통적인 구성요소들이 어떤 방법으로 상호 연결되고 하나의 커널로 결합되는지에 대해서 알아보도록 하겠다.&lt;/p&gt;

&lt;h4 id=&quot;281-모놀리식-구조-monolithic-structure&quot;&gt;2.8.1 모놀리식 구조 (Monolithic Structure)&lt;/h4&gt;

&lt;p&gt;운영체제를 구성하는 가장 간단한 구조는 구조가 아예 없는 것이다. &lt;strong&gt;즉, 커널의 모든 기능을 단일 주소 공간에서 실행되는 단일 정적 이진 파일에 넣는 것이다. 즉, 이 방법을 모놀리식 구조라고 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;제한적인 구조를 가진 운영체제의 예는 최초의 UNIX 운영체제로 커널과 시스템 프로그램의 두 부분으로 구성된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/operating-system-structures-5.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Linux 운영체제는 UNIX에 기반을 두고 있으며 위의 그림과 유사하게 구성된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;모놀리식 커널의 명백한 단순성에도 불구하고 이 구조는 구현 및 확장하기 어렵다. 그러나 모놀리식 커널은 성능 면에서 뚜렷한 이점이 있다. 시스템 콜 인터페이스에는 오버헤드가 거의 없고 커널 안에서의 통신 속도가 빠르다.&lt;/strong&gt; 따라서 모놀리식 커널의 단점에도 불구하고, 속도와 효율성은 이 구조의 증거를 여전히 UNIX, Linux 및 Windows 운영체제에서 발견할 수 있는 이유이다.&lt;/p&gt;

&lt;h4 id=&quot;282-계층적-접근-layered-approach&quot;&gt;2.8.2 계층적 접근 (Layered Approach)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;계층적 접근 방법은 운영체제가 여러 개의 층으로 나뉘어진다. 최하위 층은 하드웨어이고 최상위 층은 사용자 인터페이스이다.&lt;/strong&gt; 이 계층 구조는 아래의 그림에 나와 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/operating-system-structures-6.png&quot; style=&quot;width:50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;운영체제 층은 데이터와 이를 조작하는 연산으로 구성된 추상된 객체의 구현이다. 전형적인 운영체제 층은 자료구조와 상위층에서 호출할 수 있는 루틴의 집합으로 구성된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;계층적 접근 방식의 주된 장점은 구현과 디버깅의 간단함에 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;계층화된 시스템은 컴퓨터 네트워크(TCP/IP) 및 웹 응용 프로그램에서 성공적으로 사용됐다.&lt;/p&gt;

&lt;h4 id=&quot;283-마이크로커널-microkernels&quot;&gt;2.8.3 마이크로커널 (MicroKernels)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;마이크로커널 방법은 모든 중요치 않은 구성요소를 커널로부터 제거하고, 그들을 별도의 주소 공간에 존재하는 사용자 수준 프로그램으로 구현하여 운영체제를 구성하는 방법이다.&lt;/strong&gt; (ex. Mach 운영체제) 결과는 더 작은 커널이다.&lt;/p&gt;

&lt;p&gt;마이크로커널의 주 기능은 클라이언트 프로그램과 사용자 공간에서 수행되는 다양한 서비스 간에 통신을 제공하는 것이다. 통신은 메시지 전달에 의해 제공된다.&lt;/p&gt;

&lt;p&gt;아래의 그림은 전형적인 마이크로커널의 구조를 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/operating-system-structures-7.png&quot; style=&quot;width:80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;마이크로커널 접근법의 한 가지 장점은 운영체제의 확장이 쉽다는 것이다.&lt;/strong&gt; 모든 새로운 서비스는 사용자 공간에 추가되며, 따라서 커널을 변경할 필요가 없다. 커널이 변경되어야만 할 때는, &lt;u&gt;마이크로커널이 작은 커널이기 떄문에 변경할 대상이 비교적 적은 경향이 있다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;마이크로커널은 서비스 대부분이 커널이 아니라 &lt;strong&gt;사용자 프로세스로 수행&lt;/strong&gt;되기 떄문에 또한 더욱 높은 보안성과 신뢰성을 제공한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;마이크로 커널의 운영체제의 가장 잘 알려진 실례는 macOS 및 iOS 운영체제의 커널 구성요소인 &lt;strong&gt;Darwin&lt;/strong&gt;이다. 실제로 Darwin은 두 개의 커널로 구성되며 그 중 하나는 Mach 마이크로커널이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;마이크로커널은 가중된 시스템 기능 오버헤드 때문에 성능이 나쁘다.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;284-모듈-modules&quot;&gt;2.8.4 모듈 (Modules)&lt;/h4&gt;

&lt;p&gt;운영체제를 설계하는 데 이용되는 최근 기술 중 최선책은 아마도 &lt;strong&gt;적재가능 커널 모듈(loadable kernel modules, LKM)&lt;/strong&gt; 기법의 사용일 것이다. &lt;strong&gt;LKM에서는 커널은 핵심적인 구성요소의 집합을 가지고 있고 부팅 때 또는 실행 중에 부가적인 서비스들을 모듈을 통하여 링크할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;설계의 주안점은 &lt;u&gt;커널은 핵심 서비스를 제공하고 다른 서비스들은 커널이 실행되는 동안 동적으로 구현&lt;/u&gt;하는 것이다.&lt;/p&gt;

&lt;p&gt;전체적인 결과는 커널의 각 부분이 정의되고 보호된 인터페이스를 가진다는 점에서 계층 구조를 닮았지만 모듈에서 임의의 다른 모듈을 호출할 수 있다는 점에서 계층 구조보다 유연하다. 중심 모듈은 단지 핵심 기능만을 가지고 있고 다른 모듈의 적재 방법과 모듈들과 어떻게 통신하는지 안다는 점에서는 마이크로 커널과도 유사하다. 그러나 &lt;strong&gt;통신하기 위하여 메시지 전달을 호출할 필요가 없기 때문에 더 효율적이다.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;285-하이브리드-시스템-hybrid-systems&quot;&gt;2.8.5 하이브리드 시스템 (Hybrid Systems)&lt;/h4&gt;

&lt;p&gt;사실 엄격하게 정의된 하나의 구조를 채택한 운영체제는 거의 존재하지 않는다. 대신 다양한 구조를 결합하여 성능, 보안 및 편리성 문제를 해결하려는 혼용 구조로 구성된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;macOS와 iOS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Apple의 macOS 운영체제는 주로 데스크톱 및 랩톱 컴퓨터 시스템에서 실행되도록 설계되었으며 iOS는 iPhone 스마트폰 및 iPad 태블릿 컴퓨터용으로 설계된 모바일 운영체제이다.&lt;/li&gt;
  &lt;li&gt;macOS와 iOS는 Darwin이라고 불리는 하이브리드 커널 환경을 사용한다.
    &lt;ul&gt;
      &lt;li&gt;Darwin은 주로 Mach 마이크로커널과 BSD UNIX 커널로 구성된 계층화된 시스템이다.&lt;/li&gt;
      &lt;li&gt;Darwin 구조 그림은 아래에 명시되어 있다.&lt;/li&gt;
      &lt;li&gt;Mach는 메모리 관리, CPU 스케줄링 및 메시지 전달 및 원격 프로시저 호출과 같은 프로세스간 통신 기능을 포함한 기본 운영체제 서비스를 제공한다. (커널 추상화를 통해 사용 가능)&lt;/li&gt;
      &lt;li&gt;마이크로커널의 성능 문제를 해결하기 위해 Darwin은 Mach, BSD, I/O 키트 및 모든 커널 확장을 단일 주소 공간으로 결합한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/operating-system-structures-8.png&quot; style=&quot;width:60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Android&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Android 운영체제는 Open Handset Alliance가 설계하였으며 Android 스마트폰과 태블릿을 위해 개발되었다.&lt;/li&gt;
  &lt;li&gt;Android 장치의 소프트웨어 설계자는 Java 언어로 응용 프로그램을 개발하지만 일반적으로 표준 Java API를 사용하지 않고 별도의 Android API를 사용한다.&lt;/li&gt;
  &lt;li&gt;Java 응용 프로그램은 Android RunTime(ART)에서 실행할 수 있는 형식으로 컴파일된다.
    &lt;ul&gt;
      &lt;li&gt;ART는 Android용으로 설계되어 메모리와 CPU 처리 능력이 제한적인 모바일 장치에 최적화된 가상 머신이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Android 개발자는 개발자가 가상 머신을 우회할 수 있게 하는 Java 네이티브 인터페이스를 사용하여 Java 프로그램을 작성하여 특정 하드웨어 기능에 액세스 할 수 있는 프로그램을 작성할 수 있다.&lt;/li&gt;
  &lt;li&gt;하드웨어 추상화 계층 또는 HAL을 통해 물리적 하드웨어를 추상화한다.&lt;/li&gt;
  &lt;li&gt;Android 소프트웨어 스택의 맨 아래에는 Linux 커널이 있다.&lt;/li&gt;
  &lt;li&gt;Android 구조 그림은 아래에 명시되어 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/operating-system-structures-9.png&quot; style=&quot;width:50%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;29-운영체제-빌딩과-부팅-building-and-booting-an-operating-system&quot;&gt;2.9 운영체제 빌딩과 부팅 (Building and Booting an Operating System)&lt;/h3&gt;

&lt;h4 id=&quot;291-운영체제-생성-operating-system-generation&quot;&gt;2.9.1 운영체제 생성 (Operating System Generation)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;운영체제를 처음부터 생성(또는 빌딩)하는 경우 절차&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;운영체제 소스 코드를 작성한다(또는 이전에 작성된 소스 코드를 확보한다.)&lt;/li&gt;
  &lt;li&gt;실행될 시스템을 위해 운영체제를 구성한다.&lt;/li&gt;
  &lt;li&gt;운영체제를 컴파일 한다.&lt;/li&gt;
  &lt;li&gt;운영체제를 설치한다.&lt;/li&gt;
  &lt;li&gt;컴퓨터와 새 운영체제를 부팅한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;시스템을 구성하려면 어떤 기능이 포함되는지 명시해야 하며 이는 운영체제에 따라 다르다. 일반적으로 시스템 구성 방법을 설명하는 매개변수는 특정 유형의 구성 파일에 저장되며 이 파일을 만든 후에는 여러가지 방법으로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;상세한 조정을 할 수 없는 수준에서는 시스템 설명을 통하여 기존 라이브러리에서 사전 컴파일된 오브젝트 모듈을 선택할 수 있다. &lt;strong&gt;이 모듈들이 서로 링크되어 새 운영체제가 생성된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다른 경우에는 완전히 모듈 방식으로 시스템을 구성할 수 있다. 여기서 선택은 컴파일 또는 링크 시간이 아닌 &lt;strong&gt;실행 시간(Runtime)&lt;/strong&gt;에 일어난다. 시스템 생성은 단순히 시스템 구성을 설명하는 매개변수의 설정만 하면 된다.&lt;/p&gt;

&lt;h4 id=&quot;292-시스템-부트-system-boot&quot;&gt;2.9.2 시스템 부트 (System Boot)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;커널을 적재하여 컴퓨터를 시작하는 과정을 시스템 부팅(Booting)이라고 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;대부분 시스템의 부팅 과정&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;부트스트랩 프로그램(Bootstrap Program)&lt;/strong&gt; 또는 &lt;strong&gt;부트 로더(Boot Loader)&lt;/strong&gt;라고 불리는 작은 코드가 커널의 위치를 찾는다.&lt;/li&gt;
  &lt;li&gt;커널이 메모리에 적재되고 시작된다.&lt;/li&gt;
  &lt;li&gt;커널은 하드웨어를 초기화 한다.&lt;/li&gt;
  &lt;li&gt;루트 파일 시스템이 마운트 된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;많은 최신 컴퓨터 시스템이 BIOS 기반 부팅 과정을 UEFI(Unified Extensible Firmware Interface)로 대체하였다.
&lt;u&gt;UEFI의 큰 장점은 UEFI가 하나의 완전한 부팅 관리자이므로 다단계 BIOS 부팅 과정보다 빠르다는 것이다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;부트스트랩 프로그램&lt;/strong&gt;은 커널 프로그램이 포함된 파일을 메모리에 적재하는 것외에도 진단을 실시하여 메모리와 CPU를 점검하고 장치 검색과 같은 시스템 상태를 확인한다. 진단을 통과하면 프로그램은 부팅 과정을 계속 진행할 수 있다. 부트스트랩은 CPU 레지스터에서 장치 컨트롤러 및 메인 메모리의 내용에 이르기까지 시스템의 모든 측면을 초기화 할 수 있다. 조만간 운영체제를 시작하고 루트 파일 시스템을 마운트 한다. 바로 이 시점에서 &lt;strong&gt;시스템이 실행 중&lt;/strong&gt;이라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GRUB&lt;/strong&gt;는 Linux 및 UNIX 시스템을 위한 &lt;strong&gt;공개 소스 부트스트랩 프로그램&lt;/strong&gt;이다. 시스템의 부트 매개변수는 GRUB 구성 파일에 설정되며 GRUB의 실행 시작 시점에 적재된다.&lt;/p&gt;

&lt;p&gt;부팅 과정에서 &lt;strong&gt;부트 로더&lt;/strong&gt;는 일반적으로 &lt;strong&gt;initramfs로 알려진 임시 RAM 파일 시스템을 생성&lt;/strong&gt;한다. 이 파일 시스템에는 실제 루트 파일 시스템을 지원하기 위해 설치해야하는 드라이버와 커널 모듈이 저장되어 있다. &lt;strong&gt;커널이 시작되고 필요한 드라이버가 설치되면 커널은 루트 파일 시스템을 임시 RAM 위치(initramfs)에서 적절한 루트 파일 시스템 위치로 전환&lt;/strong&gt;한다. 마지막으로 Linux는 시스템의 초기 프로세스인 &lt;strong&gt;systemd&lt;/strong&gt; 프로세스를 생성한 다음 다른 서비스를 시작한다. (UNIX는 init 프로세스)&lt;/p&gt;

&lt;p&gt;Windows, Linux, macOS, iOS 및 Android를 비롯한 대부분의 운영체제의 &lt;strong&gt;부트 로더&lt;/strong&gt;는 하드웨어 문제 진단, 손상된 파일 시스템 복구 및 운영체제 재설치 등의 작업을 할 수 있는 &lt;strong&gt;복구 모드&lt;/strong&gt; 또는 &lt;strong&gt;단일 사용자 모드&lt;/strong&gt;로 부팅할 수 있는 기능을 제공한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;210-운영체제-디버깅-operating-system-debugging&quot;&gt;2.10 운영체제 디버깅 (Operating System Debugging)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;디버깅(Debugging)은 하드웨어와 소프트웨어에서의 시스템의 오류를 발견하고 수정하는 행위이다.&lt;/strong&gt; 이 절에서는 커널과 프로세스 오류 및 성능 문제의 디버깅에 관해 탐구한다. (병목 현상을 제거하여 성능을 향상시키려는 성능 조정(performance turning)도 디버깅이다.)&lt;/p&gt;

&lt;h4 id=&quot;2101-장애-분석-failure-analysis&quot;&gt;2.10.1 장애 분석 (Failure Analysis)&lt;/h4&gt;

&lt;p&gt;만일 프로세스가 실패한다면, 운영체제 대부분은 시스템 관리자 또는 문제를 발생시킨 사용자에게 문제가 발생했다는 것을 경고하기 위해 오류 정보를 &lt;strong&gt;로그 파일&lt;/strong&gt;에 기록한다. 운영체제는 또한 프로세스가 사용하던 메모리를 캡처한 &lt;strong&gt;코어 덤프(core dump)&lt;/strong&gt;를 취하고 차후 분석을 위해 파일로 저장한다.&lt;/p&gt;

&lt;p&gt;커널 장애는 &lt;strong&gt;크래시(crash)&lt;/strong&gt;라고 불린다. 프로세스 장애와 마찬가지로 커널 장애는 오류 정보가 로그 파일에 저장되고 메모리의 상태가 &lt;strong&gt;크래시 덤프(crash dump)&lt;/strong&gt;에 저장된다.&lt;/p&gt;

&lt;h4 id=&quot;2102-성능-관찰-및-조정-performance-monitoring-and-turning&quot;&gt;2.10.2 성능 관찰 및 조정 (Performance Monitoring and Turning)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;성능 관찰 및 조정(Performance Monitoring and Turning)을 위해 시스템은 동작을 측정하고 표시할 수 있는 방법을 가지고 있어야 한다.&lt;/strong&gt; 도구는 &lt;strong&gt;프로세스별&lt;/strong&gt; 또는 &lt;strong&gt;시스템 전체&lt;/strong&gt;의 관찰을 제공하느냐로 특징이 묘사될 수 있다. 이러한 관찰을 위해 도구는 &lt;strong&gt;카운터&lt;/strong&gt; 또는 &lt;strong&gt;추적&lt;/strong&gt;의 두 가지 접근 방식 중 하나를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;카운터 (Counters)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;운영체제는 &lt;strong&gt;일련의 카운터를 통해&lt;/strong&gt; 호출된 시스템 콜 횟수 또는 네트워크 장치 또는 디스크에 수행된 작업 수와 같은 &lt;strong&gt;시스템 활동을 추적&lt;/strong&gt;한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Linux 도구 예시&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;프로세스별&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;ps : 하나의 프로세스 또는 선택된 프로세스에 대한 정보를 보고&lt;/li&gt;
    &lt;li&gt;top : 현재 프로세스에 대한 실시간 통계를 보고한다.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;시스템 전체&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;vmstat : 메모리 사용량 통계를 보고한다.&lt;/li&gt;
    &lt;li&gt;netstat : 네트워크 인터페이스에 대한 통계를 보고한다.&lt;/li&gt;
    &lt;li&gt;iostat - 디스크의 I/O 사용량을 보고한다.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;Linux 시스템의 카운터 기반 도구 대부분은 /proc 파일 시스템에서 통계를 읽는다. /proc은 커널 메모리에만 존재하는 “의사” 파일 시스템이며, 주로 다양한 프로세스별
통계와 커널 통계를 질의하는데 사용된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;추적 (Tracing)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;추적 도구(Tracing Tool)는 시스템 콜과 관련된 단계와 같은 특정 이벤트에 대한 데이터를 수집한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Linux 도구 예시&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;프로세스별&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;strace : 프로세스에 의해 호출된 시스템 콜을 추적한다.&lt;/li&gt;
    &lt;li&gt;gdb : 소스 레벨 디버거&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;시스템 전체&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;perf : 리눅스 성능 도구 모음&lt;/li&gt;
    &lt;li&gt;tcpdump : 네트워크 패킷을 수집한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;2104-bcc&quot;&gt;2.10.4 BCC&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;BCC(BPF Compiler Collection)는 Linux 시스템을 위한 추적 기능을 제공하는 풍부한 툴킷이다.&lt;/strong&gt; BCC는 eBPF 도구에 대한 프론트-엔드 인터페이스이다. BPF 기술은 컴퓨터 네트워크에서 트래픽을 필터링하기 위해 1990년대 초에 개발되었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;BPF(Berkeley Packet Filter)&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;버클리 패킷 필터는 네트워크 트래픽을 분석해야하는 프로그램을 위해 특정 컴퓨터 운영 체제에서 사용되는 기술입니다. 데이터 링크 계층에 대한 원시 인터페이스를 제공하여 
원시 링크 계층 패킷을 보내고 받을 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;eBPF 명령어는 특정 이벤트를 캡처하거나 시스템 성능을 관찰하는데 사용될 수 있다. 하지만 eBPF 명령어는 Linux 커널에 삽입하기 전에 &lt;strong&gt;검증기&lt;/strong&gt;를 통과해야한다.&lt;/p&gt;

&lt;p&gt;BCC는 eBPF를 사용하는 도구를 더 쉽게 작성할 수 있도록 개발되었으며 Python 언어로 작성된 &lt;strong&gt;프론트-엔드 인터페이스를 제공&lt;/strong&gt;한다. BCC도구는 Python으로 작성되며 eBPF 계측 기능과 인터페이스 하는 C 코드를 내장한다. 이 계측 기능은 이어서 커널과 인터페이스 한다. &lt;strong&gt;BCC도구는 또한 C 프로그램을 eBPF 명령어로 컴파일하고, probe 또는 tracepoint를 사용하여 커널에 삽입한다.&lt;/strong&gt; Probe와 tracepoint는 Linux 커널에서 이벤트 추적을 허용하는 두가지 기술이다.&lt;/p&gt;

&lt;p&gt;BCC패키지는 실행 중인 Linux 커널에서 여러 활동 영역을 관찰하는 여러 기존 도구를 제공한다. 또한 BCC가 제공하는 많은 도구는 MySQL 데이터베이스, Java 및 Python 프로그램과 같은 특정 응용 프로그램에 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BCC를 특히 강력하게 만드는 것은 시스템에 해를 끼치지 않고 중요한 응용 프로그램을 실행하는 실제 프로덕션 시스템에서 해당 도구를 사용할 수 있다는 것이다.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Sep 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/computer-science(cs)/2020/09/03/Operating-System-Structures.html</link>
        <guid isPermaLink="true">http://localhost:4000/computer-science(cs)/2020/09/03/Operating-System-Structures.html</guid>
        
        <category>Operating-System</category>
        
        <category>OS</category>
        
        <category>CS</category>
        
        <category>Computer</category>
        
        
        <category>Computer-Science(CS)</category>
        
      </item>
    
      <item>
        <title>[Operating System - Chapter 1] 운영체제란 무엇인가?</title>
        <description>&lt;p&gt;이 포스팅은 공룡책으로 알려진 Operating System Concepts의 1장을 공부하면서 정리한 포스팅이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;11-운영체제란-무엇인가&quot;&gt;1.1 운영체제란 무엇인가?&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;11-운영체제가-할-일-what-operating-systems-do&quot;&gt;1.1 운영체제가 할 일 (What Operating Systems Do)&lt;/h3&gt;

&lt;p&gt;컴퓨터 시스템은 다음 그림처럼 대게 네 가지 구성요소인 &lt;strong&gt;하드웨어, 운영체제, 응용 프로그램, 사용자&lt;/strong&gt;로 구분할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-1.png&quot; style=&quot;width:30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;운영체제는 다양한 사용자를 위해 다양한 응용 프로그램 간의 하드웨어 사용을 제어하고 조종한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;운영체제는 항상 실행 중인 &lt;strong&gt;커널(Kernel)&lt;/strong&gt;과 응용 프로그램 개발을 쉽게 하고 기능을 제공하는 미들웨어 프레임워크 및 시스템 실행 중에 시스템 관리하는데 도움이 되는 &lt;strong&gt;시스템 프로그램(System Program)&lt;/strong&gt;이 포함된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;일반적으로 항상 실행되는 프로그램을 &lt;strong&gt;커널(Kernel)&lt;/strong&gt;이라고 한다,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;12-컴퓨터-시스템의-구성-computer-system-organization&quot;&gt;1.2 컴퓨터 시스템의 구성 (Computer System Organization)&lt;/h3&gt;

&lt;p&gt;현대의 범용 컴퓨터 시스템은 하나 이상의 CPU와 구성요소와 공유 메모리 사이의 액세스를 제공하는 &lt;strong&gt;공통 버스(bus)&lt;/strong&gt;를 통해 연결된 여러 장치 컨트롤러로 구성된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-2.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일반적으로 운영체제에는 각 장치 컨트롤러마다 &lt;strong&gt;장치 드라이버&lt;/strong&gt;가 있다. 이 장치 드라이버는 장치 컨트롤러의 작동을 잘 알고 있고 나머지 운영체제에 장치에 대한 일관된 &lt;strong&gt;인터페이스(명세)를 제공&lt;/strong&gt;한다. CPU와 장치 컨트롤러는 병렬로 실행되어 &lt;u&gt;메모리 사이클을 놓고 경쟁&lt;/u&gt;한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;장치 드라이버/제어기 또는 디바이스 드라이버&lt;/strong&gt;는 특정 하드웨어나 장치를 제어하기 위한 &lt;u&gt;커널의 일부분으로 동작하는 프로그램&lt;/u&gt;이다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;컴퓨터를 구성하는 다양한 입출력 장치마다 각각 장치드라이버가 프로그램 되어 커널에 통합되어 실행된다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;장치 드라이버는 높은 수준의 컴퓨터 프로그램들이 컴퓨터 하드웨어 장치와 상호 작용하기 위해 만들어진 하나의 컴퓨터 프로그램이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;121-인터럽트-interrupts&quot;&gt;1.2.1 인터럽트 (Interrupts)&lt;/h4&gt;

&lt;p&gt;하드웨어는 어느 순간이든 시스템 버스를 통해 CPU에 신호를 보내 &lt;strong&gt;인터럽트&lt;/strong&gt;를 발생시킬 수 있다.&lt;/p&gt;

&lt;p&gt;CPU가 인터럽트 되면 CPU는 하던 일을 중단하고 즉시 고정된 위치로 실행을 옮긴다. 이러한 고정된 위치는 일반적으로 &lt;strong&gt;인터럽트를 위한 서비스 루틴&lt;/strong&gt;이 위치한 시작 주소를 가지고 있다. 그리고 인터럽트 서비스 루틴이 실행된다. &lt;strong&gt;인터럽트 서비스 루틴이 실행이 완료되면, CPU는 인터럽트 되었던 연산을 재개&lt;/strong&gt;한다. 다음의 그림은 인터럽트 연산의 시간 일정이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-3.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일반적으로 인터럽트 서비스 루틴의 주소가 들어 있는 포인터 테이블은 하위 메모리(첫 100개 정도의 위치)에 저장된다.&lt;/p&gt;

&lt;p&gt;장치 컨트롤러가 인터럽트 요청 라인에 신호를 선언하여 인터럽트를 &lt;strong&gt;발생(raise)&lt;/strong&gt;시키고 CPU는 인터럽트를 &lt;strong&gt;포착(catch)&lt;/strong&gt;하여 인터럽트 핸들러로 &lt;strong&gt;디스패치(dispatch)&lt;/strong&gt;하고 핸들러는 장치를 서비스하여 인터럽트를 &lt;strong&gt;지운다(clear)&lt;/strong&gt;. &lt;strong&gt;이 기본 인터럽트 기법은 비동기 이벤트에 CPU가 대응&lt;/strong&gt;할 수 있게 한다.&lt;/p&gt;

&lt;p&gt;인터럽트는 &lt;strong&gt;마스크 불가능 인터럽트(nonmaskable interrupt)&lt;/strong&gt;와 &lt;strong&gt;마스킹 가능(maskable interrupt)&lt;/strong&gt; 인터럽트로 나뉜다.&lt;/p&gt;

&lt;h4 id=&quot;122-저장장치-구조-storage-structure&quot;&gt;1.2.2 저장장치 구조 (Storage Structure)&lt;/h4&gt;

&lt;p&gt;CPU는 메모리에서만 명령을 적재할 수 있으므로 실행하려면 &lt;strong&gt;프로그램을 먼저 메모리에 적재&lt;/strong&gt;해야 한다.&lt;/p&gt;

&lt;p&gt;범용 컴퓨터는 프로그램 대부분을 &lt;strong&gt;메인 메모리(Random-Access Memory : RAM)&lt;/strong&gt;라 불리는 재기록 가능한 메모리에서 가져온다.&lt;/p&gt;

&lt;p&gt;모든 형태의 메모리는 바이트의 배열을 제공한다. 각 바이트는 자신의 주소를 가지고 있다. 상호 작용은 특정 메모리 주소들에 대한 일련의 적재(load), 또는 저장(store)명령을 통하여 이루어진다.&lt;/p&gt;

&lt;p&gt;대부분의 컴퓨터 시스템은 메인 메모리의 확장으로 &lt;strong&gt;보조저장장치&lt;/strong&gt;를 제공한다. 보조저장장치의 주요 요건은 대량의 데이터를 영구히 보존할 수 있어야 한다는 점이다. 가장 일반적인 보조저장장치는 &lt;u&gt;하드 디스크 드라이브(HDD)와 비휘발성 메모리(NVM)&lt;/u&gt;로, 프로그램과 데이터 모두를 위한 저장소를 제공한다.&lt;/p&gt;

&lt;p&gt;대부분의 프로그램은 메모리에 적재될 때까지 보조저장 장치를 사용한다. 보조저장장치는 메인 메모리보다 훨씬느리기 때문에, 보조저장장치의 올바른 관리는 컴퓨터 시스템에서 매우 중요하다.&lt;/p&gt;

&lt;p&gt;다른 장치에 저장된 자료의 백업 사본을 저장하기 위해 특수 목적으로만 사용하기에 매우 느리고 충분히 큰 장치를 &lt;strong&gt;3차 저장장치&lt;/strong&gt;라고 한다.&lt;/p&gt;

&lt;p&gt;다양한 저장장치 시스템은 저장 용량 및 액세스 시간에 따라 다음 그림과 같이 계층 구조로 구성될 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-4.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;캐시&lt;/strong&gt;는 두 구성요소 간에 액세스 시간이나 전송 속도의 차이가 큰 경우 성능을 향상하기 위해 설치할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;123-입출력-구조-io-structure&quot;&gt;1.2.3 입출력 구조 (I/O Structure)&lt;/h4&gt;

&lt;p&gt;운영체제 코드의 상당 부분은 시스템의 안정성과 성능에 대한 중요성과 장치의 다양한 특성으로 인해 &lt;strong&gt;I/O 관리&lt;/strong&gt;에 할애된다.&lt;/p&gt;

&lt;p&gt;인터럽트 구동 I/O의 형태는 소량의 데이터를 이동하는 데는 좋지만 NVS(비휘발성 저장장치) I/O와 같은 대량 데이터 이동에 사용될 때 &lt;strong&gt;높은 오버헤드&lt;/strong&gt;를 유발할 수 있다. 이 문제를 해결하기 위해서 &lt;strong&gt;Direct Memory Access(DMA)&lt;/strong&gt;가 사용된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;장치에 대한 버퍼 및 포인터, 입출력 카운트를 세팅한 후 장치 제어기는 CPU의 개입 없이 메모리로부터 자신의 버퍼 장치로 또는 버퍼로부터 메모리로 데이터 블록 전체를 전송한다.&lt;/strong&gt; 이 경우 &lt;u&gt;블록 전송이 완료될 때마다 인터럽트가 발생&lt;/u&gt;한다.&lt;/p&gt;

&lt;p&gt;아래의 그림은 DMA를 사용하는 현대 컴퓨터의 작동방식에 대해서 설명한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-5.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;몇몇 고가의 시스템은 버스 대신에 &lt;strong&gt;스위치 구조&lt;/strong&gt;를 사용한다. 이러한 시스템에서는 &lt;u&gt;공유 버스를 사용하기 위한 사이클을 경쟁하지 않고 다수의 구성요소가 다른 구성요소들과 동시에 통신&lt;/u&gt;하는 것이 가능하다. 이 경우 DMA의 사용은 더욱 효과적이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;13-컴퓨터-시스템-구조-computer-system-architecture&quot;&gt;1.3 컴퓨터 시스템 구조 (Computer SYstem Architecture)&lt;/h3&gt;

&lt;p&gt;컴퓨터 시스템은 사용된 범용 처리기의 수에 따라 분류 가능한 다양한 방식으로 구성될 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;131-단일-처리기-시스템-single-processor-system&quot;&gt;1.3.1 단일 처리기 시스템 (Single Processor System)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Single Processor System이란 하나의 Processor를 포함하는 컴퓨터 시스템을 말한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Single Processor System은 일반적으로 단일 처리 코어를 가진 범용 CPU가 하나만 있는 단일 프로세서 시스템의 경우가 대부분이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;코어&lt;/strong&gt;는 명령을 실행하고 로컬로 데이터를 저장하기 위한 레지스터를 포함하는 구성요소이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;132-다중-처리기-시스템-multi-processor-systems&quot;&gt;1.3.2 다중 처리기 시스템 (Multi Processor Systems)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Multi Processor System 이란 두 개 이상의 Processor를 포함하는 컴퓨터 시스템을 말한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음 그림은 단일 코어 CPU가 있는 두 개의 프로세서로 구성된 시스템을 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-6.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로세서는 컴퓨터 버스 및 때때로 클록, 메모리 및 주변 장치를 공유한다.&lt;/p&gt;

&lt;p&gt;Multi Processor system의 주요 장점은 &lt;strong&gt;처리량(Throughput)증가&lt;/strong&gt; 이다. 즉, 프로세서 수를 늘리면 더 적은 시간에 더 많은 작업을 수행할 수 있다.&lt;/p&gt;

&lt;p&gt;가장 일반적인 다중 처리기 시스템은 각 &lt;strong&gt;피어 CPU 프로세스가 운영체제 기능 및 사용자 프로세스를 포함한 모든 작업을 수행하는 SMP(symmetric multiprocessing)&lt;/strong&gt;를 사용한다. 이 모델의 장점은 성능을 크게 저하하지 않으면서 N개의 프로세스를 실행할 수 있다. &lt;u&gt;그러나 CPU가 독립적이기 때문에 하나는 유휴 상태이고 다른 하나는 과부하가 걸려서 비효율적일 수 있다.&lt;/u&gt; =&amp;gt; 스케줄링을 잘 해야 한다.&lt;/p&gt;

&lt;p&gt;MultiProcessor의 정의는 시간이 지남에 따라 발전해 왔으며 이제는 여러개의 컴퓨팅 코어가 단일 칩에 상주하는 &lt;strong&gt;다중 코어&lt;/strong&gt;시스템을 포함한다. Processor 내의 통신이 Processor 간의 통신보다 빠름으로 다중 코어 시스템은 단일 코어를 가지는 여러 Processor보다 효율적일 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;[중요] 컴퓨터 시스템 구성요소 정의&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt; - 명령을 실행하는 하드웨어&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Processor&lt;/strong&gt; - 하나 이상의 CPU를 포함하는 물리적 칩&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Core&lt;/strong&gt; - CPU의 기본 계산 단위&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;MultiCore&lt;/strong&gt; - 동일한 CPU가 여러 컴퓨팅 코어를 포함하는 구조&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;MultiProcessor&lt;/strong&gt; - 여러 프로세서를 포함하는 시스템&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Multi Processor에 작고 빠른 로컬 버스를 통해 액세스 되는 자체 로컬 메모리를 제공하고 모든 CPU가 &lt;strong&gt;공유 시스템 연결&lt;/strong&gt;로 연결되어 모든 CPU가 하나의 물리 주소 공간을 공유하는 &lt;strong&gt;NUMA(non-uniform memory access)&lt;/strong&gt;라고 하는 이 방법은 CPU가 로컬 메모리에 액세스 할 때 빠를 뿐만 아니라 시스템 상호 연결에 대한 경합도 없다는 장점이 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NUMA Multi Processor Architecture&lt;/strong&gt;은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-7.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하지만 NUMA 시스템의 잠재적 단점은 CPU가 시스템 상호 연결을 통해 원격 메모리에 액세스해야 할 때 지연 시간이 증가하여 성능 저하가 발생할 수 있다는 점이다.&lt;/p&gt;

&lt;p&gt;마지막으로 &lt;strong&gt;블레이드 서버&lt;/strong&gt;는 &lt;u&gt;다수의 Processor Board, I/O Board, Networking Board들이 하나의 chassis(샤시)안에 장착되는 형태&lt;/u&gt;를 가진다. 블레이드 서버와 전통적인 다중 처리기 시스템과의 차이점은 각 블레이드-처리기 보드는 독립적으로 부팅될 수 있고 자기 자신의 운영체제를 수행한다는 것이다.&lt;/p&gt;

&lt;h4 id=&quot;131-클러스터형-시스템-clustered-systems&quot;&gt;1.3.1 클러스터형 시스템 (Clustered Systems)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;클러스터 시스템은 둘 이상의 독자적 시스템 또는 노드들을 연결하여 구성한다는 점에서 Multiprocessor 시스템과 차이가 있다.&lt;/strong&gt; &lt;u&gt;각 노드는 통상 다중 코어 시스템이고, 그러한 시스템은 약결합(loosely coupled)이라고 간주된다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;클러스터링은 통상 &lt;strong&gt;높은 가용성(availability)&lt;/strong&gt;을 제공하기 위해 사용된다, &lt;strong&gt;즉, 클러스터 내 하나 이상의 컴퓨터 시스템이 고장 나더라도 서비스는 계속 제공된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;일반적으로 높은 가용성은 시스템에 중복 기능을 추가함으로써 얻어지고, 클러스터 소프트웨어 중 한 층이 클러스터 노드에서 실행된다. 각 노드는 하나 이상의 다른 노드(네트워크로 연결되어 있는)들을 감시한다. 만일 감시받던 노드가 고장 나면 감시하던 노드가 고장 난 노드의 저장장치에 대한 소유권을 넘겨받고, 그 노드에서 실행 중이던 응용프로그램을 다시 시작한다. 이로써 사용자와 응용 프로그램의 클라이언트는 잠깐의 서비스 중단만을 경험하게 된다.&lt;/p&gt;

&lt;p&gt;클러스터링은 &lt;strong&gt;비대칭형 클러스터링&lt;/strong&gt;과 &lt;strong&gt;대칭형 클러스터링&lt;/strong&gt;이 존재한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;비대칭형 클러스터링&lt;/strong&gt; : 다른 컴퓨터들이 응용 프로그램을 실행하는 동안 한 컴퓨터는 &lt;u&gt;긴급 대기(hot-standby) 모드&lt;/u&gt; 상태를 유지한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;대칭형 클러스터링&lt;/strong&gt; : 둘 이상의 호스트들이 응용 프로그램을 실행하고 서로를 감시한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;한 클러스터가 네트워크로 연결된 다수의 컴퓨터 시스템으로 구성되므로 클러스터는 &lt;strong&gt;고성능 계산환경&lt;/strong&gt;을 제공하도록 사용될 수 있다. 이러한 시스템은 클러스터 내의 모든 컴퓨터에서 Application을 병렬 수행할 수 있으므로 Singleprocessor나 SMP(symmetric multiprocessing) 시스템보다 훨씬 큰 계산 능력을 제공할 수 있다.&lt;/p&gt;

&lt;p&gt;다른 형태의 클러스터로 &lt;strong&gt;병렬 클러스터&lt;/strong&gt;와 &lt;strong&gt;WAN을 이용한 클러스터링&lt;/strong&gt;이 있다.&lt;/p&gt;

&lt;p&gt;아래의 그림은 &lt;strong&gt;스토리지 전용 네트워크(storage-area network, SAN)&lt;/strong&gt;를 이용하는 클러스터 시스템의 일반적인 구조를 설명하는 그림이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-8.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;HADOOP&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Hadoop은 단순하고 저렴한 하드웨어 구성요소를 포함하는 클러스터형 시스템에서 빅데이터의 분산 처리에 사용되는 공개 소프트웨어 프레임워크이다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;u&gt;Hadoop은 단일 시스템에서 수천 개의 컴퓨팅 노드를 포함하는 클러스터로 확장되도록 설계되었다.&lt;/u&gt;&lt;/p&gt;

  &lt;p&gt;작업은 클러스터의 노드에 할당되며 Hadoop은 노드 간 통신을 정렬하여 처리할 병렬 계산을 관리하고 결과를 통합한다. Hadoop은 또한 노드의 장애를 감지하고 관리하여 효율적이고 매우 안정적인 &lt;strong&gt;분산 컴퓨팅 서비스&lt;/strong&gt;를 제공한다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Hadoop은 다음 세 가지 구성요소로 구성된다.&lt;/strong&gt;&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;분산 컴퓨팅 노드에서 데이터와 파일을 관리하는 분산 파일 시스템.&lt;/li&gt;
    &lt;li&gt;YARN(“Yet Another Resource Negotiator”) 프레임워크는 클러스터 내의 자원을 관리하고 클러스터의 노드에 작업을 스케줄 한다.&lt;/li&gt;
    &lt;li&gt;MapReducd 시스템은 클러스터의 노드에서 데이터를 병렬 처리할 수 있게 한다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;14-운영체제의-작동-operating-system-operations&quot;&gt;1.4 운영체제의 작동 (Operating-System Operations)&lt;/h3&gt;

&lt;p&gt;컴퓨터의 전원을 켜거나 재부팅 할 때와 같이 컴퓨터를 실행하려면 초기 프로그램을 실행해야 한다. 이 초기 프로그램(부트스트랩 프로그램)은 단순한 형태를 띠는 경향이 있고, 일반적으로 컴퓨터 하드웨어 내에 펌웨어로 저장된다.&lt;/p&gt;

&lt;p&gt;부트스트랩 프로그램은 운영체제를 적재하는 방법과 해당 시스템 실행을 시작하는 방법을 알아야 하고, &lt;strong&gt;이 목표를 달성하려면 부트스트랩 프로그램이 운영체제 커널을 찾아 메모리에 적재해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;커널이 적재되어 실행되면 시스템과 사용자에게 서비스를 제공할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;일부 서비스는 커널이 실행되는 전체 시간 동안 실행되는 &lt;strong&gt;시스템 데몬&lt;/strong&gt;이 되기 위해 부팅할 때 메모리에 적재되는 시스템 프로그램에 의해 커널 외부에서 제공된다.&lt;/p&gt;

&lt;p&gt;시스템이 완전히 부팅되면 어떤 이벤트가 발생할 때까지 기다린다. 이벤트는 거의 &lt;strong&gt;인터럽트&lt;/strong&gt;를 발생시켜 신호를 보내고, 이 인터럽트의 종류로는 &lt;u&gt;하드웨어 인터럽트, 트랩, 오류, 소프트웨어 인터럽트&lt;/u&gt;등으로 구분될 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;141-다중-프로그래밍과-다중-태스킹-multiprogramming-and-multitasking&quot;&gt;1.4.1 다중 프로그래밍과 다중 태스킹 (multiprogramming and multitasking)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;다중 프로그래밍(multiprogramming)은 CPU가 항상 한 이상의 프로그램을 실행할 수 있도록하여 CPU 이용률을 높이고 사용자의 만족도를 높이는 프로그래밍.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;다중 프로그래밍 시스템에서 실행 중인 프로그램을 &lt;strong&gt;프로세스(process)&lt;/strong&gt;라고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;운영체제는 다음 그림과 같이 여러 프로세스를 동시에 메모리에 유지한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-9.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;운영체제는 이러한 프로세스 중 하나를 선택하여 실행하기 때문에 특정 프로세스가 다른 프로세스의 작업이 완료되기를 기다려야 할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;다중 태스킹(multitasking)은 다중 프로그래밍의 논리적 확장이다. multitasking 시스템에서 CPU는 여러 프로세스를 전환하며 프로세스를 실행하지만 전환이 자주 발생하여 사용자에게 빠른 응답 시간을 제공하게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;여러 프로세스를 병행하게 실행하려면 프로세스 스케줄링, 디스크 저장장치 및 메모리 관리를 포함하여 운영체제의 모든 단계에서 서로 영향을 미치는 기능이 제한되어야 한다.&lt;/p&gt;

&lt;h4 id=&quot;142-이중-모드와-다중모드-운용-dualmode-and-multimode-operation&quot;&gt;1.4.2 이중-모드와 다중모드 운용 (Dualmode and Multimode Operation)&lt;/h4&gt;

&lt;p&gt;운영체제는 적어도 두 개의 독립된 연산 모드, 즉 &lt;strong&gt;사용자 모드&lt;/strong&gt;와 &lt;strong&gt;커널 모드&lt;/strong&gt;를 필요로 한다. 이 모드 비트(mode bit)는 하나의 비트가 현재의 모드를 나타내기 위해 컴퓨터의 하드웨어에 추가되었다.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;모드 비트의 사용으로 운영체제를 위하여 실행되는 작업과 사용자를 위해 실행되는 작업을 구분할 수 있게 되었다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;즉, 사용자 Application이 운영체제로부터 서비스를 요청하면(시스템 콜) 이 요청을 수행하기 위해서는 사용자 모드에서 커널 모드로 전환해야 한다. 이 그림은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-10.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;위와 같은 이중 모드는 잘못된 사용자로부터 운영체제를, 그리고 잘못된 사용자 서로를 보호하는 방법을 제공한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이중 모드 이외의 모드는 Intel Processor에 4개의 모드가 존재하고, ARMv8 시스템에는 7가지의 모드가 있다.&lt;/p&gt;

&lt;p&gt;가상화를 지원하는 CPU는 종종 &lt;strong&gt;VMM(virtual Machine Manager)&lt;/strong&gt;이 시스템을 제어하는 시점을 표시하기 위한 별도의 모드를 가진다. 이 모드에서 VMM은 사용자 프로세스보다 많은 권한을 가지지만 커널보다는 적은 권한을 가진다.&lt;/p&gt;

&lt;p&gt;Microsoft Windows, Unix, Linux와 같은 대부분의 최신 운영체제는 이중 모드 기능을 활용하고 운영체제를 보다 강력하게 보호한다.&lt;/p&gt;

&lt;h4 id=&quot;143-타이머-timer&quot;&gt;1.4.3 타이머 (Timer)&lt;/h4&gt;

&lt;p&gt;우리는 사용자 프로그램이 무한루프(infinite loop)에 빠지거나 시스템 서비스 호출에 실패하여, 제어가 운영체제로 복귀하지 않는 경우가 없도록 반드시 방지해야 한다. 해당 목적을 달성하기 위해 우리는 &lt;strong&gt;타이머(Timer)&lt;/strong&gt;를 사용할 수 있다. &lt;u&gt;타이머는 지정된 시간 후 컴퓨터를 인터럽트 하도록 설정할 수 있다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;이 시간은 고정 혹은 가변 일 수 있으며, 가변 타이머는 일반적으로 고정률의 클록(fixed-rate clock)과 계수기로 구현된다.&lt;/p&gt;

&lt;p&gt;사용자에게 제어를 양도하기 전에, 운영체제는 타이머가 인터럽트를 할 수 잇도록 설정되었는지를 확인하고. 타이머의 값을 변경하는 명령은 명백히 특권 명령이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;15-자원-관리-resource-management&quot;&gt;1.5 자원 관리 (Resource Management)&lt;/h3&gt;

&lt;p&gt;운영체제는 &lt;strong&gt;자원 관리자&lt;/strong&gt;이다. &lt;u&gt;시스템의 CPU, 메모리 공간, 파일-저장 공간, I/O 장치&lt;/u&gt;는 운영체제가 관리해야 하는 자원에 속한다.&lt;/p&gt;

&lt;h4 id=&quot;151-프로세스-관리-process-management&quot;&gt;1.5.1 프로세스 관리 (Process Management)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;프로세스는 자기 일을 수행하기 위해 CPU 시간, 메모리, 파일, 그리고 입출력 장치를 포함한 여러 가지 자원을 필요로 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;프로그램 그 자체는 프로세스가 아니며 즉, 하나의 프로그램은 디스크에 저장된 파일의 내용과 같이 수동적(passive) 개체지만 프로세스는 다음 수행할 명령을 지정하는 프로그램 카운터(program counter)를 가진 능동적(active)인 개체이다.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;시스템은 프로세스의 집합으로 구성되는데, 프로세스 중 일부는 운영체제 프로세스들(시스템 코드를 수행하는 프로세스들)이며, 나머지는 사용자 프로세스들(사용자 코드를 수행하는 프로세스들)이다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;운영체제는 프로세스 관리와 연관해 다음과 같은 활동에 대해 책임을 진다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용자 프로세스와 시스템 프로세스의 생성과 제거&lt;/li&gt;
  &lt;li&gt;CPU에 프로세스와 스레드 스케줄하기&lt;/li&gt;
  &lt;li&gt;프로세스의 일시 중지와 재수행&lt;/li&gt;
  &lt;li&gt;프로세스 동기화를 위한 기법 제공&lt;/li&gt;
  &lt;li&gt;프로세스 통신을 위한 기법 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;152-메모리-관리-memory-management&quot;&gt;1.5.2 메모리 관리 (Memory Management)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;메인 메모리는 CPU와 입출력 장치에 의하여 공유되는, 빠른 접근이 가능한 데이터 저장소이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;프로그램이 수행되기 위해서는 반드시 절대 주소로 매핑(mapping)되고 메모리에 적재되어야 한다. CPU 이용률과 사용자에 대한 컴퓨터의 응답 속도를 개선하기 위해, 우리는 메모리에 여러 개의 프로그램을 유지해야 하며 이를 위해서 &lt;strong&gt;메모리 관리 기법&lt;/strong&gt;이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;운영체제는 메모리 관리와 관련하여 다음과 같은 일을 담당해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메모리의 어느 부분이 현재 사용되고 있으며 어느 프로세스에 의해 사용되고 있는지를 추적해야 한다.&lt;/li&gt;
  &lt;li&gt;필요에 따라 메모리 공간을 할당하고 회수해야 한다.&lt;/li&gt;
  &lt;li&gt;어떤 프로세스(또는 그 일부)들을 메모리에 적재하고 제거할 것인가를 결정해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;153-파일-시스템-관리-file-system-management&quot;&gt;1.5.3 파일 시스템 관리 (File-System Management)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;운영체제는 저장장치의 물리적 특성을 추상화하여 논리적인 저장 단위인 파일을 정의한다.&lt;/strong&gt; 운영체제는 파일을 물리적 매체로 매핑하며, 저장장치를 통해 이들 파일에 접근한다.&lt;/p&gt;

&lt;p&gt;파일은 파일 생성자에 의해 정의된 관련 정보의 집합체이다. 일반적으로 파일은 프로그램(소스와 목적 프로그램 형태)과 데이터를 나타낸다.&lt;/p&gt;

&lt;p&gt;운영체제는 대량 저장 매체와 그것을 제어하는 장치를 관리함으로써 파일의 추상적인 개념을 구현한다. 또한, 파일은 사용하기 쉽도록 통상 디렉터리들로 구성된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;운영체제는 파일 관리를 위하여 다음과 같은 일을 담당한다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;파일의 생성 및 제거&lt;/li&gt;
  &lt;li&gt;디렉터리 생성 및 제거&lt;/li&gt;
  &lt;li&gt;파일과 디렉터리를 조작하기 위한 프리미티브의 제공&lt;/li&gt;
  &lt;li&gt;파일을 보조저장장치로 매핑&lt;/li&gt;
  &lt;li&gt;안정적인(비휘발성) 저장 매체에 파일을 백업&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;154-대용량-저장장치-관리-mass-storage-management&quot;&gt;1.5.4 대용량 저장장치 관리 (Mass Storage Management)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;컴퓨터 시스템은 메인 메모리를 백업하기 위해 보조저장장치(HDD, NVM, …)를 제공해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;운영체제는 보조저장장치 관리와 관련하여 다음 활동을 책임진다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;마운팅과 언마운팅&lt;/li&gt;
  &lt;li&gt;사용 가능 공간(free-space)의 관리&lt;/li&gt;
  &lt;li&gt;저장장소 할당&lt;/li&gt;
  &lt;li&gt;디스크 스케줄링&lt;/li&gt;
  &lt;li&gt;저장장치 분할&lt;/li&gt;
  &lt;li&gt;보호&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;마운팅(Mounting) : 해당 파일 시스템이 디렉토리(마운트 지점)에 연결되어 시스템에서 사용될 수 있게 만드는 작업&lt;/p&gt;

  &lt;p&gt;언마운팅(Unmounting) : 해당 파일 시스템의 마운트 지점 연결을 끊어 시스템에서 사용할 수 없게 하는 작업.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;155-캐시-관리-cache-management&quot;&gt;1.5.5 캐시 관리 (Cache Management)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;캐시는 컴퓨터 과학에서 데이터나 값을 미리 복사해 놓는 임시장소를 가리킨다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;캐싱은 컴퓨터 시스템의 중요한 원리이다. 정보는 통산 어떤 저장장치에 보관된다. 정보가 사용됨에 따라, 더 빠른 장치인 캐시에 일시적으로 복사된다. 그러므로 우리가 특정 정보가 필요할 경우, 우리는 먼저 캐시에 그 정보가 있는지를 조사해 보아야 한다. 만약 캐시에 있으면 우리는 그 정보를 캐시로부터 직접 사용하지만, 만일 캐시에 없다면 메인 메모리 시스템으로부터 그 정보를 가져와서 사용해야 하며, 이 때 이 정보가 다음에 곧 다시 사용될 확률이 높다는 가정하에 캐시에 넣는다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;캐시 크기가 제한되어 있으므로 캐시 관리는 중요한 설계 문제이다. 캐시 크기와 교체 정책을 신중하게 선택하면 성능이 크게 향상될 수 있다.&lt;/p&gt;

&lt;p&gt;한 캐시에 있는 A 값이 갱신될 경우 A가 존재하는 모든 캐시에 즉각적으로 반영되어야 하는 &lt;strong&gt;캐시 일관성 문제&lt;/strong&gt;도 고려 대상이다.&lt;/p&gt;

&lt;h4 id=&quot;156-입출력-시스템-관리-io-systems-management&quot;&gt;1.5.6 입출력 시스템 관리 (I/O Systems Management)&lt;/h4&gt;

&lt;p&gt;운영체제 목적 중의 하나는 사용자에게 특정 하드웨어 장치의 특성을 숨기는 것이다. 단지 장치 드라이버만이 자신에게 지정된 특정 장치의 특성을 알고 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;입출력 시스템은 다음과 같이 구성되어 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;버퍼링, 캐싱, 스풀링을 포함한 메모리 관리 구성요소&lt;/li&gt;
  &lt;li&gt;일반적인 장치 드라이버 인터페이스&lt;/li&gt;
  &lt;li&gt;특정 하드웨어 장치들을 위한 드라이버&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;16-보안과-보호-security-and-protection&quot;&gt;1.6 보안과 보호 (Security and Protection)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;보호(protection)란 컴퓨터 시스템이 정의한 자원에 대해 프로그램, 프로세스 또는 사용자들의 접근을 제어하는 기법이다.&lt;/strong&gt; 이 기법은 시행될 제어에 대한 명세와 이들을 강제 시행하는 방법을 규정하는 수단을 반드시 제공해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;보안 기능은 외부 또는 내부의 공격을 방어하는 기능이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;시스템의 모든 사용자를 구분하기 위해 &lt;u&gt; 사용자 식별자, 그룹 식별자, 유효 사용자 식별자&lt;/u&gt;가 존재한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;17-가상화-virtualization&quot;&gt;1.7 가상화 (Virtualization)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;가상화는 단일 컴퓨터(CPU, 메모리, 디스크 드라이브, 네트워크 인터페이스 카드 등)의 하드웨어를 &lt;u&gt;여러 가지 실행 환경으로 추상화&lt;/u&gt;하여 개별 환경이 자신만의 컴퓨터에서 실행되고 있다는 환상을 만들 수 있는 기술이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;가상화는 운영체제가 다른 운영체제 내에서 하나의 Application처럼 수행될 수 있게 한다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;넓게 말하면 가상화 소프트웨어는 에뮬레이션을 포함하는 클래스의 구성원이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어로 컴퓨터 하드웨어 시뮬레이션하는 &lt;strong&gt;에뮬레이션&lt;/strong&gt;은 일반적으로 소스 CPU 유형이 대상 CPU 유형과 다른 경우에 사용된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;가상화에서는 특정 CPU를 위해 컴파일된 운영체제가 동일 CPU용의 다른 운영체제 내에서 수행된다.&lt;/p&gt;

&lt;p&gt;아래 그림은 하나의 운영체제와 3개의 가상 머신을 실행시키는 컴퓨터를 나타내는 그림이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-11.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다수운영체제를 위해 소프트웨어를 작성하는 회사는 가상화를 이용하여 하나의 물리 서버를 이용하여 이들 모든 운영체제를 수행하여, 개발, 테스팅, 디버깅을 수행할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;18-분산-시스템-distributed-systems&quot;&gt;1.8 분산 시스템 (Distributed Systems)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;분산 시스템은 물리적으로 떨어져 있는 이기종 컴퓨터들의 집합이다.&lt;/strong&gt; 분산 시스템의 컴퓨터들은 사용자가 시스템 내의 다양한 자원들을 접근할 수 있도록 &lt;strong&gt;네트워크로 연결&lt;/strong&gt;되어 있다.&lt;/p&gt;

&lt;p&gt;네트워크는 가장 단순하게 보면 두 개 이상 시스템 간의 통신 경로이다. &lt;strong&gt;분산 시스템의 많은 기능은 네트워킹에 의존하고 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TCP/IP가 가장 일반적인 네트워크 프로토콜로 인터넷의 기본 구조를 제공하며, 대부분의 운영체제는 TCP/IP를 지원한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;네트워크는 노드 간의 거리에 의해 유형이 결정된다. 유형은 근거리 통신망(LAN), 광역 통신망(WAN), 도시권 통신망(MAN), 단거리 통신망(PAN)으로 분류할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;19-커널-자료구조-kernel-data-structures&quot;&gt;1.9 커널 자료구조 (Kernel Data Structures)&lt;/h3&gt;

&lt;p&gt;운영체제에서 광범위하게 사용되는 다수의 기본 자료구조에 대해서 간략히 설명하도록 하겠다.&lt;/p&gt;

&lt;h4 id=&quot;191-리스트-스택-및-큐-lists-stacks-queues&quot;&gt;1.9.1 리스트, 스택 및 큐 (Lists, Stacks, Queues)&lt;/h4&gt;

&lt;p&gt;배열의 각 항은 직접 접근할 수 있으나 리스트의 항들은 특정 순서로 접근해야 한다. &lt;strong&gt;즉 리스트는 데이터 값들의 집단을 하나의 시퀀스로 표현한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 구조를 구현하는 가장 일반적인 방법이 &lt;strong&gt;연결 리스트(Linked List)&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;Linked List는 3개로 분류할 수 있으며 이는 &lt;strong&gt;Singly Linked List, Doubly Linked List, Circularly Linked List&lt;/strong&gt; 다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Singly Linkend List에서 각 Element는 후속 Element를 가르킨다. 그림은 다음과 같다.
&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-12.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Doubly Linked List에서 한 Element는 자신의 앞 항이나 뒷 항을 가리킨다. 그림은 다음과 같다.
&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-13.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Doubly Linked List에서 마지막 Element는 첫 Element를 가리킨다. 그림은 다음과 같다.
&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-14.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Linked List의 장점&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;가변 수의 항들을 수용하며 항의 삭제와 삽입이 쉽다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Linked List의 단점&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;길이가 n인 리스트에서 특정 항을 Fetch할 때 성능이 선형, 즉 &lt;strong&gt;O(n)&lt;/strong&gt;이라는 점이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;스택(Stack)은 순차적 순서를 가진 자료구조로 항을 넣거나 꺼내는데 후입선출(last in first out, LIFO)를 사용한다.&lt;/strong&gt; 스택에 항을 삽입하거나 인출하는 일은 각각 &lt;strong&gt;푸쉬(push)&lt;/strong&gt; 또는 &lt;strong&gt;팝(pop)&lt;/strong&gt;이라 부른다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;큐(Queue)는 순차 순서의 자료구조로 선입선출(first in first out, FIFO)을 사용한다.&lt;/strong&gt; 각 항은 삽입된 순서대로 큐로부터 제거된다.&lt;/p&gt;

&lt;h4 id=&quot;192-트리-trees&quot;&gt;1.9.2 트리 (Trees)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;트리(Tree)는 데이터의 서열을 표시하는데 사용 가능한 자료구조이다.&lt;/strong&gt; 트리 구조에서 데이터 값들은 &lt;strong&gt;부모-자식 관계&lt;/strong&gt;로 연결된다.&lt;/p&gt;

&lt;p&gt;트리의 종류 중 일부는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일반 트리(General Tree) : 부모 노드는 임의의 수의 자식 노드를 가질 수 있다.&lt;/li&gt;
  &lt;li&gt;이진 트리(Binary Tree) : 부모 노드는 최대 두 개의 자식 노드를 가질 수 있다.&lt;/li&gt;
  &lt;li&gt;이진 탐색 트리(Binary Search Tree) : 이진 트리에 추가적인 조건으로 &lt;u&gt;좌측 자식 노드 &amp;lt;= 우측 자식 노드&lt;/u&gt;의 순서를 요구한다.&lt;/li&gt;
  &lt;li&gt;균형 이진 탐색 트리(Balanced Binary Search Tree) : &lt;u&gt;좌측과 우측 자식 트리간에 균형있는 높이&lt;/u&gt;를 가지도록 하는 조건이 생긴 이진 탐색 트리&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;193-해시-함수와-맵-hash-functions-and-maps&quot;&gt;1.9.3 해시 함수와 맵 (Hash Functions and Maps)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;해시 함수(Hash Function)는 데이터를 입력으로 받아 이 데이터에 산술 연산을 수행하여 하나의 수를 반환한다.&lt;/strong&gt; 이 수는 그 데이터를 인출하기 위해 &lt;u&gt;테이블의 인덱스&lt;/u&gt;로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;해시 함수를 사용하여 데이터를 인출할 경우 걸리는 시간이 &lt;strong&gt;O(1)&lt;/strong&gt;만큼 좋을 수도 있으며 이는 상세 구현에 좌우된다.&lt;/p&gt;

&lt;p&gt;해시 함수의 이슈 중 하나는 두 개의 서로 다른 입력이 하나의 출력 값을 가질 수 있다는 것이다. 이를 우리는 &lt;strong&gt;해시 충돌(hash collision)&lt;/strong&gt;이라고 한다.&lt;/p&gt;

&lt;p&gt;해시 함수의 한 용도는 &lt;strong&gt;해시 맵(Hash Map)&lt;/strong&gt;을 구현하는 일이다. 해시 맵은 해시 함수를 사용하여 [키:값]을 매핑시킨다.&lt;/p&gt;

&lt;p&gt;아래의 그림은 해시 맵의 예시 이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-15.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;194-비트맵-bitmaps&quot;&gt;1.9.4 비트맵 (Bitmaps)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;비트맵(Bitmaps)은 n개의 항의 상태를 나타내는 데 사용 가능한 n개의 이진 비트의 스트링이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;비트맵은 대량의 자원의 가용성을 표시할 때 일반적으로 사용된다. (ex. 디스크 드라이브)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ex) 001011101&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;110-계산-환경-computing-environments&quot;&gt;1.10 계산 환경 (Computing Environments)&lt;/h3&gt;

&lt;p&gt;다양한 계산 환경에서 운영체제가 어떻게 사용되는지 살펴보겠다.&lt;/p&gt;

&lt;h4 id=&quot;1102-모바일-컴퓨팅-mobile-computing&quot;&gt;1.10.2 모바일 컴퓨팅 (Mobile Computing)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;모바일 컴퓨팅은 휴대용 스마트폰과 태블릿 컴퓨터의 컴퓨팅 환경을 말한다.&lt;/strong&gt; 이들 장치들은 이동 가능하고 가볍다는 구별되는 물리적 특징을 공유한다.&lt;/p&gt;

&lt;p&gt;온라인 서비스에 접근을 허용하기 위해 휴대장치는 전형적으로 IEEE 표준 802.11 무선 또는 휴대 전화 데이터망을 사용한다.&lt;/p&gt;

&lt;p&gt;현재 휴대 컴퓨팅에서 두 개의 지배적인 운영체제는 &lt;strong&gt;Apple iOS&lt;/strong&gt;와 &lt;strong&gt;Google Android&lt;/strong&gt;이다.&lt;/p&gt;

&lt;h4 id=&quot;1103-클라이언트-서버-컴퓨팅-client-server-computing&quot;&gt;1.10.3 클라이언트 서버 컴퓨팅 (Client-Server Computing)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;현대 네트워크 구조는 서버 시스템이 클라이언트 시스템이 생성한 요청을 만족시키는 배치를 특징으로 한다.&lt;/strong&gt; 클라이언트-서버 시스템이라고도 불리는 이 형태의 특수 분산 시스템은 아래의 그림과 같은 일반적인 구조를 갖는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-16.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;서버 시스템은 대체적으로 계산 서버와 파일 서버로 분류될 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;계산-서버 시스템&lt;/strong&gt;은 클라이언트가 어떤 작업을 요청할 인터페이스를 제공한다. 그 결과로 서버는 그 작업을 수행하고 결과를 클라이언트에게 돌려보낸다. (ex. 데이터베이스 서버)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;파일-서버 시스템&lt;/strong&gt;은 클라이언트가 파일을 생성, 갱신, 읽기 및 제거할 수 있는 파일 시스템 인터페이스를 제공한다. (ex. 웹 서버)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1104-피어-간-계산-peer-to-peer-computing&quot;&gt;1.10.4 피어 간 계산 (Peer to Peer Computing)&lt;/h4&gt;

&lt;p&gt;이 모델에서는 클라이언트와 서버가 서로 구별되지 않고, &lt;strong&gt;시스템상의 모든 노드가 피어로 간주되고 각 피어는 서비스를 요청하느냐 제공하느냐에 따라 클라이언트 및 서버로 동작한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;클라이언트 서버 시스템에서는 서버가 병목으로 작용하지만, 피어 간 시스템에서는 서비스가 네트워크에 분산된 여러 노드에 의해 제공될 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ex) Skype가 제공하는 IP상 음성 서비스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;1105-클라우드-컴퓨팅-cloud-computing&quot;&gt;1.10.5 클라우드 컴퓨팅 (Cloud Computing)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;클라우드 컴퓨팅은 계산, 저장장치는 물론 Application조차도 네트워크를 통한 서비스로 제공하는 Computing Type이다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ex) Amazon의 Elastic Compute Cloud(EC2)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;클라우드 컴퓨팅의 유형 중 일부 소개&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;공중 클라우드 - 서비스를 위해 지불 가능한 사람은 누구나 인터넷을 통해 사용 가능한 클라우드&lt;/li&gt;
  &lt;li&gt;사유 클라우드 - 한 회사가 사용하기 위해 운영하는 클라우드&lt;/li&gt;
  &lt;li&gt;혼합형 클라우드 - 공공과 사유 부분을 모두 포함하는 크랄우드&lt;/li&gt;
  &lt;li&gt;소프트웨어 서비스(software as a service, SaaS) - 인터넷을 통해 사용 가능한 하나 이상의 Application
    &lt;ul&gt;
      &lt;li&gt;
        &lt;blockquote&gt;
          &lt;p&gt;ex) Word Process, Spread Sheets&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;플랫폼 서비스(platform as a service, PaaS) - 인터넷을 통해 사용하도록 Application에 맞게 준비된 소프트웨어 스택
    &lt;ul&gt;
      &lt;li&gt;
        &lt;blockquote&gt;
          &lt;p&gt;ex) Database Server, Jenkins Server, …&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;하부구조 서비스(infrastructure as a service, IaaS) - 인터넷을 통해 사용가능한 서버나 저장장치
    &lt;ul&gt;
      &lt;li&gt;
        &lt;blockquote&gt;
          &lt;p&gt;ex) 생산 데이터의 백업 복사본을 만들기 위한 저장장치&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;클라우드 컴퓨팅 환경은 다수 유형의 조합을 제공하기 때문에 이들 클라우드 컴퓨팅의 유형들은 서로 독립적이 아니다.&lt;/p&gt;

&lt;p&gt;다음의 그림은 IaaS를 제공하는 Public Cloud를 보여준다. 클라우드 서비스와 클라우드 사용자 인터페이스가 모두 방화벽에 의해 보호되는 것에 유의하자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-17.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1106-실시간-내장형-시스템-real-time-embedded-systems&quot;&gt;1.10.6 실시간 내장형 시스템 (Real-Time Embedded Systems)&lt;/h4&gt;

&lt;p&gt;내장형(Embedded) 시스템은 현재 가장 유행하는 컴퓨터의 형태이다. 이 장치들은 아주 특정한 작업만을 수행하는 경향이 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;내장형 시스템은 거의 언제나 실시간 운영체제를 수행한다.&lt;/u&gt; 실시간 시스템은 Processor의 작동이나 데이터의 흐름에 엄격한 시간 제약이 있을 때 사용된다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;111-무료-및-공개-소스-운영체제-free-and-open-source-operating-systems&quot;&gt;1.11 무료 및 공개 소스 운영체제 (Free and Open Source Operating Systems)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;UNIX&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;유닉스(영어: Unix)는 교육 및 연구 기관에서 즐겨 사용되는 범용 다중 사용자 방식의 시분할 운영 체제이다. 1970년대 초반 벨 연구소 직원인 켄 톰슨, 데니스  리치 등이 처음 개발하였다. 오늘날의 유닉스 시스템은 여러 회사들과 비영리 단체들이 이 커널로 활용하여 다양한 운영체제를 개발하고 있다.&lt;/p&gt;

  &lt;p&gt;유닉스는 처음부터 다양한 시스템 사이에서 서로 이식할 수 있고, 멀티 태스킹과 다중 사용자를 지원하도록 설계되었다. 유닉스 시스템은 다음과 같은 개념을 가지고 있다.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;일반 텍스트 파일, 명령행 인터프리터, 계층적인 파일 시스템, 장치 및 특정한 형식의 프로세스 간 통신을 파일로 취급 등.&lt;/li&gt;
    &lt;li&gt;소프트웨어 공학 측면에서, 유닉스는 C의 사용과 유닉스 철학이라는 부분이 특징이다.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;유닉스(UNIX) 상표권은 오픈 그룹이 갖고 있으며, 유닉스 소스 코드에 대한 저작권은 노벨이 소유하고 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;1112-무료-운영체제-free-operating-systems&quot;&gt;1.11.2 무료 운영체제 (Free Operating Systems)&lt;/h4&gt;

&lt;p&gt;소프트웨어 사용 및 재배포를 제한하려는 움직임에 대응하기 위해 1984년 Richard Stallman은 GNU라는 무료 UNIX 호환 운영체제(“GNU’s Not Unix!”의 약어)를 개발하기 시작하였다.&lt;/p&gt;

&lt;p&gt;자유 소프트웨어 운동은 사용자에게 다음의 4가지 자유를 보장시키기 위해 시행되었다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;자유롭게 소프트웨어를 실행시킬 권리&lt;/li&gt;
  &lt;li&gt;소스 코드를 분석하고 수정할 권리&lt;/li&gt;
  &lt;li&gt;코드 수정 없이 배포하거나 판매할 권리&lt;/li&gt;
  &lt;li&gt;코드를 수정하여 배포하거나 판매할 권리&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;1113-gnulinux&quot;&gt;1.11.3 GNU/Linux&lt;/h4&gt;

&lt;p&gt;GNU/Linux 운영체제(커널만 말할 때는 Linux라고 하지만 GNU 도구를 포함한 전체 운영체제는 GNU/Linux라고 부름)는 시스템의 수백 가지의 고유한 배포판 또는 사용자 맞춤 빌드를 생성하였다.&lt;/p&gt;

&lt;p&gt;주요 배포판에는 Red Hat, SUSE, Fedora, Debian, Slackware, Ubuntu가 있다.&lt;/p&gt;

&lt;h4 id=&quot;1114-bsd-unix&quot;&gt;1.11.4 BSD Unix&lt;/h4&gt;

&lt;p&gt;BSD UNIX는 Linux보다 오래되고 복잡한 역사를 가지고 있다. 1978년에 AT&amp;amp;T의 파생물로 출발하였다.&lt;/p&gt;

&lt;p&gt;macOS의 핵심 커널 구성요소인 Darwin은 BSD UNIX에 기반을 두고 잇으며 역시 공개 소스화 되어 있다.&lt;/p&gt;

&lt;h4 id=&quot;1115-solaris&quot;&gt;1.11.5 Solaris&lt;/h4&gt;

&lt;p&gt;Solaris는 Sun Microsystems사의 Unix 기반 상용 운영체제이다.&lt;/p&gt;

</description>
        <pubDate>Fri, 21 Aug 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/computer-science(cs)/2020/08/21/What-is-The-Operating-System.html</link>
        <guid isPermaLink="true">http://localhost:4000/computer-science(cs)/2020/08/21/What-is-The-Operating-System.html</guid>
        
        <category>Operating-System</category>
        
        <category>OS</category>
        
        <category>CS</category>
        
        <category>Computer</category>
        
        
        <category>Computer-Science(CS)</category>
        
      </item>
    
      <item>
        <title>Spring Security를 적용한 Spring MVC Controller 단위 테스트 </title>
        <description>&lt;p&gt;이번 포스팅에서는 &lt;strong&gt;Spring Security를 적용한 Spring MVC Controller 단위 테스트&lt;/strong&gt;에 대해서 알아보도록 하겠다!!&lt;/p&gt;

&lt;p&gt;Controller를 테스트하는데 사용한 테스트 프레임워크는 &lt;strong&gt;JUnit 5&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;p&gt;프로젝트 빌드 툴로 maven을 사용하고 있으며, 테스트를 위해서 pom.xml에 추가할 의존성은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.security&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-security-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 테스트와 관련된 프로젝트 의존성을 pom.xml에 추가 했으면 이제 Spring Security를 적용한 Spring MVC Controller 단위 테스트에 대해서 알아보자!!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;controller&quot;&gt;Controller&lt;/h2&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MemberController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DirectoryService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;directoryService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;memberService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;objectMapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root-directory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ApiImplicitParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Access_Token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRootDirectories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@AuthenticationPrincipal&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonProcessingException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findMemberByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DirectoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryDtoList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDirectoryDTOs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryDtoList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NO_CONTENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeValueAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryDtoList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;내가 테스트 할 Controller의 Handler Method는 &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /root-directory&lt;/code&gt;를 처리하는 메소드이다.&lt;/p&gt;

&lt;p&gt;이 Handler Method를 테스트하기 위해서 생기는 Test Cases는 2개로 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Member의 Root Directory가 존재하는 Case Test&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Member의 Root Directory가 존재하지 않는 Case Test&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;여기서 Root Directory란 Member에 속해있는 가장 상위의 Directory를 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Mock 객체를 사용해서 Controller 단위 테스트를 진행할 것이기 때문에, 여기까지만 Controller를 설명하도록 하겠다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;controller-test&quot;&gt;Controller Test&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Controller Unit Test 코드는 다음과 같다.&lt;/p&gt;

&lt;p&gt;(Test 코드 작성시 다양한 라이브러리의 API를 사용하는데 다양한 클래스에 동일한 이름을 가진 Method가 많아 독자가 더 쉽게 해당 Static Method를 식별할 수 있도록 일부러 import Statement는 지우지 않았다)&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.fasterxml.jackson.databind.ObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;econo.webper.server.directory.DirectoryCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;econo.webper.server.directory.DirectoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;econo.webper.server.directory.dto.DirectoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.extension.ExtendWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.test.mock.mockito.MockBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.test.context.support.WithUserDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.test.context.ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.test.context.junit.jupiter.SpringExtension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.test.context.web.WebAppConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.test.web.servlet.MockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MockMvcRequestBuilders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MockMvcResultHandlers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MockMvcResultMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@ExtendWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringExtension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@WebAppConfiguration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AutoConfigureMockMvc&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberControllerTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EMAIL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a@a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NAME&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PASSWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DIRECTORY_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DIRECTORY_TITLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PARENT_DIRECTORY_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@MockBean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@MockBean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;멤버에 Root Directory가 존재하는 경우 테스트&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@WithUserDetails&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRootDirectoryTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;DirectoryDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryDTO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DIRECTORY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DIRECTORY_TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BLOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PARENT_DIRECTORY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findMemberByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDirectoryDTOs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root-directory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DIRECTORY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DIRECTORY_TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].category&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DirectoryCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BLOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].parentDirectoryId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PARENT_DIRECTORY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;멤버에 Root Directory가 존재하지 않는 경우 테스트&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@WithUserDetails&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNonRootDirectoryTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DirectoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonElementList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findMemberByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDirectoryDTOs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonElementList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root-directory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNoContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;controllertest-클래스에-붙은-애노테이션-설명&quot;&gt;ControllerTest 클래스에 붙은 애노테이션 설명&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;@ExtendWith(SpringExtension.class)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Spring TestContext Framework를 JUnit5의 jupiter programming model에 통합해주는 애노테이션이다.&lt;/li&gt;
      &lt;li&gt;RestController와 같은 Spring Bean을 테스트하기 위해서는 꼭 필요한 애노테이션이다.&lt;/li&gt;
      &lt;li&gt;위의 애노테이션 이외에도 SpringExtension을 JUnit에 적용하려면 &lt;strong&gt;@SpringJUnitConfig&lt;/strong&gt; 또는 &lt;strong&gt;@SpringJUnitWebConfig&lt;/strong&gt; 와 같은 애노테이션을 붙여주면 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@ContextConfiguration&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;테스트를 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationContext&lt;/code&gt;를 설정하고 로드하는 방법을 정의하는데 사용되는 메타데이터를 정의한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;@ContextConfiguration&lt;/strong&gt;은 Context를 로드하는데 사용되는 Application Context Resource &lt;code class=&quot;highlighter-rouge&quot;&gt;locations&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;classes&lt;/code&gt; component를 선언한다.
        &lt;ul&gt;
          &lt;li&gt;ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;@ContextConfiguration(classes = {MemberController.class, ObjectMapper.class})&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;@ContextConfiguration(locations=&quot;applicationContext.xml&quot;)&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;@ContextConfiguration&lt;/strong&gt;은 ContextLoader 전략도 선언할 수 있습니다.
        &lt;ul&gt;
          &lt;li&gt;ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;@ContextConfiguration(locations = &quot;/test-context.xml&quot;, loader = CustomContextLoader.class)&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@WebAppConfiguration&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;테스트를 위해 로드된 &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationContext&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;WebApplicationContext&lt;/code&gt;가 되어야 함을 선언하는 애노테이션 입니다.
        &lt;ul&gt;
          &lt;li&gt;WebApplicationContext란 ApplicationContext를 상속하는 Context이며, 주로 web application에서 사용된다. 주로 web과 연관된 구성요소들(controller, view resolver, …)등을 다루는 기능을 제공한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;테스트 클래스에 &lt;code class=&quot;highlighter-rouge&quot;&gt;@WebAppConfiguration&lt;/code&gt;이 있을 경우, WebApplicationContext가 테스트를 위해 로드되었음을 보장합니다.&lt;/li&gt;
      &lt;li&gt;웹 어플리케이션에 대한 디폴트 루트 경로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;file:src/main/webapp&lt;/code&gt;입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@AutoConfigureMockMvc&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;자동으로 MockMvc를 사용해서 테스트할 수 있게끔 설정해주는 애노테이션
        &lt;ul&gt;
          &lt;li&gt;MockMvc는 브라우저에서 요청과 응답을 의미하는 객체로서 Controller 테스트를 용이하게 해주는 라이브러리이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ControllerTest Class에 붙여진 애노테이션에 대해서 알아보았음으로, 구체적으로 어떻게 Controller Unit Test를 작성했는지에 대해서 알아보자!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MemberController Bean은 DirectoryService Bean, MemberService Bean, ObjectMapper Bean으로 이루어져 있다.&lt;/strong&gt; 나는 MemberController Bean 자체만 테스트 하고 싶기 때문에, DirectoryService Bean과 MemberService Bean을 테스트 할 필요가 없다.&lt;/p&gt;

&lt;p&gt;그래서 DirectoryService Bean과 MemberService Bean은 MemberController Bean생성시 @MockBean을 통해서 Mock객체로써 받았다.&lt;/p&gt;

&lt;p&gt;그렇다면 &lt;strong&gt;왜 ObjectMapper Bean은 @MockBean을 통해서 Mock 객체로써 받지 않았는가?&lt;/strong&gt; 라는 질문을 할 수 있다.&lt;/p&gt;

&lt;p&gt;이에 대한 나의 답변은 &lt;strong&gt;Mock 객체는 일반적으로 테스트를 위해 메소드의 리턴 값을 내가 정의한대로 사용하기 위해 사용하는데, ObjectMapper Bean과 같은 경우에는 해당 Bean 자체의 기존 메소드 Return값을 사용해야 했기 때문에 @MockBean으로써 의존성을 받지 않았고, ApplicationContext내에서 관리하는 실제 ObjectMapper Bean 객체를 주입 받았다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이로써 MemberController 구성을 완료 했고, 이를 실제 테스트 해 보도록 하겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1-멤버에-root-directory가-존재하는-case-test&quot;&gt;1. 멤버에 Root Directory가 존재하는 Case Test&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;멤버에 Root Directory가 존재하는 경우 테스트&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@WithUserDetails&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRootDirectoryTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;DirectoryDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryDTO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DIRECTORY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DIRECTORY_TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BLOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PARENT_DIRECTORY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findMemberByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDirectoryDTOs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root-directory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DIRECTORY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DIRECTORY_TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].category&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DirectoryCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BLOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].parentDirectoryId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PARENT_DIRECTORY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MockMvc를 통해서 MemberController 테스트를 진행했으며, Spring Security Filter로부터 인증을 통과하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;@WithUserDetails&lt;/code&gt; 애노테이션을 사용했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you want to see the Detaild Information of &lt;code class=&quot;highlighter-rouge&quot;&gt;@WithUserDetails&lt;/code&gt;, See &lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.3.5.BUILD-SNAPSHOT/reference/html5/#test-method-withuserdetails&quot;&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;처음에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@WithUserDetails&lt;/code&gt;를 사용하는 주 목적인 인증된 User별로 요청에 응답을 보내는 Controller를 테스트 하면 어떨까? 생각 했지만, 이는 Security 뿐만 아니라 DB와도 관련된 테스트를 하는 것이기 때문에, 점점 Controller 단위 테스트가 통합 테스트로 변화하고 있다는 느낌을 받아서, &lt;strong&gt;테스트 대상 User를 인증된 사용자(User)라고 가정하&lt;/strong&gt;고 Controller 테스트를 진행했다.&lt;/p&gt;

&lt;p&gt;멤버에 Root Directory가 존재하는 경우 Controller의 Handler Method는 response로 body에 Root Directory의 json 데이터가 담겨져 있음으로 이를 테스트 하기위해서 jsonPath를 사용했다.&lt;/p&gt;

&lt;h4 id=&quot;2-멤버에-root-directory가-존재하지-않는-case-test&quot;&gt;2. 멤버에 Root Directory가 존재하지 않는 Case Test&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;멤버에 Root Directory가 존재하지 않는 경우 테스트&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@WithUserDetails&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNonRootDirectoryTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DirectoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonElementList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findMemberByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDirectoryDTOs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonElementList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root-directory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNoContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;멤버에 Root Directory가 존재하지 않는 Case의 경우도 1번 Case와 동일하게 MockMvc와 @WithUserDetails를 사용해서 테스트를 진행하였다.&lt;/p&gt;

&lt;p&gt;멤버에 Root Directory가 존재하지 않는 경우 Handler Method는 Response Body에 어떠한 Json Data도 보내지않고 Http 상태 코드로 204번(NO CONTENT)를 보내주기 때문에 이를 테스트 했다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;테스트-결과&quot;&gt;테스트 결과&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;위의 방식대로 테스트 한 결과 2개의 Test Cases가 멋지게 &lt;strong&gt;pass&lt;/strong&gt;된 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Test-Spring-MVC-Controller-Applying-Spring-Security-1.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;이-테스트를-기반으로-junit5를-활용한-테스트에-대해-전체적인-개념을-알게-되었고-통합-테스트와-단위-테스트의-차이에-대해서-잘-알게-되었다&quot;&gt;이 테스트를 기반으로 JUnit5를 활용한 테스트에 대해 전체적인 개념을 알게 되었고, 통합 테스트와 단위 테스트의 차이에 대해서 잘 알게 되었다.&lt;/h4&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;reference&quot;&gt;Reference&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.3.3.BUILD-SNAPSHOT/reference/html5/&quot;&gt;Spring Security Doc&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/testing.html&quot;&gt;Spring Framework Testing Doc&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 18 Aug 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2020/08/18/Test-Spring-MVC-Controller-Applying-Spring-Security.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2020/08/18/Test-Spring-MVC-Controller-Applying-Spring-Security.html</guid>
        
        <category>Spring</category>
        
        <category>Security</category>
        
        <category>MVC</category>
        
        <category>Controller</category>
        
        <category>Unit</category>
        
        <category>Test</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>첫 3계층 웹 프로젝트를 진행하면서 느낀 클린 코드에 관한 생각</title>
        <description>&lt;p&gt;오늘은 &lt;strong&gt;첫 3계층 웹 프로젝트(Static Server - Api Server - Database)&lt;/strong&gt;를 진행하면서 느낀 &lt;strong&gt;클린 코드에 관한 나의 생각&lt;/strong&gt;을 공유하고자 포스팅 하게 되었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2020년도 4월 초부터 진행한 &lt;strong&gt;webper 프로젝트&lt;/strong&gt;&lt;a href=&quot;https://github.com/JNU-econovation/webper&quot;&gt;(Github저장소)&lt;/a&gt;는 &lt;strong&gt;Api 서버로 spring boot&lt;/strong&gt;를 사용하고 있고, &lt;strong&gt;클라이언트에게는 React기반의 View를 서비스할 Static Server를 두고 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;우리 팀은 &lt;u&gt;프론트 앤드 개발자 2명과 백 앤드 개발자 1명&lt;/u&gt;으로 구성되어 있는데, 프론트 앤드 개발자 중 한명은 휴학생 이다.&lt;/p&gt;

&lt;p&gt;휴학을 하신 프론트 앤드 개발자 분(이하 A)께서는 휴학을 하시다 보니, 학기 중에 다른 팀원에 비해서 상대적으로 시간이 많았다.&lt;/p&gt;

&lt;p&gt;클라이언트의 개발 속도가 Api서버의 개발 속도보다 훨씬 빨랏고 결국, &lt;strong&gt;A는 테스트 서버(데이터만 주고 받을)를 직접 만들어 나름 데이터를 정의해 개발을 진행&lt;/strong&gt;했다.&lt;/p&gt;

&lt;p&gt;학기가 끝난 후, A는 잠깐 서울에 가게 되고, 백앤드 개발자(이하 ‘나’) 와 또 다른 프론트 개발자(이하 B)만 남게 되었다.&lt;/p&gt;

&lt;p&gt;나는 Api서버에 Spring Security를 사용해 인증 까지는 구현했으나, 그 이후로는 진행이 많이 되지는 않은 상황이었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;나는 A가 서울에 가기전에 적어주고 떠난 데이터 명세 ppt를 보고 클라이언트 쪽 프로세스를 유추해 가면서 객체 지향적으로 api 서버를 구축 하기 위해 노력하였다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래 그림은 A가 건내준 데이터 명세 ppt의 일부이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/My-Thought-On-First-3Tier-Web-Project-1.png&quot; style=&quot;width:50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A가 없는 3주의 시간동안 나름 객체 지향적으로 api서버를 구축하였고, 문서화 및 CI/CD도 진행하였다.&lt;/p&gt;

&lt;p&gt;A가 돌아오고 난 후, 우리 팀은 프로젝트를 마무리 짓기 위해 백과 프론트 사이에 통신을 주고 받았고 이 과정에서 정말 자잘한 이슈가 계속 생겼다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;대부분의 이슈는 프론트 단에서 특정 api를 사용하기 위해 A가 원하는 요청과 응답이 내가 api서버를 구현하면서 생각했던 요청과 응답이 아닌 것이다…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;프론트 앤드에서 서버의 특정 api 사용시 나름 고정된 프로세스가 있는 것 같아 보였지만(Redux 패턴 때문?), A가 서울 가기 전에 보내준 데이터 명세에는 이러한 내용이 존재하지 않았기 때문에 나는 이러한 프로세스를 전혀 고려하지 않고 Api 서버를 구축했다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;발생한 이슈 중 가장 큰 문제는 Java의 ORM 명세인 JPA를 구현하는 Hibernate를 사용하는 Spring api 서버의 특정 api에서 A가 원하는 응답을 제공하기 위해서는 아주 더러운 코드를 짜거나, 도메인 내부 설계를 변경하지 않으면 불가능 하다는 것이었다…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그래서 나는 선택 해야 했다….&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;도메인 설계를 변경하면 전체적으로 엄청난 코드 변화를 유발할 텐데.. 프로젝트 마감이 3일 남은 이 시점에서 위와 같은 수고로움 에도 불구하고 객체 지향적인 코드를 작성할 건지..&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;많은 시간과 노력이 드는 객체 지향적인 코드는 좀 미뤄두고… 일단 프론트가 원하는 api 응답을 구현을 위해서 더러운 코드를 작성할 것인지…&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;결국에 나는 2번을 선택했지만, &lt;strong&gt;왜 현업에서 클린코드를 강조하지만, 정작 클린코드를 실현하지 못하는지 알 것 같다….&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;매일 변경되는 요구사항 속에 우리는 객체 지향적인 코드를 선택할 것인지 아니면 빠른 기능 구현을 선택하고 다른 부분에 더 집중할 것인지… 동아리 선배가 말한 것처럼 개발은 매 순간 trade-off 관계 인 것 같다.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;객체-지향에-있어서-가장-중요한-것은-기존의-요구사항을-만족하면서-미래에-변화될지도-모르는-요구사항에-유연하게-대처하고-적응할-수-있는-설계를-구현하는-것이-매우-중요한-것-같다&quot;&gt;객체 지향에 있어서 가장 중요한 것은, 기존의 요구사항을 만족하면서 미래에 변화될지도 모르는 요구사항에 유연하게 대처하고, 적응할 수 있는 설계를 구현하는 것이 매우 중요한 것 같다.&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;동아리 선배님의 조언 (현 11번가 개발자)&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/citerus/dddsample-core&quot;&gt;https://github.com/citerus/dddsample-core&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;시간 날 때 Import 받아서 쭉 읽어보자!! (DDD 관련 내용)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;이번 프로젝트 마감(동아리 성과발표)을 끝내고 webper 프로젝트를 다시 TDD 기반으로 리팩토링 해봐야 겠다.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Jul 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/cleancode/2020/07/29/My-Thought-On-First-3Tier-Web-Project.html</link>
        <guid isPermaLink="true">http://localhost:4000/cleancode/2020/07/29/My-Thought-On-First-3Tier-Web-Project.html</guid>
        
        <category>Spring</category>
        
        <category>JPA</category>
        
        <category>Hibernate</category>
        
        <category>OOP</category>
        
        <category>CleanCode</category>
        
        
        <category>CleanCode</category>
        
      </item>
    
      <item>
        <title>Jackson Infinite Recursion Issue With JPA Entity</title>
        <description>&lt;p&gt;이번 포스팅에서는 프로젝트 진행 중 &lt;strong&gt;JPA Entity 객체를 JSON으로 Serialize시킬 때 발생하는 Jackson Infinite Recursion Issue&lt;/strong&gt;에 대해서 알아보고 이를 어떻게 해결했는지에 대해서 포스팅 하도록 하겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;jpa-entity-json-serialize&quot;&gt;JPA Entity JSON Serialize&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;JSON으로 Serialize하고 싶은 JPA Entity Class는 다음과 같다. &lt;strong&gt;[Self Reference]&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryCategory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childDirectories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Spring MVC Handler Method에서 ResponseEntity를 사용해 위의 Entity 객체를 JSON으로 Serialize하는 중에 다음과 같은 예외&lt;u&gt;(Infinite Recursion : StackOverflowError)&lt;/u&gt;가 발생했다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;로그(log)는 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain&lt;/strong&gt;: econo.webper.server.directory.Directory[“childDirectories”]-&amp;gt;org.hibernate.collection.internal.PersistentBag[0]-&amp;gt;econo.webper.server.directory.Directory[“parentDirectory”]-&amp;gt;econo.webper.server.directory.Directory[“childDirectories”]-&amp;gt;org.hibernate.collection.internal.PersistentBag[0]-&amp;gt;econo.webper.server.directory.Directory[“parentDirectory”]-&amp;gt;econo.webper.server.directory.Directory[“childDirectories”]-&amp;gt;org.hibernate.collection.internal.PersistentBag[0]-&amp;gt;econo.webper.server.directory.Directory[“parentDirectory”]-&amp;gt;econo.webper.server.directory.Directory[“childDirectories”]-&amp;gt; ….&lt;strong&gt;(계속 반복)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 로그(log)를 간단히 설명하면!! &lt;strong&gt;ResponseEntity는 기본적으로 Jackson 라이브러리를 사용해서 Object를 JSON데이터로 변환해주는데, 위의 Directory 클래스의 객체를 JSON데이터로 변환하기 위해 &lt;u&gt;해당 객체의 childDirectories필드를 참조&lt;/u&gt;하게 되고 이는 &lt;u&gt;Hibernate가 제공하는 원본 컬렉션을 감싼 래퍼 컬렉션인 PersistentBag&lt;/u&gt;을 가리킨다. -&amp;gt; 다음으로는 첫 번째 원소인 &lt;u&gt;PersistentBag[0](Directory 클래스를 감싼 래퍼 클래스 객체)를 참조&lt;/u&gt;하고 -&amp;gt; 이후 래퍼 클래스 객체인 &lt;u&gt;PersistentBag[0](Directory 클래스 객체)의 필드인 ParentDirectory(Directory 클래스 객체)를 참조&lt;/u&gt;하게 된다. -&amp;gt; 다시 &lt;u&gt;parentDirectory(Directory 객체)의 childDirectores필드를 참조&lt;/u&gt;하게 되며 -&amp;gt; 로그에서 보여진 것처럼 위의 프로세스가 &lt;u&gt;무한루프&lt;/u&gt;의 형태로 발생해 StackOverflowError가 발생한다..&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;jpa-entity-간에-양방향-관계가-존재할-때만-infinite-recursion이-생기는-줄-알았는데-위의-entity-클래스와-같이-jpa-entity가-self-reference를-하는-경우도-infinite-recursion이-발생할-수-있다는-사실을-알게-되었다&quot;&gt;JPA Entity 간에 양방향 관계가 존재할 때만 Infinite Recursion이 생기는 줄 알았는데, 위의 Entity 클래스와 같이 JPA Entity가 Self Reference를 하는 경우도 Infinite Recursion이 발생할 수 있다는 사실을 알게 되었다.&lt;/h4&gt;

&lt;p&gt;우리는 위의 &lt;strong&gt;Infinite Recursion 이슈를 해결하기 위해 &lt;u&gt;3가지 방법&lt;/u&gt;&lt;/strong&gt;을 사용할 수 있다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;[사용] JPA Entity 클래스 내에 Jackson 애노테이션을 위치시키는 방법.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;@JsonIgnore, @JsonManagedReference, @JsonBackReference, @JsonIdentityInfo, …&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ResponseDTO를 만들어 Persistent Object의 데이터를 주입시키는 방법&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Self Reference하는 Persistent Object를 JSON으로 Serialize할 때 Infinite Recursion이 발생하는 것이기 때문에 이를 해결하기 위해 Response용 DTO를 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Custom Serializer를 만들어 사용하는 방법.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;ResponseEntity에 기본으로 제공되는 Jackson 라이브러리의 Databinding을 사용하지 않고 직접 Serializer를 만들어 Infinite Recursion이 일어나지 않도록 Serialize하는 방법&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 방법 이외에도 다양한 방법들이 많겠지만, 나는 &lt;strong&gt;1번&lt;u&gt;(JPA Entity 클래스 내에 Jackson 애노테이션을 위치시키는 방법)&lt;/u&gt;을 사용&lt;/strong&gt;했다.&lt;/p&gt;

&lt;p&gt;이번 포스팅에서는 내가 사용한 방법인 JPA Entity 클래스 내에 Jackson 애노테이션을 위치시켜 Infinite Recursion을 해결하는 방법에 대해서 주로 설명하겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;jpa-entity내에-jackson-애노테이션을-위치시켜-infinite-recursion-issue를-해결하는-방법&quot;&gt;JPA Entity내에 Jackson 애노테이션을 위치시켜 Infinite Recursion Issue를 해결하는 방법&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;1-jsonignore를-사용해서-infinite-recursion-해결하는-방법&quot;&gt;1. @JsonIgnore를 사용해서 Infinite Recursion 해결하는 방법&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;@JsonIgnore 란?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Serialization(Object -&amp;gt; JSON) 및 Deserialization(JSON -&amp;gt; Object)에 사용되는 논리적 속성을 무시하는데 사용된다.&lt;/li&gt;
  &lt;li&gt;보통 field, getter, setter에 사용하는 애노테이션이다.&lt;/li&gt;
  &lt;li&gt;@JsonIgnore를 활성화시킬 수 있는 Value를 속성으로 가지고 있으며, Default는 true이고 false일 시 @JsonIgnore가 비활성화 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonIgnore&lt;/code&gt;를 Directory 클래스의 &lt;strong&gt;parentDirectory 또는 childDirectories필드에 다음과 같이 적용&lt;/strong&gt;하면 Infinite Recursion을 끊을 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryCategory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@JsonIgnore&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childDirectories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Directory Test Object를 생성해 JSON Serialize한 결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Jackson-Infinite-Recursion-Issue With-JPA-Entity-1.png&quot; style=&quot;width:40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이 애노테이션은 Infinite Recursion 문제를 쉽게 해결하지만, Directory 객체의 parentDirectory라는 필드를 Serialize 및 Deserialize하지 않기 때문에 parentDirectory필드 데이터를 Client가 요구할 시 응답할 수 없다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-jsonmanagedreference-jsonbackreference를-사용해서-infinite-recursion-해결하는-방법&quot;&gt;2. @JsonManagedReference, @JsonBackReference를 사용해서 Infinite Recursion 해결하는 방법&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;@JsonManagedReference, @JsonBackReference란?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;서로 대응되는 엔티티간의 match되는 properties 쌍의 부모/자식 관계를 표현하고 처리하기위해 사용되어지는 &lt;strong&gt;Pair of Annotation&lt;/strong&gt;이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonManagedReference&lt;/code&gt; 애노테이션이 붙여진 필드는 &lt;strong&gt;the forward part of the reference(parent)&lt;/strong&gt;라고 하며 JSON으로 Serialize되고, &lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonBackReference&lt;/code&gt; 애노테이션이 붙여진 필드는 &lt;strong&gt;the back part of the reference(child)&lt;/strong&gt;라고 하며 JSON으로 Selialize되지 않습니다. &lt;strong&gt;즉, the back part of the reference가 Serialize되지 않음으로 Infinite Recursion이 발생하지 않습니다.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonManagedReference, @JsonBackReference&lt;/code&gt;를 Directory 클래스의 &lt;strong&gt;parentDirectory 또는 childDirectories필드에 다음과 같이 적용&lt;/strong&gt;하면 Infinite Recursion을 끊을 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryCategory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@JsonBackReference&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@JsonManagedReference&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childDirectories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Directory Test Object를 생성해 JSON Serialize한 결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Jackson-Infinite-Recursion-Issue With-JPA-Entity-1.png&quot; style=&quot;width:40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Directory Entity가 양방향 관계라면 2개의 Entity의 모든 필드 중에서 하나의 필드만 Serialize되지 않겠지만, 우리는 하나의 Entity내에 Self Reference가 존재하기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonBackReference&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonManagedReference&lt;/code&gt;의 조합이 Serialize측면에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonIgnore&lt;/code&gt;과 동일한 역할을 하게된다. &lt;strong&gt;(즉 Entity내의 하나의 필드는 무조건 Serialize되지 않는다.)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonBackReference&lt;/code&gt;가 붙여진 필드(parentDirectory)의 데이터가 필요한 Client의 입장에서는 데이터를 사용할 수 없음으로 제한이 걸린다.&lt;/p&gt;

&lt;h3 id=&quot;3-jsonidentifyinfo를-사용해서-infinite-recursion을-해결하는-방법&quot;&gt;3. @JsonIdentifyInfo를 사용해서 Infinite Recursion을 해결하는 방법&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;@JsonIdentifyInfo 란?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Serialize / Deserialize 할 때 객체 대신 객체 ID가 사용됨을 나타내는데 사용되어지는 class/property 애노테이션이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 애노테이션은 cyclic object graphs와 directed-acyclic graphs를 올바르게 처리하는데 사용되어질 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonIdentifyInfo&lt;/code&gt;를 Directory 클래스에 다음과 같이 적용하면 Infinite Recursion을 끊을 수 있다.&lt;/p&gt;

&lt;p&gt;object identifier를 property에 대한 id값을 사용해서 생성하고 싶다면, 다음과 같이 generator속성 값에 ObjectIdGenerators.PropertyGenerator.class를 주어야하고, property속성 값에 id를 주어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JsonIdentityInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectIdGenerators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PropertyGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryCategory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childDirectories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Directory Test Object를 생성해 JSON Serialize한 결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Jackson-Infinite-Recursion-Issue With-JPA-Entity-3.png&quot; style=&quot;width:40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Infinite Recursion Issue가 해결 되었고, parentDirectory는 해당 객체의 Id Property값을 통해서 Directory와의 연결관계도 식별 가능하다!!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ParentDirectory의 Field 전부를 Json으로 Serialize해서 사용할 이유가 없기 때문에 @JsonIdentifyInfo 애노테이션이 가장 적합하고, 추가적으로 ParentDirectory의 필드 전부를 JSON Serialize해서 사용할 필요가 있다면, Response DTO를 만들어줘도 좋을 것 같다.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;entity를-json으로-serialize하는데-생기는-infinite-recursion-이슈를-해결하는-더-많은-방법이-궁금하다면-httpswwwbaeldungcomjackson-bidirectional-relationships-and-infinite-recursion-를-참조하면-더-많은-키워드-및-설명을-얻을-수-있다&quot;&gt;Entity를 JSON으로 Serialize하는데 생기는 Infinite Recursion 이슈를 해결하는 더 많은 방법이 궁금하다면 &lt;a href=&quot;https://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion&quot;&gt;https://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion&lt;/a&gt; 를 참조하면 더 많은 키워드 및 설명을 얻을 수 있다.&lt;/h4&gt;

&lt;p&gt;이상 글을 마치며, 부족한 글임에도 끝까지 봐준 독자들에게 감사를 표한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;참조 사이트&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://keenformatics.blogspot.com/2013/08/how-to-solve-json-infinite-recursion.html&quot;&gt;http://keenformatics.blogspot.com/2013/08/how-to-solve-json-infinite-recursion.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/web.html&quot;&gt;https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/web.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/FasterXML/jackson-annotations/wiki/Jackson-Annotations&quot;&gt;https://github.com/FasterXML/jackson-annotations/wiki/Jackson-Annotations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 20 Jul 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2020/07/20/Jackson-Infinite-Recursion-Issue-With-JPA-Entity.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2020/07/20/Jackson-Infinite-Recursion-Issue-With-JPA-Entity.html</guid>
        
        <category>Spring</category>
        
        <category>Jpa</category>
        
        <category>Serialize</category>
        
        <category>Infinite</category>
        
        <category>Recursion</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>Spring Security + JWT를 통해 프로젝트에 인증 구현하기</title>
        <description>&lt;p&gt;Spring Security와 JWT를 활용해서 프로젝트에 인증을 어떻게 구현했는지에 대해서 포스팅 하려고 한다.&lt;/p&gt;

&lt;p&gt;토큰을 사용한 인증은 처음이기도 하고, Google OAuth를 함께 사용하는 바람에… 개념이 해깔려 며칠간 계속 헤맸던 것 같다.&lt;/p&gt;

&lt;p&gt;이제서야 조금 감을 잡으며 프로젝트에 인증 구현을 마쳤는데.. 아직 구현되지 않은 기능들이 매우 많다 ㅎㅎ 빨리 구현하고 싶다!!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;서론이 길었다!!! 지금부터 Spring Security란 무엇이고, Spring Security와 JWT를 사용해서 어떻게 인증을 구현했는지에 대해서 포스팅 하겠다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spring-security란&quot;&gt;Spring Security란?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Spring Security란 인증과, 권한부여, 일반적인 공격에 대한 보호의 기능을 제공하는 프레임워크이다.&lt;/strong&gt; 즉, Spring Security를 사용하면 어플리케이션의 보안 관련 기능을 자체적으로 구현 할 필요 없이 쉽고 안전하게 구현할 수 있다.&lt;/p&gt;

&lt;p&gt;Spring Security의 Servlet 보안 지원은 &lt;strong&gt;Servlet Filter(이하 Filter)&lt;/strong&gt;를 기반으로 한다. 클라이언트가 어플리케이션으로 request를 보내면, Container는 요청 URI의 경로에 따라 어떤 Filter와 어떤 Servlet을 적용할 것인지 결정한다.&lt;/p&gt;

&lt;p&gt;Spring은 여러 Filter중 Servlet Container Lifecycle과 ApplicationContext사이에 연결할 수 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;DelegatingFilterProxy&lt;/code&gt;라는 Filter를 제공한다.&lt;/p&gt;

&lt;p&gt;Spring Security의 Servlet 보안 지원은 &lt;code class=&quot;highlighter-rouge&quot;&gt;DelegatingFilterProxy&lt;/code&gt;가 감싸고 있는 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FilterChainProxy&lt;/code&gt;&lt;/strong&gt;에 의해 수행되며, &lt;code class=&quot;highlighter-rouge&quot;&gt;FilterChainproxy&lt;/code&gt;는 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityFilterChain&lt;/code&gt;&lt;/strong&gt;을 통해 많은 작업을 &lt;strong&gt;Security Filter&lt;/strong&gt; 인스턴스에 위임한다.&lt;/p&gt;

&lt;p&gt;위 과정을 그림으로 나타내면 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Spring-Security-With-JWT-1.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SecurityFilterChain은 스프링에서 보안과 관련된 여러 Security Filter List를 갖고 있는 객체로 이를 순회하면서 필터링을 실시한다.&lt;/p&gt;

&lt;p&gt;SecurityFilterChain에 존재하는 Security Filter순서는 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ChannelProcessingFilter&lt;/li&gt;
  &lt;li&gt;ConcurrentSessionFilter&lt;/li&gt;
  &lt;li&gt;WebAsyncManageIntegrationFilter&lt;/li&gt;
  &lt;li&gt;SecurityContextPersistenceFilter&lt;/li&gt;
  &lt;li&gt;HeaderWriterFilter&lt;/li&gt;
  &lt;li&gt;CorsFilter&lt;/li&gt;
  &lt;li&gt;CsrfFilter&lt;/li&gt;
  &lt;li&gt;LogoutFilter&lt;/li&gt;
  &lt;li&gt;OAuth2AuthorizationRequestRedirectFilter&lt;/li&gt;
  &lt;li&gt;Saml2WebSsoAuthenticationRequestFilter&lt;/li&gt;
  &lt;li&gt;X509AuthenticationFilter&lt;/li&gt;
  &lt;li&gt;AbstractPreAuthenticatedProcessingFilter&lt;/li&gt;
  &lt;li&gt;CasAuthenticationFilter&lt;/li&gt;
  &lt;li&gt;OAuth2LoginAuthenticationFilter&lt;/li&gt;
  &lt;li&gt;Saml2WebSsoAuthenticationFilter&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UsernamePasswordAuthenticationFilter&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;ConcurrentSessionFilter&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;… (총 33개의 Spring Security Filter가 존재한다.)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;위의 Security Filter중 &lt;strong&gt;Security Authentication Filter&lt;/strong&gt;(UsernamePasswordAuthentication, OAuth2LoginAuthenticationFilter와 같은 인증 필터)는 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationManager&lt;/code&gt;를 통해 인증을 수행한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationManager&lt;/code&gt;는 Spring Security의 &lt;strong&gt;필터들이 인증을 수행하는 방법에 대한 명세&lt;/strong&gt;를 정의해 놓은 인터페이스이다.&lt;/p&gt;

&lt;p&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationManager&lt;/code&gt;는 일반적으로 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ProviderManager&lt;/code&gt;&lt;/strong&gt;로 구현되며, &lt;code class=&quot;highlighter-rouge&quot;&gt;ProviderManager&lt;/code&gt;는 여러 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationProvider&lt;/code&gt;&lt;/strong&gt;에 인증을 위임한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;여러 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationProvider&lt;/code&gt;중 하나라도 인증에 성공한다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;ProviderManager&lt;/code&gt;에게 인증된 &lt;code class=&quot;highlighter-rouge&quot;&gt;Authentication&lt;/code&gt;객체를 반환하고 이는 event 기반으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt;에 전송된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ProviderManager&lt;/code&gt;에 설정된 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationProvider&lt;/code&gt;중 어느 것도 성공적으로 인증을 수행할 수 없다면, 인증은 실패할 것이고 알맞는 예외가 &lt;code class=&quot;highlighter-rouge&quot;&gt;ProviderManager&lt;/code&gt;에게 건내질 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;인증이 성공할 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;SecuritycontextHolder&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityContext&lt;/code&gt;에 인증된 Authentication 객체를 저장할 수 있도록 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;아래의-그림은-username-and-password-인증-방식의-아키텍처이다&quot;&gt;아래의 그림은 Username and Password 인증 방식의 아키텍처이다.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Spring-Security-With-JWT-2.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림의 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt;의 역할은 &lt;code class=&quot;highlighter-rouge&quot;&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;가 수행하고 &lt;strong&gt;전체적인 프로세스&lt;/strong&gt;는 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Client가 어플리케이션에 요청을 보내면, Servlet Filter에 의해서 Security Filter로 Security 작업이 위임되고 여러 Security Filter 중에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;&lt;strong&gt;(Username and Password Authentication 방식에서 사용하는 AuthenticationFilter)&lt;/strong&gt;에서 &lt;strong&gt;인증&lt;/strong&gt;을 처리한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt;&lt;strong&gt;(UsernamePasswordAuthenticationFilter인데 지금부터 AuthenticationFilter라고 부름)&lt;/strong&gt;는 Servlet 요청 객체(HttpServletRequest)에서 username과 password를 추출해 &lt;code class=&quot;highlighter-rouge&quot;&gt;UsernameAuthenticationToken&lt;/code&gt;&lt;strong&gt;(이하 인증 객체)&lt;/strong&gt;을 생성한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationManager&lt;/code&gt;&lt;strong&gt;(구현체 : ProviderManager)&lt;/strong&gt;에게 인증 객체를 전달한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ProviderManager&lt;/code&gt;는 인증을 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationProvider&lt;/code&gt;에게 인증 객체를 전달한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationProvider&lt;/code&gt;는 전달받은 인증 객체의 정보(일반적으로 사용자 아이디)를 &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDetailsService&lt;/code&gt;에 넘겨준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UserDetailsService&lt;/code&gt;는 전달 받은 사용자 정보를 통해 DB에서 알맞는 사용자를 찾고 이를 기반으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDetails&lt;/code&gt;객체를 만듭니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자 정보와 일치하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDetails&lt;/code&gt;객체를 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationProvider&lt;/code&gt;에 전달합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationProvider&lt;/code&gt;은 전달받은 &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDetails&lt;/code&gt;를 인증해 성공하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;ProviderManager&lt;/code&gt;에게 권한(Authorities)을 담은 검증된 인증 객체를 전달합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ProviderManager&lt;/code&gt;는 검증된 인증 객체를 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt;에게 전달합니다. &lt;strong&gt;(event 기반 으로 전달)&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt;는 검증된 인증 객체를 &lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityContextHolder&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityContext&lt;/code&gt;에 저장합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Spring Security 전체를 설명하기에는 하나의 포스팅으로 부족하기 때문에 아주 기본적인 프로세스만 설명했고, 이제 메인 주제인 &lt;strong&gt;나의 프로젝트에 어떻게 Spring Security + JWT를 적용&lt;/strong&gt;했는지에 대해서 알아보도록 하겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spring-security--jwt를-프로젝트에-어떻게-적용-했는가&quot;&gt;Spring Security + JWT를 프로젝트에 어떻게 적용 했는가?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;클라이언트가 Spring Security를 적용한 어플리케이션에 리소스를 요청할 때 접근 권한이 없는 경우 기본적으로 &lt;strong&gt;Username and Password Authentication Mechanism&lt;/strong&gt;을 사용해 &lt;strong&gt;로그인 폼&lt;/strong&gt;으로 보내지게 되는데 그 역할을 하는 필터는 &lt;code class=&quot;highlighter-rouge&quot;&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;이다.&lt;/p&gt;

&lt;p&gt;내가 개발하고 있는 Rest API Server는 &lt;strong&gt;Username and Password Authentication Mechanism&lt;/strong&gt;을 사용하지 않을 것이기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;이전에 사용자 정의 필터인 &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtAuthenticationFilter&lt;/code&gt;에서 인증 및 권한처리가 필요했다.&lt;/p&gt;

&lt;p&gt;그래서 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JwtAuthenticationFilter&lt;/code&gt;&lt;/strong&gt;를 다음과 같이 만들어서 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;&lt;/strong&gt;이전에 등록했다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JwtAuthenticationFilter.java&lt;/strong&gt; : Jwt가 유효한 토큰인지 인증하기 위한 Filter이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JwtAuthenticationFilter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericFilterBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JwtTokenProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JwtAuthenticationFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JwtTokenProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jwtTokenProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Request로 들어오는 Jwt Token의 유효성을 검증하는 filter를 filterChain에 등록합니다.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FilterChain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resolveToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validateToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// token 검증&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 인증 객체 생성&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;SecurityContextHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// SecurityContextHolder에 인증 객체 저장&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filterChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spring Security Filter와 통합하지 않고 &lt;strong&gt;사용자가 정의한 필터(JwtAuthenticationFilter)에서 인증 및 권한 작업을 진행&lt;/strong&gt;할 것이기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationManager&lt;/code&gt;를 사용하지 않고 &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtTokenProvider&lt;/code&gt;를 통해서 인증 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityContextHolder&lt;/code&gt;를 바로 사용했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Spring Security Document의 관련 글&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;If you are not integrating with Spring Security’s Filters you can set the SecurityContextHolder directly and are not required to use an AuthenticationManager.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다음으로는 생성한 &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtAuthenticationFilter&lt;/code&gt;를 Spring Security의 &lt;code class=&quot;highlighter-rouge&quot;&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;&lt;strong&gt;이전에 등록하는 설정&lt;/strong&gt;을 할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SecurityConfig.java&lt;/strong&gt; : Spring Security 관련 설정들을 하는 Configuration 클래스&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableWebSecurity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SecurityConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebSecurityConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JwtTokenProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SecurityConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JwtTokenProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jwtTokenProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthenticationManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticationManagerBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticationManagerBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;httpBasic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;disable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;csrf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;disable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authorizeRequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;antMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/login/google&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anonymous&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addFilterBefore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JwtAuthenticationFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsernamePasswordAuthenticationFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Filter를 등록 했으면 Jwt Token을 생성하고, 인증 및 권한 부여 등의 기능을 제공할 &lt;strong&gt;Provider&lt;/strong&gt;를 만들어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JwtTokenProvider.java&lt;/strong&gt; : Jwt Token을 생성, 인증, 권한 부여, 유효성 검사, PK 추출 등의 다양한 기능을 제공하는 클래스&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JwtTokenProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TOKEN_VALID_MILISECOND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 10시간&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spring.jwt.secret&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDetailsService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetailsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userUserDetailsService&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDetailsService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetailsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userDetailsService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetailsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encodeToString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Jwt 토큰 생성&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userPk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Claims&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;claims&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jwts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;claims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userPk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;claims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;roles&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jwts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setClaims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;claims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 데이터&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setIssuedAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 토큰 발행 일자&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setExpiration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TOKEN_VALID_MILISECOND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 만료 기간&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SignatureAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HS512&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 암호화 알고리즘, secret 값 &lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Token 생성&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 인증 성공시 SecurityContextHolder에 저장할 Authentication 객체 생성&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetailsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadUserByUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUserPk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UsernamePasswordAuthenticationToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthorities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Jwt Token에서 User PK 추출&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserPk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jwts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSigningKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClaimsJws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolveToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-AUTH-TOKEN&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Jwt Token의 유효성 및 만료 기간 검사&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validateToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Jws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Claims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;claims&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jwts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSigningKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClaimsJws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jwtToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;claims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExpiration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인증 기능을 수행할 JwtTokenProvider를 만들었으면 JwtTokenProvider가 제공한 사용자 정보로 UserDetails를 제공할 &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDetailsService&lt;/code&gt;를 만들어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UserDetailsService.java :&lt;/strong&gt; JwtTokenProvider가 제공한 사용자 정보로 DB에서 알맞은 사용자 정보를 가져와 UserDetails 생성&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserUserDetailsService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDetailsService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserUserDetailsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadUserByUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsernameNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findUserByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;UserDetailsService까지 만들었으면 UserDetails를 상속받는 &lt;strong&gt;도메인 객체&lt;/strong&gt;를 만들고 사용자를 식별할 JwtToken을 생성할 Controller까지 만들면 Production 코드는 끝이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(User 클래스와 Controller 클래스의 코드를 첨부하고 싶었으나, 많은 배경지식이 필요한 코드들이 존재해 첨부하지 않았다.)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 위의 생성된 코드들을 테스트 할 수 있는 Test Code를 만들면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AutoConfigureMockMvc&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoogleLoginControllerTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@MockBean&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;GoogleLoginService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;JwtTokenProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GoogleLoginWithWrongAccessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// When &amp;amp; Then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wrong_Access_Token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;badRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Then&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login/google&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{\&quot;access_token\&quot; : \&quot;Wrong_Access_Token\&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBadRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GoogleLoginWithRightAccessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;GoogleUserinfoDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleUserinfoDTO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoogleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;googleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frog&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;googleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frog@email.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GoogleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;googleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// When&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Right_Access_Token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;MvcResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mvcResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login/google&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{\&quot;access_token\&quot; : \&quot;Right_Access_Token\&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentAsString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mvcResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContentAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$.X-AUTH-TOKEN&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUserPk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frog@email.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-AUTH-TOKEN&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이를 돌려보면 적절한 Jwt Token으로 인증을 완료하고 SecurityContextHolder에서 알맞는 사용자의 &lt;strong&gt;Principal&lt;/strong&gt;을 가져오는 걸 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Spring-Security-With-JWT-3.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;글이 아주 길고 장황해 독자들이 이를 읽고 얼마나 많은 도움이 될려는 지는 모르겠지만, Spring Security 아키텍처 부터 프로젝트 적용까지 한 포스팅으로 전부 설명한다는 것이 정말 쉽지 않은 일이었던 것 같고 아주 좋은 경험인 것 같다.&lt;/p&gt;

&lt;p&gt;또한 나의 지식이 늘어감에 또는 나의 프로젝트가 더 커짐에 따라서 이 글을 지속적으로 업데이트 한다는 다짐을 끝으로 글을 마치도록 하겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;참고한 사이트&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.3.3.BUILD-SNAPSHOT/reference/html5/&quot;&gt;https://docs.spring.io/spring-security/site/docs/5.3.3.BUILD-SNAPSHOT/reference/html5/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://daddyprogrammer.org/post/636/springboot2-springsecurity-authentication-authorization/&quot;&gt;https://daddyprogrammer.org/post/636/springboot2-springsecurity-authentication-authorization/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jeong-pro.tistory.com/205&quot;&gt;https://jeong-pro.tistory.com/205&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-security-custom-filter&quot;&gt;https://www.baeldung.com/spring-security-custom-filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 29 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2020/06/29/Spring-Security-with-JWT.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2020/06/29/Spring-Security-with-JWT.html</guid>
        
        <category>Spring</category>
        
        <category>Security</category>
        
        <category>JWT</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>@MockBean을 사용한 통합(Controller)테스트</title>
        <description>&lt;p&gt;&lt;strong&gt;이 글에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@MockBean&lt;/code&gt;을 사용한 통합테스트에 관한 이슈에 대해서 다루어 보도록 하겠다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;이 이슈는 Google OAuth를 사용하는 Service레이어를 의존하는 Controller를 테스트하는 과정에서 발생되었다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Controller 코드는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoogleLoginController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;GoogleLoginService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GoogleLoginController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GoogleLoginService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;googleLoginService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login/google&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loginByGoogleOAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonExtractor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValueByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;access_token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is2xxSuccessful&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GoogleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 코드에 대해서 간략히 설명하자면&lt;/p&gt;

&lt;p&gt;클라이언트가 &lt;code class=&quot;highlighter-rouge&quot;&gt;/login/google&lt;/code&gt; 앤드포인트로 구글 인증서버에서 받은 Access_Token을 넘겨주면 핸들러 메소드가 &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleLoginService&lt;/code&gt;를 사용해서 해당 Access_Token이 유효한지 아닌지를 체크하는 코드이다.&lt;u&gt;(Access_Token이 유효한지 아닌지에 대한 검증은 GoogleLoginService의 RestTemplate이 구글 인증 서버에 요청을 보내 진행)&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;위의 컨트롤러를 테스트하기 위해 &lt;strong&gt;2가지의 경우의 수&lt;/strong&gt;를 나누었다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;유효하지 않은 Access_Token을 가진 요청을 보내 4xx 상태코드를 가진 응답 테스트&lt;/li&gt;
  &lt;li&gt;유효한 Access_Token을 가진 요청을 보내 2xx 상태코드를 가진 응답 테스트&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;1-유효하지-않은-access_token을-가진-요청을-보내-4xx-상태코드를-가진-응답-테스트&quot;&gt;1. 유효하지 않은 Access_Token을 가진 요청을 보내 4xx 상태코드를 가진 응답 테스트&lt;/h2&gt;

&lt;p&gt;유효하지 않은 Access_Token을 테스트하는 작업은 매우 수월했다.&lt;/p&gt;

&lt;p&gt;내가 임의로 만든 Access_Token(구글의 Access_Token 형식을 알기 때문에 절대 겹칠일이 없다는 가정하에 진행)을 가진 요청을 &lt;code class=&quot;highlighter-rouge&quot;&gt;/login/google&lt;/code&gt;에게만 보내면 되었다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GoogleLoginWithWrongAccessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Given&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoogleAccessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;basdhifbasduiofbasdohiufsaoi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// When &amp;amp; Then&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login/google&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{\&quot;access_token\&quot; : \&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoogleAccessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBadRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 결과는 당연히 성공이었다!!!
&lt;img src=&quot;/assets/spring/Use-MockBean-Test-1.png&quot; style=&quot;width:30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하지만 문제는 두번째 경우 테스트 이었다….&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;2-유효한-access_token을-가진-요청을-보내-2xx-상태코드를-가진-응답-테스트&quot;&gt;2. 유효한 Access_Token을 가진 요청을 보내 2xx 상태코드를 가진 응답 테스트&lt;/h2&gt;

&lt;p&gt;유효한 Access_Token을 가진 요청을 테스트 하기 위해서는 유효한 Access_Token을 구글 인증 서버로부터 받아야 하는데 매번 테스트 할 때마다 유효한 Access_Token을 받아올 수는 없는 노릇이었다.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;(또한 구글 인증 서버로부터 Access_Token을 가져오는 로직이 간단하지 않아 어쩌면 배보다 배꼽이 더 큰 격이다..)&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 이전에 사용해 보았던 &lt;strong&gt;Mock객체를 활용해 GoogleLoginService의 메소드 return 값을 내가 설정해 보면 어떨까??&lt;/strong&gt; 라는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;하지만 다시 생각해 보면 통합(Controller)테스트 인데 Spring Boot가 뜰 때 어떻게 &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleLoginService&lt;/code&gt; Mock객체를 &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;에 주입해 줄 수 있을까??? 라는 또 다른 이슈가 생겼다!!!&lt;/p&gt;

&lt;p&gt;여기 저기 참고해 보고, Sproutt스터디에 질문을 올려본 결과 으쌰으쌰 프로젝트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;@MockBean&lt;/code&gt;을 사용하고 있는 걸 볼 수 있었고, 이에 대해서 찾아보니 나의 이슈를 해결할 수 있는 애노테이션이라는 것을 알게 되었다.&lt;/p&gt;

&lt;p&gt;유효한 Access_Token 테스트 코드를 작성하기 이전에 &lt;code class=&quot;highlighter-rouge&quot;&gt;@MockBean&lt;/code&gt;에 대해서 알아보자!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;mockbean&quot;&gt;@MockBean&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@MockBean&lt;/code&gt;은 Spring ApplicationContext에 Mock객체를 추가하게 해주는 주석이다.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@RunWith(SpringRunner.class)&lt;/code&gt; 클래스내의 필드에서 사용할 수 있고, Class Level의 주석으로써도 사용할 수 있다.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Mock객체는 타입 또는 Bean name으로써 Context에 등록할 수 있고, Context내에서 정의된 동일한 유형의 단일 Bean이 존재한다면 어플리케이션 실행시 Mock Bean으로써 대체된다.&lt;/strong&gt; 만약 동일한 타입의 Bean이 존재하지 않는다면 새로운 Mock Bean이 생성된다.&lt;/li&gt;
    &lt;li&gt;ApplicationContext에 알려져 있지만 Bean이 아닌 의존성은 발견되지 않을 것이며 Mock객체는 존재하는 의존성과 함께 Context에 추가되어 질 것이다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 @MockBean의 Spec을 참고해 작성한 &lt;strong&gt;유효한 Access_Token을 가진 요청을 보내 2xx 상태코드를 가진 응답 테스트 코드&lt;/strong&gt;는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AutoConfigureMockMvc&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoogleLoginControllerTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@MockBean&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;GoogleLoginService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GoogleLoginWithRightAccessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Given&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;GoogleUserinfoDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleUserinfoDTO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoogleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;googleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frog&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;googleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frog@email.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GoogleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;googleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// When &amp;amp; Then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Right_Access_Token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login/google&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{\&quot;access_token\&quot; : \&quot;Right_Access_Token\&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findUserByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frog@email.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frog&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Use-MockBean-Test-2.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@MockBean&lt;/code&gt;의 개념과 사용방법에 대해서 알아보았으니까 유효하지 않은 Access_Token을 테스트하는 코드를 리팩토링 하면 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GoogleLoginWithWrongAccessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// When &amp;amp; Then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wrong_Access_Token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;badRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login/google&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{\&quot;access_token\&quot; : \&quot;Wrong_Access_Token\&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBadRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;mockbean에-대해서-자세히-알아-보았고-이를-어떻게-사용하는지에-대해서도-알아-보았으니-테스트할-때-더-날아다닐-수-있을-것-같다-역시-sproutt스터디가-짱이다-화이팅&quot;&gt;@MockBean에 대해서 자세히 알아 보았고 이를 어떻게 사용하는지에 대해서도 알아 보았으니 테스트할 때 더 날아다닐 수 있을 것 같다!!! 역시 Sproutt스터디가 짱이다!! 화이팅&lt;/h4&gt;

&lt;p&gt;더 많은 정보를 얻고 싶은 독자는 다음을 참고하면 좋다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://howtodoinjava.com/spring-boot2/testing/spring-mockbean-annotation/&quot;&gt;https://howtodoinjava.com/spring-boot2/testing/spring-mockbean-annotation/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/mock/mockito/MockBean.html&quot;&gt;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/mock/mockito/MockBean.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 30 May 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2020/05/30/Use-MockBean-Test.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2020/05/30/Use-MockBean-Test.html</guid>
        
        <category>Spring</category>
        
        <category>Mockito</category>
        
        <category>Integration</category>
        
        <category>Test</category>
        
        
        <category>Spring</category>
        
      </item>
    
  </channel>
</rss>