<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Green Frog Developer</title>
    <description>오늘보다 나은 내일을 위해 변화를 꿈꾸는 개발자입니다.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 02 Sep 2020 18:37:56 +0900</pubDate>
    <lastBuildDate>Wed, 02 Sep 2020 18:37:56 +0900</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>[Operating System - Chapter 1] 운영체제란 무엇인가?</title>
        <description>&lt;p&gt;이 포스팅은 공룡책 알려진 Operating System Concepts의 1장을 공부하면서 정리한 포스팅이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;11-운영체제란-무엇인가&quot;&gt;1.1 운영체제란 무엇인가?&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;11-운영체제가-할-일-what-operating-systems-do&quot;&gt;1.1 운영체제가 할 일 (What Operating Systems Do)&lt;/h3&gt;

&lt;p&gt;컴퓨터 시스템은 다음 그림처럼 대게 네 가지 구성요소인 &lt;strong&gt;하드웨어, 운영체제, 응용 프로그램, 사용자&lt;/strong&gt;로 구분할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-1.png&quot; style=&quot;width:30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;운영체제는 다양한 사용자를 위해 다양한 응용 프로그램 간의 하드웨어 사용을 제어하고 조종한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;운영체제는 항상 실행 중인 &lt;strong&gt;커널(Kernel)&lt;/strong&gt;과 응용 프로그램 개발을 쉽게 하고 기능을 제공하는 미들웨어 프레임워크 및 시스템 실행 중에 시스템 관리하는데 도움이 되는 &lt;strong&gt;시스템 프로그램(System Program)&lt;/strong&gt;이 포함된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;일반적으로 항상 실행되는 프로그램을 &lt;strong&gt;커널(Kernel)&lt;/strong&gt;이라고 한다,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;12-컴퓨터-시스템의-구성-computer-system-organization&quot;&gt;1.2 컴퓨터 시스템의 구성 (Computer System Organization)&lt;/h3&gt;

&lt;p&gt;현대의 범용 컴퓨터 시스템은 하나 이상의 CPU와 구성요소와 공유 메모리 사이의 액세스를 제공하는 &lt;strong&gt;공통 버스(bus)&lt;/strong&gt;를 통해 연결된 여러 장치 컨트롤러로 구성된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-2.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일반적으로 운영체제에는 각 장치 컨트롤러마다 &lt;strong&gt;장치 드라이버&lt;/strong&gt;가 있다. 이 장치 드라이버는 장치 컨트롤러의 작동을 잘 알고 있고 나머지 운영체제에 장치에 대한 일관된 &lt;strong&gt;인터페이스(명세)를 제공&lt;/strong&gt;한다. CPU와 장치 컨트롤러는 병렬로 실행되어 &lt;u&gt;메모리 사이클을 놓고 경쟁&lt;/u&gt;한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;장치 드라이버/제어기 또는 디바이스 드라이버&lt;/strong&gt;는 특정 하드웨어나 장치를 제어하기 위한 &lt;u&gt;커널의 일부분으로 동작하는 프로그램&lt;/u&gt;이다.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;컴퓨터를 구성하는 다양한 입출력 장치마다 각각 장치드라이버가 프로그램 되어 커널에 통합되어 실행된다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;높은 수준의 컴퓨터 프로그램들이 컴퓨터 하드웨어 장치와 상호 작용하기 위해 만들어진 하나의 컴퓨터 프로그램이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;121-인터럽트-interrupts&quot;&gt;1.2.1 인터럽트 (Interrupts)&lt;/h4&gt;

&lt;p&gt;하드웨어는 어느 순간이든 시스템 버스를 통해 CPU에 신호를 보내 &lt;strong&gt;인터럽트&lt;/strong&gt;를 발생시킬 수 있다.&lt;/p&gt;

&lt;p&gt;CPU가 인터럽트 되면 CPU는 하던 일을 중단하고 즉시 고정된 위치로 실행을 옮긴다. 이러한 고정된 위치는 일반적으로 &lt;strong&gt;인터럽트를 위한 서비스 루틴&lt;/strong&gt;이 위치한 시작 주소를 가지고 있다. 그리고 인터럽트 서비스 루틴이 실행된다. 인터럽트 서비스 루틴이 실행이 완료되면, CPU는 &lt;strong&gt;인터럽트 되었던 연산을 재개&lt;/strong&gt;한다. 다음의 그림은 인터럽트 연산의 시간 일정이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-3.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일반적으로 인터럽트 서비스 루틴의 주소가 들어 있는 포인터 테이블은 하위 메모리(첫 100개 정도의 위치)에 저장된다.&lt;/p&gt;

&lt;p&gt;장치 컨트롤러가 인터럽트 요청 라인에 신호를 선언하여 인터럽트를 &lt;strong&gt;발생(raise)&lt;/strong&gt;시키고 CPU는 인터럽트를 &lt;strong&gt;포착(catch)&lt;/strong&gt;하여 인터럽트 핸들러로 &lt;strong&gt;디스패치(dispatch)&lt;/strong&gt;하고 핸들러는 장치를 서비스하여 인터럽트를 &lt;strong&gt;지운다(clear)&lt;/strong&gt;. 이 기본 인터럽트 기법은 &lt;strong&gt;비동기 이벤트에 CPU가 대응&lt;/strong&gt;할 수 있게 한다.&lt;/p&gt;

&lt;p&gt;인터럽트는 &lt;strong&gt;마스크 불가능 인터럽트(nonmaskable interrupt)&lt;/strong&gt;와 &lt;strong&gt;마스킹 가능(maskable interrupt)&lt;/strong&gt; 인터럽트로 나뉜다.&lt;/p&gt;

&lt;h4 id=&quot;122-저장장치-구조-storage-structure&quot;&gt;1.2.2 저장장치 구조 (Storage Structure)&lt;/h4&gt;

&lt;p&gt;CPU는 메모리에서만 명령을 적재할 수 있으므로 실행하려면 &lt;strong&gt;프로그램을 먼저 메모리에 적재&lt;/strong&gt;해야 한다.&lt;/p&gt;

&lt;p&gt;범용 컴퓨터는 프로그램 대부분을 &lt;strong&gt;메인 메모리(Random-Access Memory : RAM)&lt;/strong&gt;라 불리는 재기록 가능한 메모리에서 가져온다.&lt;/p&gt;

&lt;p&gt;모든 형태의 메모리는 바이트의 배열을 제공한다. 각 바이트는 자신의 주소를 가지고 있다. 상호 작용은 특정 메모리 주소들에 대한 일련의 적재(load), 또는 저장(store)명령을 통하여 이루어진다.&lt;/p&gt;

&lt;p&gt;대부분의 컴퓨터 시스템은 메인 메모리의 확장으로 &lt;strong&gt;보조저장장치&lt;/strong&gt;를 제공한다. 보조저장장치의 주요 요건은 대량의 데이터를 영구히 보존할 수 있어야 한다는 점이다. 가장 일반적인 보조저장장치는 &lt;u&gt;하드 디스크 드라이브(HDD)와 비휘발성 메모리(NVM)&lt;/u&gt;로, 프로그램과 데이터 모두를 위한 저장소를 제공한다.&lt;/p&gt;

&lt;p&gt;대부분의 프로그램은 메모리에 적재될 때까지 보조저장 장치를 사용한다. 보조저장장치는 메인 메모리보다 훨씬느리기 때문에, 보조저장장치의 올바른 관리는 컴퓨터 시스템에서 매우 중요하다.&lt;/p&gt;

&lt;p&gt;다른 장치에 저장된 자료의 백업 사본을 저장하기 위해 특수 목적으로만 사용하기에 매우 느리고 충분히 큰 장치를 &lt;strong&gt;3차 저장장치&lt;/strong&gt;라고 한다.&lt;/p&gt;

&lt;p&gt;다양한 저장장치 시스템은 저장 용량 및 액세스 시간에 따라 다음 그림과 같이 계층 구조로 구성될 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-4.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;캐시&lt;/strong&gt;는 두 구성요소 간에 액세스 시간이나 전송 속도의 차이가 큰 경우 성능을 향상하기 위해 설치할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;123-입출력-구조-io-structure&quot;&gt;1.2.3 입출력 구조 (I/O Structure)&lt;/h4&gt;

&lt;p&gt;운영체제 코드의 상당 부분은 시스템의 안정성과 성능에 대한 중요성과 장치의 다양한 특성으로 인해 &lt;strong&gt;I/O 관리&lt;/strong&gt;에 할애된다.&lt;/p&gt;

&lt;p&gt;인터럽트 구동 I/O의 형태는 소량의 데이터를 이동하는 데는 좋지만 NVS(비휘발성 저장장치) I/O와 같은 대량 데이터 이동에 사용될 때 &lt;strong&gt;높은 오버헤드&lt;/strong&gt;를 유발할 수 있다. 이 문제를 해결하기 위해서 &lt;strong&gt;Direct Memory Access(DMA)&lt;/strong&gt;가 사용된다.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;장치에 대한 버퍼 및 포인터, 입출력 카운트를 세팅한 후 장치 제어기는 CPU의 개입 없이 메모리로부터 자신의 버퍼 장치로 또는 버퍼로부터 메모리로 데이터 블록 전체를 전송한다.&lt;/u&gt; 이 경우 &lt;u&gt;블록 전송이 완료될 때마다 인터럽트가 발생&lt;/u&gt;한다.&lt;/p&gt;

&lt;p&gt;아래의 그림은 DMA를 사용하는 현대 컴퓨터의 작동방식에 대해서 설명한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-5.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;몇몇 고가의 시스템은 버스 대신에 &lt;strong&gt;스위치 구조&lt;/strong&gt;를 사용한다. 이러한 시스템에서는 공유 버스를 사용하기 위한 사이클을 경쟁하지 않고 다수의 구성요소가 다른 구성요소들과 동시에 통신하는 것이 가능하다. 이 경우 DMA의 사용은 더욱 효과적이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;13-컴퓨터-시스템-구조-computer-system-architecture&quot;&gt;1.3 컴퓨터 시스템 구조 (Computer SYstem Architecture)&lt;/h3&gt;

&lt;p&gt;컴퓨터 시스템은 사용된 범용 처리기의 수에 따라 분류 가능한 다양한 방식으로 구성될 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;131-단일-처리기-시스템-single-processor-system&quot;&gt;1.3.1 단일 처리기 시스템 (Single Processor System)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Single Processor System이란 하나의 Processor를 포함하는 컴퓨터 시스템을 말한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Single Processor System은 일반적으로 단일 처리 코어를 가진 범용 CPU가 하나만 있는 단일 프로세서 시스템의 경우가 대부분이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;코어&lt;/strong&gt;는 명령을 실행하고 로컬로 데이터를 저장하기 위한 레지스터를 포함하는 구성요소이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;132-다중-처리기-시스템-multi-processor-systems&quot;&gt;1.3.2 다중 처리기 시스템 (Multi Processor Systems)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Multi Processor System 이란 두 개 이상의 Processor를 포함하는 컴퓨터 시스템을 말한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음 그림은 단일 코어 CPU가 있는 두 개의 프로세서로 구성된 시스템을 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-6.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로세서는 컴퓨터 버스 및 때때로 클록, 메모리 및 주변 장치를 공유한다.&lt;/p&gt;

&lt;p&gt;Multi Processor system의 주요 장점은 &lt;strong&gt;처리량(Throughput)증가&lt;/strong&gt; 이다. 즉, 프로세서 수를 늘리면 더 적은 시간에 더 많은 작업을 수행할 수 있다.&lt;/p&gt;

&lt;p&gt;가장 일반적인 다중 처리기 시스템은 각 &lt;strong&gt;피어 CPU 프로세스가 운영체제 기능 및 사용자 프로세스를 포함한 모든 작업을 수행하는 SMP(symmetric multiprocessing)&lt;/strong&gt;를 사용한다. 이 모델의 장점은 성능을 크게 저하하지 않으면서 N개의 프로세스를 실행할 수 있다. &lt;u&gt;그러나 CPU가 독립적이기 때문에 하나는 유휴 상태이고 다른 하나는 과부하가 걸려서 비효율적일 수 있다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;MultiProcessor의 정의는 시간이 지남에 따라 발전해 왔으며 이제는 여러개의 컴퓨팅 코어가 단일 칩에 상주하는 &lt;strong&gt;다중 코어&lt;/strong&gt;시스템을 포함한다. Processor 내의 통신이 Processor 간의 통신보다 빠름으로 다중 코어 시스템은 단일 코어를 가지는 여러 Processor보다 효율적일 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;컴퓨터 시스템 구성요소 정의&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt; - 명령을 실행하는 하드웨어&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Processor&lt;/strong&gt; - 하나 이상의 CPU를 포함하는 물리적 칩&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Core&lt;/strong&gt; - CPU의 기본 계산 단위&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;MultiCore&lt;/strong&gt; - 동일한 CPU에 여러 컴퓨팅 코어를 포함함.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;MultiProcessor&lt;/strong&gt; - 여러 프로세서를 포함함.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Multi Processor에 작고 빠른 로컬 버스를 통해 액세스 되는 자체 로컬 메모리를 제공하고 모든 CPU가 &lt;strong&gt;공유 시스템 연결&lt;/strong&gt;로 연결되어 모든 CPU가 하나의 물리 주소 공간을 공유하는 &lt;strong&gt;NUMA(non-uniform memory access)&lt;/strong&gt;라고 하는 이 방법은 CPU가 로컬 메모리에 액세스 할 때 빠를 뿐만 아니라 시스템 상호 연결에 대한 경합도 없다는 장점이 있다.&lt;/p&gt;

&lt;p&gt;NUMA Multi Processor Structure은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-7.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하지만 NUMA 시스템의 잠재적 단점은 CPU가 시스템 상호 연결을 통해 원격 메모리에 액세스해야 할 때 지연 시간이 증가하여 성능 저하가 발생할 수 있다는 점이다.&lt;/p&gt;

&lt;p&gt;마지막으로 &lt;strong&gt;블레이드 서버&lt;/strong&gt;는 &lt;u&gt;다수의 Processor Board, I/O Board, Networking Board들이 하나의 chassis안에 장착되는 형태&lt;/u&gt;를 가진다. 블레이드 서버와 전통적인 다중 처리기 시스템과의 차이점은 각 블레이드-처리기 보드는 독립적으로 부팅될 수 있고 자기 자신의 운영체제를 수행한다는 것이다.&lt;/p&gt;

&lt;h4 id=&quot;131-클러스터형-시스템-clustered-systems&quot;&gt;1.3.1 클러스터형 시스템 (Clustered Systems)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;클러스터 시스템은 둘 이상의 독자적 시스템 또는 노드들을 연결하여 구성한다는 점에서 Multiprocessor 시스템과 차이가 있다.&lt;/strong&gt; &lt;u&gt;각 노드는 통상 다중 코어 시스템이고, 그러한 시스템은 약결합(loosely coupled)이라고 간주된다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;클러스터링은 통상 &lt;strong&gt;높은 가용성(availability)&lt;/strong&gt;을 제공하기 위해 사용된다, &lt;u&gt;즉, 클러스터 내 하나 이상의 컴퓨터 시스템이 고장 나더라도 서비스는 계속 제공된다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;일반적으로 높은 가용성은 시스템에 중복 기능을 추가함으로써 얻어지고, 클러스터 소프트웨어 중 한 층이 클러스터 노드에서 실행된다. 각 노드는 하나 이상의 다른 노드(네트워크로 연결되어 있는)들을 감시한다. 만일 감시받던 노드가 고장 나면 감시하던 노드가 고장 난 노드의 저장장치에 대한 소유권을 넘겨받고, 그 노드에서 실행 중이던 응용프로그램을 다시 시작한다. 이로써 사용자와 응용 프로그램의 클라이언트는 잠깐의 서비스 중단만을 경험하게 된다.&lt;/p&gt;

&lt;p&gt;클러스터링은 &lt;strong&gt;비대칭형 클러스터링&lt;/strong&gt;과 &lt;strong&gt;대칭형 클러스터링&lt;/strong&gt;이 존재한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;비대칭형 클러스터링&lt;/strong&gt; : 다른 컴퓨터들이 응용 프로그램을 실행하는 동안 한 컴퓨터는 &lt;u&gt;긴급 대기(hot-standby) 모드&lt;/u&gt; 상태를 유지한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;대칭형 클러스터링&lt;/strong&gt; : 둘 이상의 호스트들이 응용 프로그램을 실행하고 서로를 감시한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;한 클러스터가 네트워크로 연결된 다수의 컴퓨터 시스템으로 구성되므로 클러스터는 &lt;strong&gt;고성능 계산환경&lt;/strong&gt;을 제공하도록 사용될 수 있다. 이러한 시스템은 클러스터 내의 모든 컴퓨터에서 Application을 병렬 수행할 수 있으므로 Singleprocessor나 SMP(symmetric multiprocessing) 시스템보다 훨씬 큰 계산 능력을 제공할 수 있다.&lt;/p&gt;

&lt;p&gt;다른 형태의 클러스터로 &lt;strong&gt;병렬 클러스터&lt;/strong&gt;와 &lt;strong&gt;WAN을 이용한 클러스터링&lt;/strong&gt;이 있다.&lt;/p&gt;

&lt;p&gt;아래의 그림은 &lt;strong&gt;스토리지 전용 네트워크(storage-area network, SAN)&lt;/strong&gt;를 이용하는 클러스터 시스템의 일반적인 구조를 설명하는 그림이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-8.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;HADOOP&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Hadoop은 단순하고 저렴한 하드웨어 구성요소를 포함하는 클러스터형 시스템에서 빅데이터의 분산 처리에 사용되는 공개 소프트웨어 프레임워크이다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Hadoop은 단일 시스템에서 수천 개의 컴퓨팅 노드를 포함하는 클러스터로 확장되도록 설계되었다.&lt;/p&gt;

  &lt;p&gt;작업은 클러스터의 노드에 할당되며 Hadoop은 노드 간 통신을 정렬하여 처리할 병렬 계산을 관리하고 결과를 통합한다. Hadoop은 또한 노드의 장애를 감지하고 관리하여 효율적이고 매우 안정적인 &lt;strong&gt;분산 컴퓨팅 서비스&lt;/strong&gt;를 제공한다.&lt;/p&gt;

  &lt;p&gt;Hadoop은 다음 세 가지 구성요소로 구성된다.&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;분산 컴퓨팅 노드에서 데이터와 파일을 관리하는 분산 파일 시스템.&lt;/li&gt;
    &lt;li&gt;YARN(“Yet Another Resource Negotiator”) 프레임워크는 클러스터 내의 자원을 관리하고 클러스터의 노드에 작업을 스케줄 한다.&lt;/li&gt;
    &lt;li&gt;MapReducd 시스템은 클러스터의 노드에서 데이터를 병렬 처리할 수 있게 한다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;14-운영체제의-작동-operating-system-operations&quot;&gt;1.4 운영체제의 작동 (Operating-System Operations)&lt;/h3&gt;

&lt;p&gt;컴퓨터의 전원을 켜거나 재부팅 할 때와 같이 컴퓨터를 실행하려면 초기 프로그램을 실행해야 한다. 이 초기 프로그램(부트스트랩 프로그램)은 단순한 형태를 띠는 경향이 있고, 일반적으로 컴퓨터 하드웨어 내에 펌웨어로 저장된다.&lt;/p&gt;

&lt;p&gt;부트스트랩 프로그램은 운영체제를 적재하는 방법과 해당 시스템 실행을 시작하는 방법을 알아야 하고, &lt;strong&gt;이 목표를 달성하려면 부트스트랩 프로그램이 운영체제 커널을 찾아 메모리에 적재해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;커널이 적재되어 실행되면 시스템과 사용자에게 서비스를 제공할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;일부 서비스는 커널이 실행되는 전체 시간 동안 실행되는 &lt;strong&gt;시스템 데몬&lt;/strong&gt;이 되기 위해 부팅할 때 메모리에 적재되는 시스템 프로그램에 의해 커널 외부에서 제공된다.&lt;/p&gt;

&lt;p&gt;시스템이 완전히 부팅되면 어떤 이벤트가 발생할 때까지 기다린다. 이벤트는 거의 &lt;strong&gt;인터럽트&lt;/strong&gt;를 발생시켜 신호를 보내고, 이 인터럽트의 종류로는 하드웨어 인터럽트, 트랩, 오류, 소프트웨어 인터럽트등으로 구분될 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;141-다중-프로그래밍과-다중-태스킹-multiprogramming-and-multitasking&quot;&gt;1.4.1 다중 프로그래밍과 다중 태스킹 (multiprogramming and multitasking)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;다중 프로그래밍(multiprogramming)은 CPU가 항상 한 이상의 프로그램을 실행할 수 있도록하여 CPU 이용률을 높이고 사용자의 만족도를 높이는 프로그래밍.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;다중 프로그래밍 시스템에서 실행 중인 프로그램을 &lt;strong&gt;프로세스(process)&lt;/strong&gt;라고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;운영체제는 다음 그림과 같이 여러 프로세스를 동시에 메모리에 유지한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-9.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;운영체제는 이러한 프로세스 중 하나를 선택하여 실행하기 때문에 특정 프로세스가 다른 프로세스의 작업이 완료되기를 기다려야 할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;다중 태스킹(multitasking)은 다중 프로그래밍의 논리적 확장이다. multitasking 시스템에서 CPU는 여러 프로세스를 전환하며 프로세스를 실행하지만 전환이 자주 발생하여 사용자에게 빠른 응답 시간을 제공하게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;여러 프로세스를 병행하게 실행하려면 프로세스 스케줄링, 디스크 저장장치 및 메모리 관리를 포함하여 운영체제의 모든 단계에서 서로 영향을 미치는 기능이 제한되어야 한다.&lt;/p&gt;

&lt;h4 id=&quot;142-이중-모드와-다중모드-운용-dualmode-and-multimode-operation&quot;&gt;1.4.2 이중-모드와 다중모드 운용 (Dualmode and Multimode Operation)&lt;/h4&gt;

&lt;p&gt;운영체제는 적어도 두 개의 독립된 연산 모드, 즉 &lt;strong&gt;사용자 모드&lt;/strong&gt;와 &lt;strong&gt;커널 모드&lt;/strong&gt;를 필요로 한다. 이 모드 비트(mode bit)는 하나의 비트가 현재의 모드를 나타내기 위해 컴퓨터의 하드웨어에 추가되었다.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;모드 비트의 사용으로 운영체제를 위하여 실행되는 작업과 사용자를 위해 실행되는 작업을 구분할 수 있게 되었다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;즉, 사용자 Application이 운영체제로부터 서비스를 요청하면(시스템 콜) 이 요청을 수행하기 위해서는 사용자 모드에서 커널 모드로 전환해야 한다. 이 그림은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-10.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;위와 같은 이중 모드는 잘못된 사용자로부터 운영체제를, 그리고 잘못된 사용자 서로를 보호하는 방법을 제공한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이중 모드 이외의 모드는 Intel Processor에 4개의 모드가 존재하고, ARMv8 시스템에는 7가지의 모드가 있다.&lt;/p&gt;

&lt;p&gt;가상화를 지원하는 CPU는 종종 &lt;strong&gt;VMM(virtual Machine Manager)&lt;/strong&gt;이 시스템을 제어하는 시점을 표시하기 위한 별도의 모드를 가진다. 이 모드에서 VMM은 사용자 프로세스보다 많은 권한을 가지지만 커널보다는 적은 권한을 가진다.&lt;/p&gt;

&lt;p&gt;Microsoft Windows, Unix, Linux와 같은 대부분의 최신 운영체제는 이중 모드 기능을 활용하고 운영체제를 보다 강력하게 보호한다.&lt;/p&gt;

&lt;h4 id=&quot;143-타이머-timer&quot;&gt;1.4.3 타이머 (Timer)&lt;/h4&gt;

&lt;p&gt;우리는 사용자 프로그램이 무한루프(infinite loop)에 빠지거나 시스템 서비스 호출에 실패하여, 제어가 운영체제로 복귀하지 않는 경우가 없도록 반드시 방지해야 한다. 해당 목적을 달성하기 위해 우리는 &lt;strong&gt;타이머(Timer)&lt;/strong&gt;를 사용할 수 있다. &lt;u&gt;타이머는 지정된 시간 후 컴퓨터를 인터럽트 하도록 설정할 수 있다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;이 시간은 고정 혹은 가변 일 수 있으며, 가변 타이머는 일반적으로 고정률의 클록(fixed-rate clock)과 계수기로 구현된다.&lt;/p&gt;

&lt;p&gt;사용자에게 제어를 양도하기 전에, 운영체제는 타이머가 인터럽트를 할 수 잇도록 설정되었는지를 확인하고. 타이머의 값을 변경하는 명령은 명백히 특권 명령이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;15-자원-관리-resource-management&quot;&gt;1.5 자원 관리 (Resource Management)&lt;/h3&gt;

&lt;p&gt;운영체제는 &lt;strong&gt;자원 관리자&lt;/strong&gt;이다. &lt;u&gt;시스템의 CPU, 메모리 공간, 파일-저장 공간, I/O 장치&lt;/u&gt;는 운영체제가 관리해야 하는 자원에 속한다.&lt;/p&gt;

&lt;h4 id=&quot;151-프로세스-관리-process-management&quot;&gt;1.5.1 프로세스 관리 (Process Management)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;프로세스는 자기 일을 수행하기 위해 CPU 시간, 메모리, 파일, 그리고 입출력 장치를 포함한 여러 가지 자원을 필요로 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;프로그램 그 자체는 프로세스가 아니며 즉, 하나의 프로그램은 디스크에 저장된 파일의 내용과 같이 수동적(passive) 개체지만 프로세스는 다음 수행할 명령을 지정하는 프로그램 카운터(program counter)를 가진 능동적(active)인 개체이다.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;시스템은 프로세스의 집합으로 구성되는데, 프로세스 중 일부는 운영체제 프로세스들(시스템 코드를 수행하는 프로세스들)이며, 나머지는 사용자 프로세스들(사용자 코드를 수행하는 프로세스들)이다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;운영체제는 프로세스 관리와 연관해 다음과 같은 활동에 대해 책임을 진다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용자 프로세스와 시스템 프로세스의 생성과 제거&lt;/li&gt;
  &lt;li&gt;CPU에 프로세스와 스레드 스케줄하기&lt;/li&gt;
  &lt;li&gt;프로세스의 일시 중지와 재수행&lt;/li&gt;
  &lt;li&gt;프로세스 동기화를 위한 기법 제공&lt;/li&gt;
  &lt;li&gt;프로세스 통신을 위한 기법 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;152-메모리-관리-memory-management&quot;&gt;1.5.2 메모리 관리 (Memory Management)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;메인 메모리는 CPU와 입출력 장치에 의하여 공유되는, 빠른 접근이 가능한 데이터 저장소이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;프로그램이 수행되기 위해서는 반드시 절대 주소로 매핑(mapping)되고 메모리에 적재되어야 한다. CPU 이용률과 사용자에 대한 컴퓨터의 응답 속도를 개선하기 위해, 우리는 메모리에 여러 개의 프로그램을 유지해야 하며 이를 위해서 &lt;strong&gt;메모리 관리 기법&lt;/strong&gt;이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;운영체제는 메모리 관리와 관련하여 다음과 같은 일을 담당해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메모리의 어느 부분이 현재 사용되고 있으며 어느 프로세스에 의해 사용되고 있는지를 추적해야 한다.&lt;/li&gt;
  &lt;li&gt;필요에 따라 메모리 공간을 할당하고 회수해야 한다.&lt;/li&gt;
  &lt;li&gt;어떤 프로세스(또는 그 일부)들을 메모리에 적재하고 제거할 것인가를 결정해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;153-파일-시스템-관리-file-system-management&quot;&gt;1.5.3 파일 시스템 관리 (File-System Management)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;운영체제는 저장장치의 물리적 특성을 추상화하여 논리적인 저장 단위인 파일을 정의한다.&lt;/strong&gt; 운영체제는 파일을 물리적 매체로 매핑하며, 저장장치를 통해 이들 파일에 접근한다.&lt;/p&gt;

&lt;p&gt;파일은 파일 생성자에 의해 정의된 관련 정보의 집합체이다. 일반적으로 파일은 프로그램(소스와 목적 프로그램 형태)과 데이터를 나타낸다.&lt;/p&gt;

&lt;p&gt;운영체제는 대량 저장 매체와 그것을 제어하는 장치를 관리함으로써 파일의 추상적인 개념을 구현한다. 또한, 파일은 사용하기 쉽도록 통상 디렉터리들로 구성된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;운영체제는 파일 관리를 위하여 다음과 같은 일을 담당한다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;파일의 생성 및 제거&lt;/li&gt;
  &lt;li&gt;디렉터리 생성 및 제거&lt;/li&gt;
  &lt;li&gt;파일과 디렉터리를 조작하기 위한 프리미티브의 제공&lt;/li&gt;
  &lt;li&gt;파일을 보조저장장치로 매핑&lt;/li&gt;
  &lt;li&gt;안정적인(비휘발성) 저장 매체에 파일을 백업&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;154-대용량-저장장치-관리-mass-storage-management&quot;&gt;1.5.4 대용량 저장장치 관리 (Mass Storage Management)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;컴퓨터 시스템은 메인 메모리를 백업하기 위해 보조저장장치(HDD, NVM, …)를 제공해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;운영체제는 보조저장장치 관리와 관련하여 다음 활동을 책임진다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;마운팅과 언마운팅&lt;/li&gt;
  &lt;li&gt;사용 가능 공간(free-space)의 관리&lt;/li&gt;
  &lt;li&gt;저장장소 할당&lt;/li&gt;
  &lt;li&gt;디스크 스케줄링&lt;/li&gt;
  &lt;li&gt;저장장치 분할&lt;/li&gt;
  &lt;li&gt;보호&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;마운팅(Mounting) : 해당 파일 시스템이 디렉토리(마운트 지점)에 연결되어 시스템에서 사용될 수 있게 만드는 작업&lt;/p&gt;

  &lt;p&gt;언마운팅(Unmounting) : 해당 파일 시스템의 마운트 지점 연결을 끊어 시스템에서 사용할 수 없게 하는 작업.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;155-캐시-관리-cache-management&quot;&gt;1.5.5 캐시 관리 (Cache Management)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;캐시는 컴퓨터 과학에서 데이터나 값을 미리 복사해 놓는 임시장소를 가리킨다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;캐싱은 컴퓨터 시스템의 중요한 원리이다. 정보는 통산 어떤 저장장치에 보관된다. 정보가 사용됨에 따라, 더 빠른 장치인 캐시에 일시적으로 복사된다. 그러므로 우리가 특정 정보가 필요할 경우, 우리는 먼저 캐시에 그 정보가 있는지를 조사해 보아야 한다. 만약 캐시에 있으면 우리는 그 정보를 캐시로부터 직접 사용하지만, 만일 캐시에 없다면 메인 메모리 시스템으로부터 그 정보를 가져와서 사용해야 하며, 이 때 이 정보가 다음에 곧 다시 사용될 확률이 높다는 가정하에 캐시에 넣는다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;캐시 크기가 제한되어 있으므로 캐시 관리는 중요한 설계 문제이다. 캐시 크기와 교체 정책을 신중하게 선택하면 성능이 크게 향상될 수 있다.&lt;/p&gt;

&lt;p&gt;한 캐시에 있는 A 값이 갱신될 경우 A가 존재하는 모든 캐시에 즉각적으로 반영되어야 하는 &lt;strong&gt;캐시 일관성 문제&lt;/strong&gt;도 고려 대상이다.&lt;/p&gt;

&lt;h4 id=&quot;156-입출력-시스템-관리-io-systems-management&quot;&gt;1.5.6 입출력 시스템 관리 (I/O Systems Management)&lt;/h4&gt;

&lt;p&gt;운영체제 목적 중의 하나는 사용자에게 특정 하드웨어 장치의 특성을 숨기는 것이다. 단지 장치 드라이버만이 자신에게 지정된 특정 장치의 특성을 알고 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;입출력 시스템은 다음과 같이 구성되어 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;버퍼링, 캐싱, 스풀링을 포함한 메모리 관리 구성요소&lt;/li&gt;
  &lt;li&gt;일반적인 장치 드라이버 인터페이스&lt;/li&gt;
  &lt;li&gt;특정 하드웨어 장치들을 위한 드라이버&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;16-보안과-보호-security-and-protection&quot;&gt;1.6 보안과 보호 (Security and Protection)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;보호(protection)란 컴퓨터 시스템이 정의한 자원에 대해 프로그램, 프로세스 또는 사용자들의 접근을 제어하는 기법이다.&lt;/strong&gt; 이 기법은 시행될 제어에 대한 명세와 이들을 강제 시행하는 방법을 규정하는 수단을 반드시 제공해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;보안 기능은 외부 또는 내부의 공격을 방어하는 기능이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;시스템의 모든 사용자를 구분하기 위해 &lt;u&gt; 사용자 식별자, 그룹 식별자, 유효 사용자 식별자&lt;/u&gt;가 존재한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;17-가상화-virtualization&quot;&gt;1.7 가상화 (Virtualization)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;가상화는 단일 컴퓨터(CPU, 메모리, 디스크 드라이브, 네트워크 인터페이스 카드 등)의 하드웨어를 &lt;u&gt;여러 가지 실행 환경으로 추상화&lt;/u&gt;하여 개별 환경이 자신만의 컴퓨터에서 실행되고 있다는 환상을 만들 수 있는 기술이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;가상화는 운영체제가 다른 운영체제 내에서 하나의 Application처럼 수행될 수 있게 한다.&lt;/p&gt;

&lt;p&gt;넓게 말하면 가상화 소프트웨어는 에뮬레이션을 포함하는 클래스의 구성원이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어로 컴퓨터 하드웨어 시뮬레이션 하는 &lt;strong&gt;에뮬레이션&lt;/strong&gt;은 일반적으로 소스 CPU 유형이 대상 CPU 유형과 다른 경우에 사용된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;가상화에서는 특정 CPU를 위해 컴파일된 운영체제가 동일 CPU용의 다른 운영체제 내에서 수행된다.&lt;/p&gt;

&lt;p&gt;아래 그림은 하나의 운영체제와 3개의 가상 머신을 실행시키는 컴퓨터를 나타내는 그림이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-11.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다수운영체제를 위해 소프트웨어를 작성하는 회사는 가상화를 이용하여 하나의 물리 서버를 이용하여 이들 모든 운영체제를 수행하여, 개발, 테스팅, 디버깅을 수행할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;18-분산-시스템-distributed-systems&quot;&gt;1.8 분산 시스템 (Distributed Systems)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;분산 시스템은 물리적으로 떨어져 있는 이기종 컴퓨터들의 집합이다.&lt;/strong&gt; 분산 시스템의 컴퓨터들은 사용자가 시스템 내의 다양한 자원들을 접근할 수 있도록 &lt;strong&gt;네트워크로 연결&lt;/strong&gt;되어 있다.&lt;/p&gt;

&lt;p&gt;네트워크는 가장 단순하게 보면 두 개 이상 시스템 간의 통신 경로이다. &lt;strong&gt;분산 시스템의 많은 기능은 네트워킹에 의존하고 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TCP/IP가 가장 일반적인 네트워크 프로토콜로 인터넷의 기본 구조를 제공하며, 대부분의 운영체제는 TCP/IP를 지원한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;네트워크는 노드 간의 거리에 의해 유형이 결정된다. 유형은 근거리 통신망(LAN), 광역 통신망(WAN), 도시권 통신망(MAN), 단거리 통신망(PAN)으로 분류할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;19-커널-자료구조-kernel-data-structures&quot;&gt;1.9 커널 자료구조 (Kernel Data Structures)&lt;/h3&gt;

&lt;p&gt;운영체제에서 광범위하게 사용되는 다수의 기본 자료구조에 대해서 간략히 설명하도록 하겠다.&lt;/p&gt;

&lt;h4 id=&quot;191-리스트-스택-및-큐-lists-stacks-queues&quot;&gt;1.9.1 리스트, 스택 및 큐 (Lists, Stacks, Queues)&lt;/h4&gt;

&lt;p&gt;배열의 각 항은 직접 접근할 수 있으나 리스트의 항들은 특정 순서로 접근해야 한다. &lt;strong&gt;즉 리스트는 데이터 값들의 집단을 하나의 시퀀스로 표현한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 구조를 구현하는 가장 일반적인 방법이 &lt;strong&gt;연결 리스트(Linked List)&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;Linked List는 3개로 분류할 수 있으며 이는 &lt;strong&gt;Singly Linked List, Doubly Linked List, Circularly Linked List&lt;/strong&gt; 다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Singly Linkend List에서 각 Element는 후속 Element를 가르킨다. 그림은 다음과 같다.
&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-12.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Doubly Linked List에서 한 Element는 자신의 앞 항이나 뒷 항을 가리킨다. 그림은 다음과 같다.
&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-13.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Doubly Linked List에서 마지막 Element는 첫 Element를 가리킨다. 그림은 다음과 같다.
&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-14.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Linked List의 장점&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;가변 수의 항들을 수용하며 항의 삭제와 삽입이 쉽다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Linked List의 단점&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;길이가 n인 리스트에서 특정 항을 Fetch할 때 성능이 선형, 즉 &lt;strong&gt;O(n)&lt;/strong&gt;이라는 점이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;스택(Stack)은 순차적 순서를 가진 자료구조로 항을 넣거나 꺼내는데 후입선출(last in first out, LIFO)를 사용한다.&lt;/strong&gt; 스택에 항을 삽입하거나 인출하는 일은 각각 &lt;strong&gt;푸쉬(push)&lt;/strong&gt; 또는 &lt;strong&gt;팝(pop)&lt;/strong&gt;이라 부른다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;큐(Queue)는 순차 순서의 자료구조로 선입선출(first in first out, FIFO)을 사용한다.&lt;/strong&gt; 각 항은 삽입된 순서대로 큐로부터 제거된다.&lt;/p&gt;

&lt;h4 id=&quot;192-트리-trees&quot;&gt;1.9.2 트리 (Trees)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;트리(Tree)는 데이터의 서열을 표시하는데 사용 가능한 자료구조이다.&lt;/strong&gt; 트리 구조에서 데이터 값들은 &lt;strong&gt;부모-자식 관계&lt;/strong&gt;로 연결된다.&lt;/p&gt;

&lt;p&gt;트리의 종류 중 일부는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일반 트리(General Tree) : 부모 노드는 임의의 수의 자식 노드를 가질 수 있다.&lt;/li&gt;
  &lt;li&gt;이진 트리(Binary Tree) : 부모 노드는 최대 두 개의 자식 노드를 가질 수 있다.&lt;/li&gt;
  &lt;li&gt;이진 탐색 트리(Binary Search Tree) : 이진 트리에 추가적인 조건으로 좌측 자식 노드 &amp;lt;= 우측 자식 노드의 순서를 요구한다.&lt;/li&gt;
  &lt;li&gt;균형 이진 탐색 트리(Balanced Binary Search Tree) : 좌측과 우측 자식 트리간에 균형있는 높이를 가지도록 하는 조건이 생긴 이진 탐색 트리&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;193-해시-함수와-맵-hash-functions-and-maps&quot;&gt;1.9.3 해시 함수와 맵 (Hash Functions and Maps)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;해시 함수(Hash Function)는 데이터를 입력으로 받아 이 데이터에 산술 연산을 수행하여 하나의 수를 반환한다.&lt;/strong&gt; 이 수는 그 데이터를 인출하기 위해 &lt;u&gt;테이블의 인덱스&lt;/u&gt;로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;해시 함수를 사용하여 데이터를 인출할 경우 걸리는 시간이 &lt;strong&gt;O(1)&lt;/strong&gt;만큼 좋을 수도 있으며 이는 상세 구현에 좌우된다.&lt;/p&gt;

&lt;p&gt;해시 함수의 이슈 중 하나는 두 개의 서로 다른 입력이 하나의 출력 값을 가질 수 있다는 것이다. 이를 우리는 &lt;strong&gt;해시 충돌(hash collision)&lt;/strong&gt;이라고 한다.&lt;/p&gt;

&lt;p&gt;해시 함수의 한 용도는 &lt;strong&gt;해시 맵(Hash Map)&lt;/strong&gt;을 구현하는 일이다. 해시 맵은 해시 함수를 사용하여 [키:값]을 매핑시킨다.&lt;/p&gt;

&lt;p&gt;아래의 그림은 해시 맵의 예시 이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-15.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;194-비트맵-bitmaps&quot;&gt;1.9.4 비트맵 (Bitmaps)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;비트맵(Bitmaps)은 n개의 항의 상태를 나타내는 데 사용 가능한 n개의 이진 비트의 스트링이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;비트맵은 대량의 자원의 가용성을 표시할 때 일반적으로 사용된다. (ex. 디스크 드라이브)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ex) 001011101&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;110-계산-환경-computing-environments&quot;&gt;1.10 계산 환경 (Computing Environments)&lt;/h3&gt;

&lt;p&gt;다양한 계산 환경에서 운영체제가 어떻게 사용되는지 살펴보겠다.&lt;/p&gt;

&lt;h4 id=&quot;1102-모바일-컴퓨팅-mobile-computing&quot;&gt;1.10.2 모바일 컴퓨팅 (Mobile Computing)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;모바일 컴퓨팅은 휴대용 스마트폰과 태블릿 컴퓨터의 컴퓨팅 환경을 말한다.&lt;/strong&gt; 이들 장치들은 이동 가능하고 가볍다는 구별되는 물리적 특징을 공유한다.&lt;/p&gt;

&lt;p&gt;온라인 서비스에 접근을 허용하기 위해 휴대장치는 전형적으로 IEEE 표준 802.11 무선 또는 휴대 전화 데이터망을 사용한다.&lt;/p&gt;

&lt;p&gt;현재 휴대 컴퓨팅에서 두 개의 지배적인 운영체제는 &lt;strong&gt;Apple iOS&lt;/strong&gt;와 &lt;strong&gt;Google Android&lt;/strong&gt;이다.&lt;/p&gt;

&lt;h4 id=&quot;1103-클라이언트-서버-컴퓨팅-client-server-computing&quot;&gt;1.10.3 클라이언트 서버 컴퓨팅 (Client-Server Computing)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;현대 네트워크 구조는 서버 시스템이 클라이언트 시스템이 생성한 요청을 만족시키는 배치를 특징으로 한다.&lt;/strong&gt; 클라이언트-서버 시스템이라고도 불리는 이 형태의 특수 분산 시스템은 아래의 그림과 같은 일반적인 구조를 갖는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-16.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;서버 시스템은 대체적으로 계산 서버와 파일 서버로 분류될 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;계산-서버 시스템&lt;/strong&gt;은 클라이언트가 어떤 작업을 요청할 인터페이스를 제공한다. 그 결과로 서버는 그 작업을 수행하고 결과를 클라이언트에게 돌려보낸다. (ex. 데이터베이스 서버)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;파일-서버 시스템&lt;/strong&gt;은 클라이언트가 파일을 생성, 갱신, 읽기 및 제거할 수 있는 파일 시스템 인터페이스를 제공한다. (ex. 웹 서버)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1104-피어-간-계산-peer-to-peer-computing&quot;&gt;1.10.4 피어 간 계산 (Peer to Peer Computing)&lt;/h4&gt;

&lt;p&gt;이 모델에서는 클라이언트와 서버가 서로 구별되지 않고, &lt;strong&gt;시스템상의 모든 노드가 피어로 간주되고 각 피어는 서비스를 요청하느냐 제공하느냐에 따라 클라이언트 및 서버로 동작한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;클라이언트 서버 시스템에서는 서버가 병목으로 작용하지만, 피어 간 시스템에서는 서비스가 네트워크에 분산된 여러 노드에 의해 제공될 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ex) Skype가 제공하는 IP상 음성 서비스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;1105-클라우드-컴퓨팅-cloud-computing&quot;&gt;1.10.5 클라우드 컴퓨팅 (Cloud Computing)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;클라우드 컴퓨팅은 계산, 저장장치는 물론 Application조차도 네트워크를 통한 서비스로 제공하는 Computing Type이다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ex) Amazon의 Elastic Compute Cloud(EC2)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;클라우드 컴퓨팅의 유형 중 일부 소개&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;공중 클라우드 - 서비스를 위해 지불 가능한 사람은 누구나 인터넷을 통해 사용 가능한 클라우드&lt;/li&gt;
  &lt;li&gt;사유 클라우드 - 한 회사가 사용하기 위해 운영하는 클라우드&lt;/li&gt;
  &lt;li&gt;혼합형 클라우드 - 공공과 사유 부분을 모두 포함하는 크랄우드&lt;/li&gt;
  &lt;li&gt;소프트웨어 서비스(software as a service, SaaS) - 인터넷을 통해 사용 가능한 하나 이상의 Application
    &lt;ul&gt;
      &lt;li&gt;
        &lt;blockquote&gt;
          &lt;p&gt;ex) Word Process, Spread Sheets&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;플랫폼 서비스(platform as a service, PaaS) - 인터넷을 통해 사용하도록 Application에 맞게 준비된 소프트웨어 스택
    &lt;ul&gt;
      &lt;li&gt;
        &lt;blockquote&gt;
          &lt;p&gt;ex) Database Server, Jenkins Server, …&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;하부구조 서비스(infrastructure as a service, IaaS) - 인터넷을 통해 사용가능한 서버나 저장장치
    &lt;ul&gt;
      &lt;li&gt;
        &lt;blockquote&gt;
          &lt;p&gt;ex) 생산 데이터의 백업 복사본을 만들기 위한 저장장치&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;클라우드 컴퓨팅 환경은 다수 유형의 조합을 제공하기 때문에 이들 클라우드 컴퓨팅의 유형들은 서로 독립적이 아니다.&lt;/p&gt;

&lt;p&gt;다음의 그림은 IaaS를 제공하는 Public Cloud를 보여준다. 클라우드 서비스와 클라우드 사용자 인터페이스가 모두 방화벽에 의해 보호되는 것에 유의하자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/computer-science/what-is-the-operating-system-17.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1106-실시간-내장형-시스템-real-time-embedded-systems&quot;&gt;1.10.6 실시간 내장형 시스템 (Real-Time Embedded Systems)&lt;/h4&gt;

&lt;p&gt;내장형(Embedded) 시스템은 현재 가장 유행하는 컴퓨터의 형태이다. 이 장치들은 아주 특정한 작업만을 수행하는 경향이 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;내장형 시스템은 거의 언제나 실시간 운영체제를 수행한다. 실시간 시스템은 Processor의 작동이나 데이터의 흐름에 엄격한 시간 제약이 있을 때 사용된다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;111-무료-및-공개-소스-운영체제-free-and-open-source-operating-systems&quot;&gt;1.11 무료 및 공개 소스 운영체제 (Free and Open Source Operating Systems)&lt;/h3&gt;

&lt;h4 id=&quot;1112-무료-운영체제-free-operating-systems&quot;&gt;1.11.2 무료 운영체제 (Free Operating Systems)&lt;/h4&gt;

&lt;p&gt;소프트웨어 사용 및 재배포를 제한하려는 움직임에 대응하기 위해 1984년 Richard Stallman은 GNU라는 무료 UNIX 호환 운영체제(“GNU’s Not Unix!”의 약어)를 개발하기 시작하였다.&lt;/p&gt;

&lt;p&gt;자유 소프트웨어 운동은 사용자에게 다음의 4가지 자유를 보장시키기 위해 시행되었다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;자유롭게 소프트웨어를 실행시킬 권리&lt;/li&gt;
  &lt;li&gt;소스 코드를 분석하고 수정할 권리&lt;/li&gt;
  &lt;li&gt;코드 수정 없이 배포하거나 판매할 권리&lt;/li&gt;
  &lt;li&gt;코드를 수정하여 배포하거나 판매할 권리&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;1113-gnulinux&quot;&gt;1.11.3 GNU/Linux&lt;/h4&gt;

&lt;p&gt;GNU/Linux 운영체제(커널만 말할 때는 Linux라고 하지만 GNU 도구를 포함한 전체 운영체제는 GNU/Linux라고 부름)는 시스템의 수백 가지의 고유한 배포판 또는 사용자 맞춤 빌드를 생성하였다.&lt;/p&gt;

&lt;p&gt;주요 배포판에는 Red Hat, SUSE, Fedora, Debian, Slackware, Ubuntu가 있다.&lt;/p&gt;

&lt;h4 id=&quot;1114-bsd-unix&quot;&gt;1.11.4 BSD Unix&lt;/h4&gt;

&lt;p&gt;BSD UNIX는 Linux보다 오래되고 복잡한 역사를 가지고 있다. 1978년에 AT&amp;amp;T의 파생물로 출발하였다.&lt;/p&gt;

&lt;p&gt;macOS의 핵심 커널 구성요소인 Darwin은 BSD UNIX에 기반을 두고 잇으며 역시 공개 소스화 되어 있다.&lt;/p&gt;

&lt;h4 id=&quot;1115-solaris&quot;&gt;1.11.5 Solaris&lt;/h4&gt;

&lt;p&gt;Solaris는 Sun Microsystems사의 Unix 기반 상용 운영체제이다.&lt;/p&gt;

</description>
        <pubDate>Fri, 21 Aug 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/computer-science(cs)/2020/08/21/What-is-The-Operating-System.html</link>
        <guid isPermaLink="true">http://localhost:4000/computer-science(cs)/2020/08/21/What-is-The-Operating-System.html</guid>
        
        <category>Operating-System</category>
        
        <category>OS</category>
        
        <category>CS</category>
        
        <category>Computer</category>
        
        
        <category>Computer-Science(CS)</category>
        
      </item>
    
      <item>
        <title>Spring Security를 적용한 Spring MVC Controller 단위 테스트 </title>
        <description>&lt;p&gt;이번 포스팅에서는 &lt;strong&gt;Spring Security를 적용한 Spring MVC Controller 단위 테스트&lt;/strong&gt;에 대해서 알아보도록 하겠다!!&lt;/p&gt;

&lt;p&gt;Controller를 테스트하는데 사용한 테스트 프레임워크는 &lt;strong&gt;JUnit 5&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;p&gt;프로젝트 빌드 툴로 maven을 사용하고 있으며, 테스트를 위해서 pom.xml에 추가할 의존성은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.security&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-security-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 테스트와 관련된 프로젝트 의존성을 pom.xml에 추가 했으면 이제 Spring Security를 적용한 Spring MVC Controller 단위 테스트에 대해서 알아보자!!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;controller&quot;&gt;Controller&lt;/h2&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MemberController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DirectoryService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;directoryService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;memberService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;objectMapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root-directory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ApiImplicitParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Access_Token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRootDirectories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@AuthenticationPrincipal&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonProcessingException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findMemberByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DirectoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryDtoList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDirectoryDTOs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryDtoList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NO_CONTENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeValueAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryDtoList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;내가 테스트 할 Controller의 Handler Method는 &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /root-directory&lt;/code&gt;를 처리하는 메소드이다.&lt;/p&gt;

&lt;p&gt;이 Handler Method를 테스트하기 위해서 생기는 Test Cases는 2개로 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Member의 Root Directory가 존재하는 Case Test&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Member의 Root Directory가 존재하지 않는 Case Test&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;여기서 Root Directory란 Member에 속해있는 가장 상위의 Directory를 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Mock 객체를 사용해서 Controller 단위 테스트를 진행할 것이기 때문에, 여기까지만 Controller를 설명하도록 하겠다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;controller-test&quot;&gt;Controller Test&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Controller Unit Test 코드는 다음과 같다.&lt;/p&gt;

&lt;p&gt;(Test 코드 작성시 다양한 라이브러리의 API를 사용하는데 다양한 클래스에 동일한 이름을 가진 Method가 많아 독자가 더 쉽게 해당 Static Method를 식별할 수 있도록 일부러 import Statement는 지우지 않았다)&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.fasterxml.jackson.databind.ObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;econo.webper.server.directory.DirectoryCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;econo.webper.server.directory.DirectoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;econo.webper.server.directory.dto.DirectoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.jupiter.api.extension.ExtendWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.test.mock.mockito.MockBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.security.test.context.support.WithUserDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.test.context.ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.test.context.junit.jupiter.SpringExtension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.test.context.web.WebAppConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.test.web.servlet.MockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ArgumentMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MockMvcRequestBuilders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MockMvcResultHandlers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MockMvcResultMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@ExtendWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringExtension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@WebAppConfiguration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AutoConfigureMockMvc&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberControllerTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EMAIL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a@a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NAME&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PASSWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DIRECTORY_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DIRECTORY_TITLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PARENT_DIRECTORY_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@MockBean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@MockBean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;멤버에 Root Directory가 존재하는 경우 테스트&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@WithUserDetails&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRootDirectoryTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;DirectoryDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryDTO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DIRECTORY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DIRECTORY_TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BLOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PARENT_DIRECTORY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findMemberByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDirectoryDTOs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root-directory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DIRECTORY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DIRECTORY_TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].category&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DirectoryCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BLOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].parentDirectoryId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PARENT_DIRECTORY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;멤버에 Root Directory가 존재하지 않는 경우 테스트&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@WithUserDetails&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNonRootDirectoryTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DirectoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonElementList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findMemberByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDirectoryDTOs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonElementList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root-directory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNoContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;controllertest-클래스에-붙은-애노테이션-설명&quot;&gt;ControllerTest 클래스에 붙은 애노테이션 설명&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;@ExtendWith(SpringExtension.class)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Spring TestContext Framework를 JUnit5의 jupiter programming model에 통합해주는 애노테이션이다.&lt;/li&gt;
      &lt;li&gt;RestController와 같은 Spring Bean을 테스트하기 위해서는 꼭 필요한 애노테이션이다.&lt;/li&gt;
      &lt;li&gt;위의 애노테이션 이외에도 SpringExtension을 JUnit에 적용하려면 &lt;strong&gt;@SpringJUnitConfig&lt;/strong&gt; 또는 &lt;strong&gt;@SpringJUnitWebConfig&lt;/strong&gt; 와 같은 애노테이션을 붙여주면 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@ContextConfiguration&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;테스트를 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationContext&lt;/code&gt;를 설정하고 로드하는 방법을 정의하는데 사용되는 메타데이터를 정의한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;@ContextConfiguration&lt;/strong&gt;은 Context를 로드하는데 사용되는 Application Context Resource &lt;code class=&quot;highlighter-rouge&quot;&gt;locations&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;classes&lt;/code&gt; component를 선언한다.
        &lt;ul&gt;
          &lt;li&gt;ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;@ContextConfiguration(classes = {MemberController.class, ObjectMapper.class})&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;@ContextConfiguration(locations=&quot;applicationContext.xml&quot;)&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;@ContextConfiguration&lt;/strong&gt;은 ContextLoader 전략도 선언할 수 있습니다.
        &lt;ul&gt;
          &lt;li&gt;ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;@ContextConfiguration(locations = &quot;/test-context.xml&quot;, loader = CustomContextLoader.class)&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@WebAppConfiguration&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;테스트를 위해 로드된 &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationContext&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;WebApplicationContext&lt;/code&gt;가 되어야 함을 선언하는 애노테이션 입니다.
        &lt;ul&gt;
          &lt;li&gt;WebApplicationContext란 ApplicationContext를 상속하는 Context이며, 주로 web application에서 사용된다. 주로 web과 연관된 구성요소들(controller, view resolver, …)등을 다루는 기능을 제공한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;테스트 클래스에 &lt;code class=&quot;highlighter-rouge&quot;&gt;@WebAppConfiguration&lt;/code&gt;이 있을 경우, WebApplicationContext가 테스트를 위해 로드되었음을 보장합니다.&lt;/li&gt;
      &lt;li&gt;웹 어플리케이션에 대한 디폴트 루트 경로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;file:src/main/webapp&lt;/code&gt;입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@AutoConfigureMockMvc&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;자동으로 MockMvc를 사용해서 테스트할 수 있게끔 설정해주는 애노테이션
        &lt;ul&gt;
          &lt;li&gt;MockMvc는 브라우저에서 요청과 응답을 의미하는 객체로서 Controller 테스트를 용이하게 해주는 라이브러리이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ControllerTest Class에 붙여진 애노테이션에 대해서 알아보았음으로, 구체적으로 어떻게 Controller Unit Test를 작성했는지에 대해서 알아보자!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MemberController Bean은 DirectoryService Bean, MemberService Bean, ObjectMapper Bean으로 이루어져 있다.&lt;/strong&gt; 나는 MemberController Bean 자체만 테스트 하고 싶기 때문에, DirectoryService Bean과 MemberService Bean을 테스트 할 필요가 없다.&lt;/p&gt;

&lt;p&gt;그래서 DirectoryService Bean과 MemberService Bean은 MemberController Bean생성시 @MockBean을 통해서 Mock객체로써 받았다.&lt;/p&gt;

&lt;p&gt;그렇다면 &lt;strong&gt;왜 ObjectMapper Bean은 @MockBean을 통해서 Mock 객체로써 받지 않았는가?&lt;/strong&gt; 라는 질문을 할 수 있다.&lt;/p&gt;

&lt;p&gt;이에 대한 나의 답변은 &lt;strong&gt;Mock 객체는 일반적으로 테스트를 위해 메소드의 리턴 값을 내가 정의한대로 사용하기 위해 사용하는데, ObjectMapper Bean과 같은 경우에는 해당 Bean 자체의 기존 메소드 Return값을 사용해야 했기 때문에 @MockBean으로써 의존성을 받지 않았고, ApplicationContext내에서 관리하는 실제 ObjectMapper Bean 객체를 주입 받았다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이로써 MemberController 구성을 완료 했고, 이를 실제 테스트 해 보도록 하겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1-멤버에-root-directory가-존재하는-case-test&quot;&gt;1. 멤버에 Root Directory가 존재하는 Case Test&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;멤버에 Root Directory가 존재하는 경우 테스트&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@WithUserDetails&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRootDirectoryTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;DirectoryDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directoryDTO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DIRECTORY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DIRECTORY_TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BLOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PARENT_DIRECTORY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findMemberByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDirectoryDTOs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root-directory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DIRECTORY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DIRECTORY_TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].category&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DirectoryCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BLOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$[0].parentDirectoryId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PARENT_DIRECTORY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MockMvc를 통해서 MemberController 테스트를 진행했으며, Spring Security Filter로부터 인증을 통과하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;@WithUserDetails&lt;/code&gt; 애노테이션을 사용했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you want to see the Detaild Information of &lt;code class=&quot;highlighter-rouge&quot;&gt;@WithUserDetails&lt;/code&gt;, See &lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.3.5.BUILD-SNAPSHOT/reference/html5/#test-method-withuserdetails&quot;&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;처음에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@WithUserDetails&lt;/code&gt;를 사용하는 주 목적인 인증된 User별로 요청에 응답을 보내는 Controller를 테스트 하면 어떨까? 생각 했지만, 이는 Security 뿐만 아니라 DB와도 관련된 테스트를 하는 것이기 때문에, 점점 Controller 단위 테스트가 통합 테스트로 변화하고 있다는 느낌을 받아서, &lt;strong&gt;테스트 대상 User를 인증된 사용자(User)라고 가정하&lt;/strong&gt;고 Controller 테스트를 진행했다.&lt;/p&gt;

&lt;p&gt;멤버에 Root Directory가 존재하는 경우 Controller의 Handler Method는 response로 body에 Root Directory의 json 데이터가 담겨져 있음으로 이를 테스트 하기위해서 jsonPath를 사용했다.&lt;/p&gt;

&lt;h4 id=&quot;2-멤버에-root-directory가-존재하지-않는-case-test&quot;&gt;2. 멤버에 Root Directory가 존재하지 않는 Case Test&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;멤버에 Root Directory가 존재하지 않는 경우 테스트&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@WithUserDetails&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNonRootDirectoryTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singletonList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DirectoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonElementList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findMemberByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDirectoryDTOs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonElementList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/root-directory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNoContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;멤버에 Root Directory가 존재하지 않는 Case의 경우도 1번 Case와 동일하게 MockMvc와 @WithUserDetails를 사용해서 테스트를 진행하였다.&lt;/p&gt;

&lt;p&gt;멤버에 Root Directory가 존재하지 않는 경우 Handler Method는 Response Body에 어떠한 Json Data도 보내지않고 Http 상태 코드로 204번(NO CONTENT)를 보내주기 때문에 이를 테스트 했다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;테스트-결과&quot;&gt;테스트 결과&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;위의 방식대로 테스트 한 결과 2개의 Test Cases가 멋지게 &lt;strong&gt;pass&lt;/strong&gt;된 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Test-Spring-MVC-Controller-Applying-Spring-Security-1.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;이-테스트를-기반으로-junit5를-활용한-테스트에-대해-전체적인-개념을-알게-되었고-통합-테스트와-단위-테스트의-차이에-대해서-잘-알게-되었다&quot;&gt;이 테스트를 기반으로 JUnit5를 활용한 테스트에 대해 전체적인 개념을 알게 되었고, 통합 테스트와 단위 테스트의 차이에 대해서 잘 알게 되었다.&lt;/h4&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;reference&quot;&gt;Reference&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.3.3.BUILD-SNAPSHOT/reference/html5/&quot;&gt;Spring Security Doc&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/testing.html&quot;&gt;Spring Framework Testing Doc&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 18 Aug 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2020/08/18/Test-Spring-MVC-Controller-Applying-Spring-Security.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2020/08/18/Test-Spring-MVC-Controller-Applying-Spring-Security.html</guid>
        
        <category>Spring</category>
        
        <category>Security</category>
        
        <category>MVC</category>
        
        <category>Controller</category>
        
        <category>Unit</category>
        
        <category>Test</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>첫 3계층 웹 프로젝트를 진행하면서 느낀 클린 코드에 관한 생각</title>
        <description>&lt;p&gt;오늘은 &lt;strong&gt;첫 3계층 웹 프로젝트(Static Server - Api Server - Database)&lt;/strong&gt;를 진행하면서 느낀 &lt;strong&gt;클린 코드에 관한 나의 생각&lt;/strong&gt;을 공유하고자 포스팅 하게 되었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2020년도 4월 초부터 진행한 &lt;strong&gt;webper 프로젝트&lt;/strong&gt;&lt;a href=&quot;https://github.com/JNU-econovation/webper&quot;&gt;(Github저장소)&lt;/a&gt;는 &lt;strong&gt;Api 서버로 spring boot&lt;/strong&gt;를 사용하고 있고, &lt;strong&gt;클라이언트에게는 React기반의 View를 서비스할 Static Server를 두고 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;우리 팀은 &lt;u&gt;프론트 앤드 개발자 2명과 백 앤드 개발자 1명&lt;/u&gt;으로 구성되어 있는데, 프론트 앤드 개발자 중 한명은 휴학생 이다.&lt;/p&gt;

&lt;p&gt;휴학을 하신 프론트 앤드 개발자 분(이하 A)께서는 휴학을 하시다 보니, 학기 중에 다른 팀원에 비해서 상대적으로 시간이 많았다.&lt;/p&gt;

&lt;p&gt;클라이언트의 개발 속도가 Api서버의 개발 속도보다 훨씬 빨랏고 결국, &lt;strong&gt;A는 테스트 서버(데이터만 주고 받을)를 직접 만들어 나름 데이터를 정의해 개발을 진행&lt;/strong&gt;했다.&lt;/p&gt;

&lt;p&gt;학기가 끝난 후, A는 잠깐 서울에 가게 되고, 백앤드 개발자(이하 ‘나’) 와 또 다른 프론트 개발자(이하 B)만 남게 되었다.&lt;/p&gt;

&lt;p&gt;나는 Api서버에 Spring Security를 사용해 인증 까지는 구현했으나, 그 이후로는 진행이 많이 되지는 않은 상황이었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;나는 A가 서울에 가기전에 적어주고 떠난 데이터 명세 ppt를 보고 클라이언트 쪽 프로세스를 유추해 가면서 객체 지향적으로 api 서버를 구축 하기 위해 노력하였다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래 그림은 A가 건내준 데이터 명세 ppt의 일부이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/My-Thought-On-First-3Tier-Web-Project-1.png&quot; style=&quot;width:50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A가 없는 3주의 시간동안 나름 객체 지향적으로 api서버를 구축하였고, 문서화 및 CI/CD도 진행하였다.&lt;/p&gt;

&lt;p&gt;A가 돌아오고 난 후, 우리 팀은 프로젝트를 마무리 짓기 위해 백과 프론트 사이에 통신을 주고 받았고 이 과정에서 정말 자잘한 이슈가 계속 생겼다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;대부분의 이슈는 프론트 단에서 특정 api를 사용하기 위해 A가 원하는 요청과 응답이 내가 api서버를 구현하면서 생각했던 요청과 응답이 아닌 것이다…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;프론트 앤드에서 서버의 특정 api 사용시 나름 고정된 프로세스가 있는 것 같아 보였지만(Redux 패턴 때문?), A가 서울 가기 전에 보내준 데이터 명세에는 이러한 내용이 존재하지 않았기 때문에 나는 이러한 프로세스를 전혀 고려하지 않고 Api 서버를 구축했다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;발생한 이슈 중 가장 큰 문제는 Java의 ORM 명세인 JPA를 구현하는 Hibernate를 사용하는 Spring api 서버의 특정 api에서 A가 원하는 응답을 제공하기 위해서는 아주 더러운 코드를 짜거나, 도메인 내부 설계를 변경하지 않으면 불가능 하다는 것이었다…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그래서 나는 선택 해야 했다….&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;도메인 설계를 변경하면 전체적으로 엄청난 코드 변화를 유발할 텐데.. 프로젝트 마감이 3일 남은 이 시점에서 위와 같은 수고로움 에도 불구하고 객체 지향적인 코드를 작성할 건지..&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;많은 시간과 노력이 드는 객체 지향적인 코드는 좀 미뤄두고… 일단 프론트가 원하는 api 응답을 구현을 위해서 더러운 코드를 작성할 것인지…&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;결국에 나는 2번을 선택했지만, &lt;strong&gt;왜 현업에서 클린코드를 강조하지만, 정작 클린코드를 실현하지 못하는지 알 것 같다….&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;매일 변경되는 요구사항 속에 우리는 객체 지향적인 코드를 선택할 것인지 아니면 빠른 기능 구현을 선택하고 다른 부분에 더 집중할 것인지… 동아리 선배가 말한 것처럼 개발은 매 순간 trade-off 관계 인 것 같다.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;객체-지향에-있어서-가장-중요한-것은-기존의-요구사항을-만족하면서-미래에-변화될지도-모르는-요구사항에-유연하게-대처하고-적응할-수-있는-설계를-구현하는-것이-매우-중요한-것-같다&quot;&gt;객체 지향에 있어서 가장 중요한 것은, 기존의 요구사항을 만족하면서 미래에 변화될지도 모르는 요구사항에 유연하게 대처하고, 적응할 수 있는 설계를 구현하는 것이 매우 중요한 것 같다.&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;동아리 선배님의 조언 (현 11번가 개발자)&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/citerus/dddsample-core&quot;&gt;https://github.com/citerus/dddsample-core&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;시간 날 때 Import 받아서 쭉 읽어보자!! (DDD 관련 내용)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;이번 프로젝트 마감(동아리 성과발표)을 끝내고 webper 프로젝트를 다시 TDD 기반으로 리팩토링 해봐야 겠다.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Jul 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/cleancode/2020/07/29/My-Thought-On-First-3Tier-Web-Project.html</link>
        <guid isPermaLink="true">http://localhost:4000/cleancode/2020/07/29/My-Thought-On-First-3Tier-Web-Project.html</guid>
        
        <category>Spring</category>
        
        <category>JPA</category>
        
        <category>Hibernate</category>
        
        <category>OOP</category>
        
        <category>CleanCode</category>
        
        
        <category>CleanCode</category>
        
      </item>
    
      <item>
        <title>Jackson Infinite Recursion Issue With JPA Entity</title>
        <description>&lt;p&gt;이번 포스팅에서는 프로젝트 진행 중 &lt;strong&gt;JPA Entity 객체를 JSON으로 Serialize시킬 때 발생하는 Jackson Infinite Recursion Issue&lt;/strong&gt;에 대해서 알아보고 이를 어떻게 해결했는지에 대해서 포스팅 하도록 하겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;jpa-entity-json-serialize&quot;&gt;JPA Entity JSON Serialize&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;JSON으로 Serialize하고 싶은 JPA Entity Class는 다음과 같다. &lt;strong&gt;[Self Reference]&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryCategory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childDirectories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Spring MVC Handler Method에서 ResponseEntity를 사용해 위의 Entity 객체를 JSON으로 Serialize하는 중에 다음과 같은 예외&lt;u&gt;(Infinite Recursion : StackOverflowError)&lt;/u&gt;가 발생했다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;로그(log)는 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError); nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain&lt;/strong&gt;: econo.webper.server.directory.Directory[“childDirectories”]-&amp;gt;org.hibernate.collection.internal.PersistentBag[0]-&amp;gt;econo.webper.server.directory.Directory[“parentDirectory”]-&amp;gt;econo.webper.server.directory.Directory[“childDirectories”]-&amp;gt;org.hibernate.collection.internal.PersistentBag[0]-&amp;gt;econo.webper.server.directory.Directory[“parentDirectory”]-&amp;gt;econo.webper.server.directory.Directory[“childDirectories”]-&amp;gt;org.hibernate.collection.internal.PersistentBag[0]-&amp;gt;econo.webper.server.directory.Directory[“parentDirectory”]-&amp;gt;econo.webper.server.directory.Directory[“childDirectories”]-&amp;gt; ….&lt;strong&gt;(계속 반복)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 로그(log)를 간단히 설명하면!! &lt;strong&gt;ResponseEntity는 기본적으로 Jackson 라이브러리를 사용해서 Object를 JSON데이터로 변환해주는데, 위의 Directory 클래스의 객체를 JSON데이터로 변환하기 위해 &lt;u&gt;해당 객체의 childDirectories필드를 참조&lt;/u&gt;하게 되고 이는 &lt;u&gt;Hibernate가 제공하는 원본 컬렉션을 감싼 래퍼 컬렉션인 PersistentBag&lt;/u&gt;을 가리킨다. -&amp;gt; 다음으로는 첫 번째 원소인 &lt;u&gt;PersistentBag[0](Directory 클래스를 감싼 래퍼 클래스 객체)를 참조&lt;/u&gt;하고 -&amp;gt; 이후 래퍼 클래스 객체인 &lt;u&gt;PersistentBag[0](Directory 클래스 객체)의 필드인 ParentDirectory(Directory 클래스 객체)를 참조&lt;/u&gt;하게 된다. -&amp;gt; 다시 &lt;u&gt;parentDirectory(Directory 객체)의 childDirectores필드를 참조&lt;/u&gt;하게 되며 -&amp;gt; 로그에서 보여진 것처럼 위의 프로세스가 &lt;u&gt;무한루프&lt;/u&gt;의 형태로 발생해 StackOverflowError가 발생한다..&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;jpa-entity-간에-양방향-관계가-존재할-때만-infinite-recursion이-생기는-줄-알았는데-위의-entity-클래스와-같이-jpa-entity가-self-reference를-하는-경우도-infinite-recursion이-발생할-수-있다는-사실을-알게-되었다&quot;&gt;JPA Entity 간에 양방향 관계가 존재할 때만 Infinite Recursion이 생기는 줄 알았는데, 위의 Entity 클래스와 같이 JPA Entity가 Self Reference를 하는 경우도 Infinite Recursion이 발생할 수 있다는 사실을 알게 되었다.&lt;/h4&gt;

&lt;p&gt;우리는 위의 &lt;strong&gt;Infinite Recursion 이슈를 해결하기 위해 &lt;u&gt;3가지 방법&lt;/u&gt;&lt;/strong&gt;을 사용할 수 있다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;[사용] JPA Entity 클래스 내에 Jackson 애노테이션을 위치시키는 방법.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;@JsonIgnore, @JsonManagedReference, @JsonBackReference, @JsonIdentityInfo, …&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ResponseDTO를 만들어 Persistent Object의 데이터를 주입시키는 방법&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Self Reference하는 Persistent Object를 JSON으로 Serialize할 때 Infinite Recursion이 발생하는 것이기 때문에 이를 해결하기 위해 Response용 DTO를 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Custom Serializer를 만들어 사용하는 방법.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;ResponseEntity에 기본으로 제공되는 Jackson 라이브러리의 Databinding을 사용하지 않고 직접 Serializer를 만들어 Infinite Recursion이 일어나지 않도록 Serialize하는 방법&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 방법 이외에도 다양한 방법들이 많겠지만, 나는 &lt;strong&gt;1번&lt;u&gt;(JPA Entity 클래스 내에 Jackson 애노테이션을 위치시키는 방법)&lt;/u&gt;을 사용&lt;/strong&gt;했다.&lt;/p&gt;

&lt;p&gt;이번 포스팅에서는 내가 사용한 방법인 JPA Entity 클래스 내에 Jackson 애노테이션을 위치시켜 Infinite Recursion을 해결하는 방법에 대해서 주로 설명하겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;jpa-entity내에-jackson-애노테이션을-위치시켜-infinite-recursion-issue를-해결하는-방법&quot;&gt;JPA Entity내에 Jackson 애노테이션을 위치시켜 Infinite Recursion Issue를 해결하는 방법&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;1-jsonignore를-사용해서-infinite-recursion-해결하는-방법&quot;&gt;1. @JsonIgnore를 사용해서 Infinite Recursion 해결하는 방법&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;@JsonIgnore 란?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Serialization(Object -&amp;gt; JSON) 및 Deserialization(JSON -&amp;gt; Object)에 사용되는 논리적 속성을 무시하는데 사용된다.&lt;/li&gt;
  &lt;li&gt;보통 field, getter, setter에 사용하는 애노테이션이다.&lt;/li&gt;
  &lt;li&gt;@JsonIgnore를 활성화시킬 수 있는 Value를 속성으로 가지고 있으며, Default는 true이고 false일 시 @JsonIgnore가 비활성화 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonIgnore&lt;/code&gt;를 Directory 클래스의 &lt;strong&gt;parentDirectory 또는 childDirectories필드에 다음과 같이 적용&lt;/strong&gt;하면 Infinite Recursion을 끊을 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryCategory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@JsonIgnore&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childDirectories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Directory Test Object를 생성해 JSON Serialize한 결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Jackson-Infinite-Recursion-Issue With-JPA-Entity-1.png&quot; style=&quot;width:40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이 애노테이션은 Infinite Recursion 문제를 쉽게 해결하지만, Directory 객체의 parentDirectory라는 필드를 Serialize 및 Deserialize하지 않기 때문에 parentDirectory필드 데이터를 Client가 요구할 시 응답할 수 없다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-jsonmanagedreference-jsonbackreference를-사용해서-infinite-recursion-해결하는-방법&quot;&gt;2. @JsonManagedReference, @JsonBackReference를 사용해서 Infinite Recursion 해결하는 방법&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;@JsonManagedReference, @JsonBackReference란?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;서로 대응되는 엔티티간의 match되는 properties 쌍의 부모/자식 관계를 표현하고 처리하기위해 사용되어지는 &lt;strong&gt;Pair of Annotation&lt;/strong&gt;이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonManagedReference&lt;/code&gt; 애노테이션이 붙여진 필드는 &lt;strong&gt;the forward part of the reference(parent)&lt;/strong&gt;라고 하며 JSON으로 Serialize되고, &lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonBackReference&lt;/code&gt; 애노테이션이 붙여진 필드는 &lt;strong&gt;the back part of the reference(child)&lt;/strong&gt;라고 하며 JSON으로 Selialize되지 않습니다. &lt;strong&gt;즉, the back part of the reference가 Serialize되지 않음으로 Infinite Recursion이 발생하지 않습니다.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonManagedReference, @JsonBackReference&lt;/code&gt;를 Directory 클래스의 &lt;strong&gt;parentDirectory 또는 childDirectories필드에 다음과 같이 적용&lt;/strong&gt;하면 Infinite Recursion을 끊을 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryCategory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@JsonBackReference&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@JsonManagedReference&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childDirectories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Directory Test Object를 생성해 JSON Serialize한 결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Jackson-Infinite-Recursion-Issue With-JPA-Entity-1.png&quot; style=&quot;width:40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Directory Entity가 양방향 관계라면 2개의 Entity의 모든 필드 중에서 하나의 필드만 Serialize되지 않겠지만, 우리는 하나의 Entity내에 Self Reference가 존재하기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonBackReference&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonManagedReference&lt;/code&gt;의 조합이 Serialize측면에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonIgnore&lt;/code&gt;과 동일한 역할을 하게된다. &lt;strong&gt;(즉 Entity내의 하나의 필드는 무조건 Serialize되지 않는다.)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonBackReference&lt;/code&gt;가 붙여진 필드(parentDirectory)의 데이터가 필요한 Client의 입장에서는 데이터를 사용할 수 없음으로 제한이 걸린다.&lt;/p&gt;

&lt;h3 id=&quot;3-jsonidentifyinfo를-사용해서-infinite-recursion을-해결하는-방법&quot;&gt;3. @JsonIdentifyInfo를 사용해서 Infinite Recursion을 해결하는 방법&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;@JsonIdentifyInfo 란?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Serialize / Deserialize 할 때 객체 대신 객체 ID가 사용됨을 나타내는데 사용되어지는 class/property 애노테이션이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 애노테이션은 cyclic object graphs와 directed-acyclic graphs를 올바르게 처리하는데 사용되어질 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonIdentifyInfo&lt;/code&gt;를 Directory 클래스에 다음과 같이 적용하면 Infinite Recursion을 끊을 수 있다.&lt;/p&gt;

&lt;p&gt;object identifier를 property에 대한 id값을 사용해서 생성하고 싶다면, 다음과 같이 generator속성 값에 ObjectIdGenerators.PropertyGenerator.class를 주어야하고, property속성 값에 id를 주어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JsonIdentityInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectIdGenerators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PropertyGenerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DirectoryCategory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childDirectories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Default&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Directory Test Object를 생성해 JSON Serialize한 결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Jackson-Infinite-Recursion-Issue With-JPA-Entity-3.png&quot; style=&quot;width:40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Infinite Recursion Issue가 해결 되었고, parentDirectory는 해당 객체의 Id Property값을 통해서 Directory와의 연결관계도 식별 가능하다!!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ParentDirectory의 Field 전부를 Json으로 Serialize해서 사용할 이유가 없기 때문에 @JsonIdentifyInfo 애노테이션이 가장 적합하고, 추가적으로 ParentDirectory의 필드 전부를 JSON Serialize해서 사용할 필요가 있다면, Response DTO를 만들어줘도 좋을 것 같다.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;entity를-json으로-serialize하는데-생기는-infinite-recursion-이슈를-해결하는-더-많은-방법이-궁금하다면-httpswwwbaeldungcomjackson-bidirectional-relationships-and-infinite-recursion-를-참조하면-더-많은-키워드-및-설명을-얻을-수-있다&quot;&gt;Entity를 JSON으로 Serialize하는데 생기는 Infinite Recursion 이슈를 해결하는 더 많은 방법이 궁금하다면 &lt;a href=&quot;https://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion&quot;&gt;https://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion&lt;/a&gt; 를 참조하면 더 많은 키워드 및 설명을 얻을 수 있다.&lt;/h4&gt;

&lt;p&gt;이상 글을 마치며, 부족한 글임에도 끝까지 봐준 독자들에게 감사를 표한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;참조 사이트&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://keenformatics.blogspot.com/2013/08/how-to-solve-json-infinite-recursion.html&quot;&gt;http://keenformatics.blogspot.com/2013/08/how-to-solve-json-infinite-recursion.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/web.html&quot;&gt;https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/web.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/FasterXML/jackson-annotations/wiki/Jackson-Annotations&quot;&gt;https://github.com/FasterXML/jackson-annotations/wiki/Jackson-Annotations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 20 Jul 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2020/07/20/Jackson-Infinite-Recursion-Issue-With-JPA-Entity.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2020/07/20/Jackson-Infinite-Recursion-Issue-With-JPA-Entity.html</guid>
        
        <category>Spring</category>
        
        <category>Jpa</category>
        
        <category>Serialize</category>
        
        <category>Infinite</category>
        
        <category>Recursion</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>Spring Security + JWT를 통해 프로젝트에 인증 구현하기</title>
        <description>&lt;p&gt;Spring Security와 JWT를 활용해서 프로젝트에 인증을 어떻게 구현했는지에 대해서 포스팅 하려고 한다.&lt;/p&gt;

&lt;p&gt;토큰을 사용한 인증은 처음이기도 하고, Google OAuth를 함께 사용하는 바람에… 개념이 해깔려 며칠간 계속 헤맸던 것 같다.&lt;/p&gt;

&lt;p&gt;이제서야 조금 감을 잡으며 프로젝트에 인증 구현을 마쳤는데.. 아직 구현되지 않은 기능들이 매우 많다 ㅎㅎ 빨리 구현하고 싶다!!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;서론이 길었다!!! 지금부터 Spring Security란 무엇이고, Spring Security와 JWT를 사용해서 어떻게 인증을 구현했는지에 대해서 포스팅 하겠다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spring-security란&quot;&gt;Spring Security란?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Spring Security란 인증과, 권한부여, 일반적인 공격에 대한 보호의 기능을 제공하는 프레임워크이다.&lt;/strong&gt; 즉, Spring Security를 사용하면 어플리케이션의 보안 관련 기능을 자체적으로 구현 할 필요 없이 쉽고 안전하게 구현할 수 있다.&lt;/p&gt;

&lt;p&gt;Spring Security의 Servlet 보안 지원은 &lt;strong&gt;Servlet Filter(이하 Filter)&lt;/strong&gt;를 기반으로 한다. 클라이언트가 어플리케이션으로 request를 보내면, Container는 요청 URI의 경로에 따라 어떤 Filter와 어떤 Servlet을 적용할 것인지 결정한다.&lt;/p&gt;

&lt;p&gt;Spring은 여러 Filter중 Servlet Container Lifecycle과 ApplicationContext사이에 연결할 수 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;DelegatingFilterProxy&lt;/code&gt;라는 Filter를 제공한다.&lt;/p&gt;

&lt;p&gt;Spring Security의 Servlet 보안 지원은 &lt;code class=&quot;highlighter-rouge&quot;&gt;DelegatingFilterProxy&lt;/code&gt;가 감싸고 있는 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FilterChainProxy&lt;/code&gt;&lt;/strong&gt;에 의해 수행되며, &lt;code class=&quot;highlighter-rouge&quot;&gt;FilterChainproxy&lt;/code&gt;는 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityFilterChain&lt;/code&gt;&lt;/strong&gt;을 통해 많은 작업을 &lt;strong&gt;Security Filter&lt;/strong&gt; 인스턴스에 위임한다.&lt;/p&gt;

&lt;p&gt;위 과정을 그림으로 나타내면 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Spring-Security-With-JWT-1.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SecurityFilterChain은 스프링에서 보안과 관련된 여러 Security Filter List를 갖고 있는 객체로 이를 순회하면서 필터링을 실시한다.&lt;/p&gt;

&lt;p&gt;SecurityFilterChain에 존재하는 Security Filter순서는 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ChannelProcessingFilter&lt;/li&gt;
  &lt;li&gt;ConcurrentSessionFilter&lt;/li&gt;
  &lt;li&gt;WebAsyncManageIntegrationFilter&lt;/li&gt;
  &lt;li&gt;SecurityContextPersistenceFilter&lt;/li&gt;
  &lt;li&gt;HeaderWriterFilter&lt;/li&gt;
  &lt;li&gt;CorsFilter&lt;/li&gt;
  &lt;li&gt;CsrfFilter&lt;/li&gt;
  &lt;li&gt;LogoutFilter&lt;/li&gt;
  &lt;li&gt;OAuth2AuthorizationRequestRedirectFilter&lt;/li&gt;
  &lt;li&gt;Saml2WebSsoAuthenticationRequestFilter&lt;/li&gt;
  &lt;li&gt;X509AuthenticationFilter&lt;/li&gt;
  &lt;li&gt;AbstractPreAuthenticatedProcessingFilter&lt;/li&gt;
  &lt;li&gt;CasAuthenticationFilter&lt;/li&gt;
  &lt;li&gt;OAuth2LoginAuthenticationFilter&lt;/li&gt;
  &lt;li&gt;Saml2WebSsoAuthenticationFilter&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UsernamePasswordAuthenticationFilter&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;ConcurrentSessionFilter&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;… (총 33개의 Spring Security Filter가 존재한다.)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;위의 Security Filter중 &lt;strong&gt;Security Authentication Filter&lt;/strong&gt;(UsernamePasswordAuthentication, OAuth2LoginAuthenticationFilter와 같은 인증 필터)는 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationManager&lt;/code&gt;를 통해 인증을 수행한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationManager&lt;/code&gt;는 Spring Security의 &lt;strong&gt;필터들이 인증을 수행하는 방법에 대한 명세&lt;/strong&gt;를 정의해 놓은 인터페이스이다.&lt;/p&gt;

&lt;p&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationManager&lt;/code&gt;는 일반적으로 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ProviderManager&lt;/code&gt;&lt;/strong&gt;로 구현되며, &lt;code class=&quot;highlighter-rouge&quot;&gt;ProviderManager&lt;/code&gt;는 여러 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationProvider&lt;/code&gt;&lt;/strong&gt;에 인증을 위임한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;여러 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationProvider&lt;/code&gt;중 하나라도 인증에 성공한다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;ProviderManager&lt;/code&gt;에게 인증된 &lt;code class=&quot;highlighter-rouge&quot;&gt;Authentication&lt;/code&gt;객체를 반환하고 이는 event 기반으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt;에 전송된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ProviderManager&lt;/code&gt;에 설정된 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationProvider&lt;/code&gt;중 어느 것도 성공적으로 인증을 수행할 수 없다면, 인증은 실패할 것이고 알맞는 예외가 &lt;code class=&quot;highlighter-rouge&quot;&gt;ProviderManager&lt;/code&gt;에게 건내질 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;인증이 성공할 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;SecuritycontextHolder&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityContext&lt;/code&gt;에 인증된 Authentication 객체를 저장할 수 있도록 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;아래의-그림은-username-and-password-인증-방식의-아키텍처이다&quot;&gt;아래의 그림은 Username and Password 인증 방식의 아키텍처이다.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Spring-Security-With-JWT-2.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림의 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt;의 역할은 &lt;code class=&quot;highlighter-rouge&quot;&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;가 수행하고 &lt;strong&gt;전체적인 프로세스&lt;/strong&gt;는 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Client가 어플리케이션에 요청을 보내면, Servlet Filter에 의해서 Security Filter로 Security 작업이 위임되고 여러 Security Filter 중에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;&lt;strong&gt;(Username and Password Authentication 방식에서 사용하는 AuthenticationFilter)&lt;/strong&gt;에서 &lt;strong&gt;인증&lt;/strong&gt;을 처리한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt;&lt;strong&gt;(UsernamePasswordAuthenticationFilter인데 지금부터 AuthenticationFilter라고 부름)&lt;/strong&gt;는 Servlet 요청 객체(HttpServletRequest)에서 username과 password를 추출해 &lt;code class=&quot;highlighter-rouge&quot;&gt;UsernameAuthenticationToken&lt;/code&gt;&lt;strong&gt;(이하 인증 객체)&lt;/strong&gt;을 생성한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationManager&lt;/code&gt;&lt;strong&gt;(구현체 : ProviderManager)&lt;/strong&gt;에게 인증 객체를 전달한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ProviderManager&lt;/code&gt;는 인증을 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationProvider&lt;/code&gt;에게 인증 객체를 전달한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationProvider&lt;/code&gt;는 전달받은 인증 객체의 정보(일반적으로 사용자 아이디)를 &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDetailsService&lt;/code&gt;에 넘겨준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UserDetailsService&lt;/code&gt;는 전달 받은 사용자 정보를 통해 DB에서 알맞는 사용자를 찾고 이를 기반으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDetails&lt;/code&gt;객체를 만듭니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자 정보와 일치하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDetails&lt;/code&gt;객체를 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationProvider&lt;/code&gt;에 전달합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationProvider&lt;/code&gt;은 전달받은 &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDetails&lt;/code&gt;를 인증해 성공하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;ProviderManager&lt;/code&gt;에게 권한(Authorities)을 담은 검증된 인증 객체를 전달합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ProviderManager&lt;/code&gt;는 검증된 인증 객체를 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt;에게 전달합니다. &lt;strong&gt;(event 기반 으로 전달)&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt;는 검증된 인증 객체를 &lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityContextHolder&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityContext&lt;/code&gt;에 저장합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Spring Security 전체를 설명하기에는 하나의 포스팅으로 부족하기 때문에 아주 기본적인 프로세스만 설명했고, 이제 메인 주제인 &lt;strong&gt;나의 프로젝트에 어떻게 Spring Security + JWT를 적용&lt;/strong&gt;했는지에 대해서 알아보도록 하겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spring-security--jwt를-프로젝트에-어떻게-적용-했는가&quot;&gt;Spring Security + JWT를 프로젝트에 어떻게 적용 했는가?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;클라이언트가 Spring Security를 적용한 어플리케이션에 리소스를 요청할 때 접근 권한이 없는 경우 기본적으로 &lt;strong&gt;Username and Password Authentication Mechanism&lt;/strong&gt;을 사용해 &lt;strong&gt;로그인 폼&lt;/strong&gt;으로 보내지게 되는데 그 역할을 하는 필터는 &lt;code class=&quot;highlighter-rouge&quot;&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;이다.&lt;/p&gt;

&lt;p&gt;내가 개발하고 있는 Rest API Server는 &lt;strong&gt;Username and Password Authentication Mechanism&lt;/strong&gt;을 사용하지 않을 것이기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;이전에 사용자 정의 필터인 &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtAuthenticationFilter&lt;/code&gt;에서 인증 및 권한처리가 필요했다.&lt;/p&gt;

&lt;p&gt;그래서 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JwtAuthenticationFilter&lt;/code&gt;&lt;/strong&gt;를 다음과 같이 만들어서 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;&lt;/strong&gt;이전에 등록했다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JwtAuthenticationFilter.java&lt;/strong&gt; : Jwt가 유효한 토큰인지 인증하기 위한 Filter이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JwtAuthenticationFilter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericFilterBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JwtTokenProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JwtAuthenticationFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JwtTokenProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jwtTokenProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Request로 들어오는 Jwt Token의 유효성을 검증하는 filter를 filterChain에 등록합니다.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FilterChain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resolveToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validateToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// token 검증&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 인증 객체 생성&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;SecurityContextHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// SecurityContextHolder에 인증 객체 저장&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filterChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spring Security Filter와 통합하지 않고 &lt;strong&gt;사용자가 정의한 필터(JwtAuthenticationFilter)에서 인증 및 권한 작업을 진행&lt;/strong&gt;할 것이기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthenticationManager&lt;/code&gt;를 사용하지 않고 &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtTokenProvider&lt;/code&gt;를 통해서 인증 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityContextHolder&lt;/code&gt;를 바로 사용했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Spring Security Document의 관련 글&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;If you are not integrating with Spring Security’s Filters you can set the SecurityContextHolder directly and are not required to use an AuthenticationManager.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다음으로는 생성한 &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtAuthenticationFilter&lt;/code&gt;를 Spring Security의 &lt;code class=&quot;highlighter-rouge&quot;&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;&lt;strong&gt;이전에 등록하는 설정&lt;/strong&gt;을 할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SecurityConfig.java&lt;/strong&gt; : Spring Security 관련 설정들을 하는 Configuration 클래스&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableWebSecurity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SecurityConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebSecurityConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JwtTokenProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SecurityConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JwtTokenProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jwtTokenProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthenticationManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticationManagerBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticationManagerBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;httpBasic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;disable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;csrf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;disable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authorizeRequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;antMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/login/google&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anonymous&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addFilterBefore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JwtAuthenticationFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsernamePasswordAuthenticationFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Filter를 등록 했으면 Jwt Token을 생성하고, 인증 및 권한 부여 등의 기능을 제공할 &lt;strong&gt;Provider&lt;/strong&gt;를 만들어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JwtTokenProvider.java&lt;/strong&gt; : Jwt Token을 생성, 인증, 권한 부여, 유효성 검사, PK 추출 등의 다양한 기능을 제공하는 클래스&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JwtTokenProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TOKEN_VALID_MILISECOND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 10시간&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spring.jwt.secret&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDetailsService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetailsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userUserDetailsService&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDetailsService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetailsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userDetailsService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetailsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encodeToString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Jwt 토큰 생성&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userPk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Claims&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;claims&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jwts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;claims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userPk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;claims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;roles&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jwts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setClaims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;claims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 데이터&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setIssuedAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 토큰 발행 일자&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setExpiration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TOKEN_VALID_MILISECOND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 만료 기간&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SignatureAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HS512&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 암호화 알고리즘, secret 값 &lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Token 생성&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 인증 성공시 SecurityContextHolder에 저장할 Authentication 객체 생성&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetailsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadUserByUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUserPk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UsernamePasswordAuthenticationToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthorities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Jwt Token에서 User PK 추출&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserPk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jwts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSigningKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClaimsJws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolveToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-AUTH-TOKEN&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Jwt Token의 유효성 및 만료 기간 검사&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validateToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Jws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Claims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;claims&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jwts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSigningKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseClaimsJws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jwtToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;claims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExpiration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인증 기능을 수행할 JwtTokenProvider를 만들었으면 JwtTokenProvider가 제공한 사용자 정보로 UserDetails를 제공할 &lt;code class=&quot;highlighter-rouge&quot;&gt;UserDetailsService&lt;/code&gt;를 만들어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UserDetailsService.java :&lt;/strong&gt; JwtTokenProvider가 제공한 사용자 정보로 DB에서 알맞은 사용자 정보를 가져와 UserDetails 생성&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserUserDetailsService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDetailsService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserUserDetailsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadUserByUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsernameNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findUserByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;UserDetailsService까지 만들었으면 UserDetails를 상속받는 &lt;strong&gt;도메인 객체&lt;/strong&gt;를 만들고 사용자를 식별할 JwtToken을 생성할 Controller까지 만들면 Production 코드는 끝이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(User 클래스와 Controller 클래스의 코드를 첨부하고 싶었으나, 많은 배경지식이 필요한 코드들이 존재해 첨부하지 않았다.)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 위의 생성된 코드들을 테스트 할 수 있는 Test Code를 만들면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AutoConfigureMockMvc&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoogleLoginControllerTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@MockBean&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;GoogleLoginService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;JwtTokenProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GoogleLoginWithWrongAccessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// When &amp;amp; Then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wrong_Access_Token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;badRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Then&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login/google&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{\&quot;access_token\&quot; : \&quot;Wrong_Access_Token\&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBadRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GoogleLoginWithRightAccessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;GoogleUserinfoDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleUserinfoDTO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoogleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;googleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frog&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;googleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frog@email.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GoogleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;googleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// When&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Right_Access_Token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;MvcResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mvcResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login/google&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{\&quot;access_token\&quot; : \&quot;Right_Access_Token\&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentAsString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mvcResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContentAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$.X-AUTH-TOKEN&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jwtTokenProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUserPk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frog@email.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-AUTH-TOKEN&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이를 돌려보면 적절한 Jwt Token으로 인증을 완료하고 SecurityContextHolder에서 알맞는 사용자의 &lt;strong&gt;Principal&lt;/strong&gt;을 가져오는 걸 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Spring-Security-With-JWT-3.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;글이 아주 길고 장황해 독자들이 이를 읽고 얼마나 많은 도움이 될려는 지는 모르겠지만, Spring Security 아키텍처 부터 프로젝트 적용까지 한 포스팅으로 전부 설명한다는 것이 정말 쉽지 않은 일이었던 것 같고 아주 좋은 경험인 것 같다.&lt;/p&gt;

&lt;p&gt;또한 나의 지식이 늘어감에 또는 나의 프로젝트가 더 커짐에 따라서 이 글을 지속적으로 업데이트 한다는 다짐을 끝으로 글을 마치도록 하겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;참고한 사이트&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.3.3.BUILD-SNAPSHOT/reference/html5/&quot;&gt;https://docs.spring.io/spring-security/site/docs/5.3.3.BUILD-SNAPSHOT/reference/html5/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://daddyprogrammer.org/post/636/springboot2-springsecurity-authentication-authorization/&quot;&gt;https://daddyprogrammer.org/post/636/springboot2-springsecurity-authentication-authorization/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jeong-pro.tistory.com/205&quot;&gt;https://jeong-pro.tistory.com/205&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-security-custom-filter&quot;&gt;https://www.baeldung.com/spring-security-custom-filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 29 Jun 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2020/06/29/Spring-Security-with-JWT.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2020/06/29/Spring-Security-with-JWT.html</guid>
        
        <category>Spring</category>
        
        <category>Security</category>
        
        <category>JWT</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>@MockBean을 사용한 통합(Controller)테스트</title>
        <description>&lt;p&gt;&lt;strong&gt;이 글에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@MockBean&lt;/code&gt;을 사용한 통합테스트에 관한 이슈에 대해서 다루어 보도록 하겠다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;이 이슈는 Google OAuth를 사용하는 Service레이어를 의존하는 Controller를 테스트하는 과정에서 발생되었다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Controller 코드는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoogleLoginController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;GoogleLoginService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GoogleLoginController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GoogleLoginService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;googleLoginService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login/google&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loginByGoogleOAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JsonExtractor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValueByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;access_token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;is2xxSuccessful&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GoogleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 코드에 대해서 간략히 설명하자면&lt;/p&gt;

&lt;p&gt;클라이언트가 &lt;code class=&quot;highlighter-rouge&quot;&gt;/login/google&lt;/code&gt; 앤드포인트로 구글 인증서버에서 받은 Access_Token을 넘겨주면 핸들러 메소드가 &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleLoginService&lt;/code&gt;를 사용해서 해당 Access_Token이 유효한지 아닌지를 체크하는 코드이다.&lt;u&gt;(Access_Token이 유효한지 아닌지에 대한 검증은 GoogleLoginService의 RestTemplate이 구글 인증 서버에 요청을 보내 진행)&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;위의 컨트롤러를 테스트하기 위해 &lt;strong&gt;2가지의 경우의 수&lt;/strong&gt;를 나누었다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;유효하지 않은 Access_Token을 가진 요청을 보내 4xx 상태코드를 가진 응답 테스트&lt;/li&gt;
  &lt;li&gt;유효한 Access_Token을 가진 요청을 보내 2xx 상태코드를 가진 응답 테스트&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;1-유효하지-않은-access_token을-가진-요청을-보내-4xx-상태코드를-가진-응답-테스트&quot;&gt;1. 유효하지 않은 Access_Token을 가진 요청을 보내 4xx 상태코드를 가진 응답 테스트&lt;/h2&gt;

&lt;p&gt;유효하지 않은 Access_Token을 테스트하는 작업은 매우 수월했다.&lt;/p&gt;

&lt;p&gt;내가 임의로 만든 Access_Token(구글의 Access_Token 형식을 알기 때문에 절대 겹칠일이 없다는 가정하에 진행)을 가진 요청을 &lt;code class=&quot;highlighter-rouge&quot;&gt;/login/google&lt;/code&gt;에게만 보내면 되었다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GoogleLoginWithWrongAccessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Given&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoogleAccessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;basdhifbasduiofbasdohiufsaoi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// When &amp;amp; Then&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login/google&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{\&quot;access_token\&quot; : \&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoogleAccessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBadRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 결과는 당연히 성공이었다!!!
&lt;img src=&quot;/assets/spring/Use-MockBean-Test-1.png&quot; style=&quot;width:30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하지만 문제는 두번째 경우 테스트 이었다….&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;2-유효한-access_token을-가진-요청을-보내-2xx-상태코드를-가진-응답-테스트&quot;&gt;2. 유효한 Access_Token을 가진 요청을 보내 2xx 상태코드를 가진 응답 테스트&lt;/h2&gt;

&lt;p&gt;유효한 Access_Token을 가진 요청을 테스트 하기 위해서는 유효한 Access_Token을 구글 인증 서버로부터 받아야 하는데 매번 테스트 할 때마다 유효한 Access_Token을 받아올 수는 없는 노릇이었다.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;(또한 구글 인증 서버로부터 Access_Token을 가져오는 로직이 간단하지 않아 어쩌면 배보다 배꼽이 더 큰 격이다..)&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 이전에 사용해 보았던 &lt;strong&gt;Mock객체를 활용해 GoogleLoginService의 메소드 return 값을 내가 설정해 보면 어떨까??&lt;/strong&gt; 라는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;하지만 다시 생각해 보면 통합(Controller)테스트 인데 Spring Boot가 뜰 때 어떻게 &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleLoginService&lt;/code&gt; Mock객체를 &lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;에 주입해 줄 수 있을까??? 라는 또 다른 이슈가 생겼다!!!&lt;/p&gt;

&lt;p&gt;여기 저기 참고해 보고, Sproutt스터디에 질문을 올려본 결과 으쌰으쌰 프로젝트에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;@MockBean&lt;/code&gt;을 사용하고 있는 걸 볼 수 있었고, 이에 대해서 찾아보니 나의 이슈를 해결할 수 있는 애노테이션이라는 것을 알게 되었다.&lt;/p&gt;

&lt;p&gt;유효한 Access_Token 테스트 코드를 작성하기 이전에 &lt;code class=&quot;highlighter-rouge&quot;&gt;@MockBean&lt;/code&gt;에 대해서 알아보자!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;mockbean&quot;&gt;@MockBean&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@MockBean&lt;/code&gt;은 Spring ApplicationContext에 Mock객체를 추가하게 해주는 주석이다.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@RunWith(SpringRunner.class)&lt;/code&gt; 클래스내의 필드에서 사용할 수 있고, Class Level의 주석으로써도 사용할 수 있다.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Mock객체는 타입 또는 Bean name으로써 Context에 등록할 수 있고, Context내에서 정의된 동일한 유형의 단일 Bean이 존재한다면 어플리케이션 실행시 Mock Bean으로써 대체된다.&lt;/strong&gt; 만약 동일한 타입의 Bean이 존재하지 않는다면 새로운 Mock Bean이 생성된다.&lt;/li&gt;
    &lt;li&gt;ApplicationContext에 알려져 있지만 Bean이 아닌 의존성은 발견되지 않을 것이며 Mock객체는 존재하는 의존성과 함께 Context에 추가되어 질 것이다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 @MockBean의 Spec을 참고해 작성한 &lt;strong&gt;유효한 Access_Token을 가진 요청을 보내 2xx 상태코드를 가진 응답 테스트 코드&lt;/strong&gt;는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AutoConfigureMockMvc&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoogleLoginControllerTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@MockBean&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;GoogleLoginService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GoogleLoginWithRightAccessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Given&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;GoogleUserinfoDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleUserinfoDTO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoogleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;googleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frog&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;googleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frog@email.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GoogleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;googleUserinfoDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// When &amp;amp; Then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Right_Access_Token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login/google&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{\&quot;access_token\&quot; : \&quot;Right_Access_Token\&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findUserByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frog@email.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frog&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Use-MockBean-Test-2.png&quot; style=&quot;width:70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@MockBean&lt;/code&gt;의 개념과 사용방법에 대해서 알아보았으니까 유효하지 않은 Access_Token을 테스트하는 코드를 리팩토링 하면 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GoogleLoginWithWrongAccessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// When &amp;amp; Then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;googleLoginService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wrong_Access_Token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;badRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login/google&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{\&quot;access_token\&quot; : \&quot;Wrong_Access_Token\&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBadRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;mockbean에-대해서-자세히-알아-보았고-이를-어떻게-사용하는지에-대해서도-알아-보았으니-테스트할-때-더-날아다닐-수-있을-것-같다-역시-sproutt스터디가-짱이다-화이팅&quot;&gt;@MockBean에 대해서 자세히 알아 보았고 이를 어떻게 사용하는지에 대해서도 알아 보았으니 테스트할 때 더 날아다닐 수 있을 것 같다!!! 역시 Sproutt스터디가 짱이다!! 화이팅&lt;/h4&gt;

&lt;p&gt;더 많은 정보를 얻고 싶은 독자는 다음을 참고하면 좋다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://howtodoinjava.com/spring-boot2/testing/spring-mockbean-annotation/&quot;&gt;https://howtodoinjava.com/spring-boot2/testing/spring-mockbean-annotation/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/mock/mockito/MockBean.html&quot;&gt;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/mock/mockito/MockBean.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 30 May 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2020/05/30/Use-MockBean-Test.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2020/05/30/Use-MockBean-Test.html</guid>
        
        <category>Spring</category>
        
        <category>Mockito</category>
        
        <category>Integration</category>
        
        <category>Test</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>@RequestParam, @RequestBody에 관한 이슈 (Conversion 관점)</title>
        <description>&lt;p&gt;&lt;strong&gt;Conversion관점의 @RequestParam와 @RequestBody에 관한 이슈&lt;/strong&gt;에 대해서 다루어 보도록 하겠다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;이 이슈는 서버로 Form Data를 보내서 Request handler 메소드의 인자로서 setter가 없는 클래스의 객체를 받고 싶은 욕구에서 시작 되었다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Form Data&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;writer=abc&amp;amp;title=Spring&amp;amp;contents=Johnson&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;domain&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Question&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IDENTITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;QuestionUpdateDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;questionUpdateDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;questionUpdateDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;questionUpdateDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;questionUpdateDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;controller 코드 일부&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/questions&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerQuestion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Question&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;questionService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerQuestion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;redirect:/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적절한 Form Data를 가진 요청을 &lt;code class=&quot;highlighter-rouge&quot;&gt;/questions&lt;/code&gt;에게 보내니 Question 클래스에 setter가 없어 &lt;u&gt;기본 생성자에 의해 Question객체&lt;/u&gt;가 생성된 것을 볼 수 있었다.&lt;/p&gt;

&lt;p&gt;나는 예상치 못한 결과에 다음과 같은 &lt;strong&gt;궁금증&lt;/strong&gt;을 가지게 되었다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;우리가 원하는건 요청한 Form 데이터를 가진 객체가 생성되길 원하는데 안되는 이유가 뭘까?&lt;/li&gt;
  &lt;li&gt;분명히 Form에 적절히 값을 채워서 요청을 보냈는데?&lt;/li&gt;
  &lt;li&gt;왜 기본 생성자에 의해서만 객체가 생성되는 걸까?&lt;/li&gt;
  &lt;li&gt;Form의 요청 파라미터에 맞는 인자를 가진 생성자를 만든다면 생성자에 의해서 적절한 객체가 잘 생성될 수 있을것인가?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 궁금증을 해결하기 위해서 나는 정말 헤매고 헤매다가 &lt;strong&gt;@RequestParam&lt;/strong&gt; 이라는 애노테이션을 키워드로 찾을 수 있었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;@RequestParam이란?&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;HTTP Request 파라미터를 Handler메소드의 파라미터 타입에 전달받을 때 사용하는 애노테이션이다.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Handler 메소드의 파라미터 타입이 Simple Type이고, 지원하는 인자 타입이 아닌 경우 @RequestParam으로 먼저 resolve되고 이후에 @ModelAttribute로 resolve된다.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;@RequestParam이 붙여진 인자의 타입이 String이 아닌 경우 &lt;a href=&quot;https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/web.html#mvc-ann-typeconversion&quot;&gt;Type Conversion&lt;/a&gt;이 자동으로 적용된다. (사용자 정의 가능)&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;@RequestParam가 붙여진 인자의 타입이 String이 아닌 경우 Type Conversion이 자동으로 적용된다는데… &lt;strong&gt;이 Type Conversion의 로직 때문에 setter없이 생성자로써 객체를 생성할 수 없는게 아닐까?&lt;/strong&gt; 라는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;그렇다. &lt;strong&gt;Type Conversion에서 제공해주는 DataBinder가 이슈의 시작점 이었다!!!&lt;/strong&gt; (DataBinder를 이용해서 Type Conversion을 수행)&lt;/p&gt;

&lt;p&gt;요청시 WebDataBinder클래스 내의 doBind()메소드의 braeak point에 걸리는 사진.
&lt;img src=&quot;/assets/spring/RequestParam-RequestBody-Conversion.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@RequestParam이 String이 아닐 경우 Object로 변경 해주는건 Formatter도 아니고 Converter도 아니고 &lt;u&gt;DataBinder&lt;/u&gt;이었다. 이 DataBinder가 사용하는 &lt;u&gt;PropertyEditor가 Java Bean spec&lt;/u&gt;을 따르기 때문에 이를 사용해서 바인딩을 하려는 클래스는 무조건 Java Bean spec을 충족했어야만 했고 즉, &lt;u&gt;setter가 존재&lt;/u&gt;해야했다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Java Bean&lt;/strong&gt; : Java Bean API 명세를 따르는 클래스를 의미한다.&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;기본 생성자를 가지고 있어야 한다.&lt;/li&gt;
    &lt;li&gt;인스턴스 변수는 private 접근 지정자여야 한다.&lt;/li&gt;
    &lt;li&gt;public의 getter와 setter를 가지고 있어야 한다.&lt;/li&gt;
    &lt;li&gt;Serializable 인터페이스를 구현해야 한다. (선택사항)&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;그렇다면 DataBinder를 이용해서 Binding되는 객체는 무조건 setter를 필요로 하는가??&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;아니다. 다음의 코드를 컨트롤러 내부에 위치시키면 DataBinder가 Reflection을 사용해서 필드에 직접 Access할 수 있도록 만들어 준다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@InitBinder&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initBinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WebDataBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initDirectFieldAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;requestbody를-이용하는-방법&quot;&gt;@RequestBody를 이용하는 방법&lt;/h4&gt;

&lt;p&gt;Form Data가 아닌 JSON 형식의 데이터를 가진 요청이 들어왔을 경우 Handler method는 &lt;strong&gt;@RequestBody&lt;/strong&gt;애노테이션이 붙여진 인자를 &lt;strong&gt;JSON 형태의 데이터에서 setter없는 클래스의 객체로 만들어 준다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;requestbody란&quot;&gt;&lt;strong&gt;@RequestBody란?&lt;/strong&gt;&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;@RequestBody애노테이션은 HTTP Request body를 읽고 &lt;a href=&quot;https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/web.html#mvc-config-message-converters&quot;&gt;HttpMessageConverter&lt;/a&gt;를 통해서 deserialized시켜 Handler 메소드의 특정 인자 타입의 객체로 변환하기 위한 애노테이션이다.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;MVC Config의 Message Converters 옵션을 사용함으로써 message conversion을 설정 및 customizing할 수 있다.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;javax의 @valid, spring의 @validated 애노테이션을 사용함으로써 유효성 검사를 할 수 있다.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;JSON Data&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;writer&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Spring&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;contents&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Johnson&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Handler Method&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/questions&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerQuestion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Question&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;questionService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerQuestion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;redirect:/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;왜 @RequestBody는 아무런 설정 없이 JSON 형식의 데이터에서 setter가 존재하지 않는 클래스의 객체로 변환할 수 잇었을까?&lt;/p&gt;

&lt;p&gt;이에 대한 답은 &lt;strong&gt;MappingJackson2HttpMessageConverter&lt;/strong&gt;에 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MappingJackson2HttpMessageConverter는 ObjectMapper를 사용해서 Setter가 존재하지 않아도 객체의 필드 자체에 데이터를 전달할 수 있기 때문에 위와 같은 빈 객체가 생성되는 이슈가 발생하지 않는것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;기본적으로 동작하는 DataBinder와 MappingJackson2HttpMessageConvert가 맘에 들지 않는다면 커스터마이징 하는것도 아주 좋은 선택이다.
커스터마이징 하는 방법과 등록하는 방법은 Doc에 아주 친절히 나와 있으니 참고 바란다.&lt;/p&gt;

</description>
        <pubDate>Fri, 08 May 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2020/05/08/RequestParam-RequestBody-(Conversion).html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2020/05/08/RequestParam-RequestBody-(Conversion).html</guid>
        
        <category>Spring</category>
        
        <category>Jackson</category>
        
        <category>Formatter</category>
        
        <category>converter</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>Spring의 HiddenHttpMethodFilter에 관한 이슈</title>
        <description>&lt;p&gt;이 포스팅에서는 &lt;strong&gt;HTTP Method의 처리 프로세스&lt;/strong&gt;에 대한 서버단의 이슈에 관해서 설명하고자 한다.&lt;/p&gt;

&lt;p&gt;HTML Form에서는 GET과 POST방식의 Methods만 지원한다. HTML Form이 다른 Methods를 지원하지 않는 이유는 &lt;strong&gt;Form의 역할과는 거리가 멀기 때문&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;왜 HTML Form이 GET과 POST방식의 Methods만 지원하는지에 대해서 궁금한 독자는 다음의 블로그&lt;a href=&quot;http://haah.kr/2017/05/23/rest-http-method-in-html-form/&quot;&gt;(http://haah.kr/2017/05/23/rest-http-method-in-html-form/)&lt;/a&gt; 를 읽어보자.&lt;/p&gt;

&lt;p&gt;이제부터 HTTP Method에 관해서 나에게 어떠한 &lt;strong&gt;이슈&lt;/strong&gt;가 있었고 어떻게 해결했는지에 대해서 알려줄 것이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;이슈에러-발생&quot;&gt;이슈(에러) 발생&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;아래의 폼은 사용자를 id로 식별하여 정보를 수정하기 위해 수정할 정보를 서버로 전송하는 폼이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;updateForm.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;question&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/users/{user.id}/update&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_method&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;put&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form-group&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&lt;/span&gt;사용자 아이디 : {user.userId}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;사용자의 정보를 수정하기 위해서 클라이언트는 수정할 데이터를 &lt;strong&gt;PUT 형식으로 서버에 요청&lt;/strong&gt;해야 한다.&lt;/p&gt;

&lt;p&gt;하지만 PUT형식을 제공해 주지 않는 HTML 때문에 우리는 나름 꼼수(?)를 사용해서 Spring이 알아먹을 수 있도록 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot;/&amp;gt;&lt;/code&gt;를 다음과 같이 폼 태그 내부에 위치시켜야 한다.&lt;/p&gt;

&lt;p&gt;나는 이렇게만 하면 Controller의 &lt;code class=&quot;highlighter-rouge&quot;&gt;@PutMapping(&quot;/users/{id}/update&quot;)&lt;/code&gt;애노테이션을 갖은 핸들러 메서드가 해당 요청에 대해서 잘 처리할 줄 알았다.&lt;/p&gt;

&lt;p&gt;하지만 누가 알았을까..? 정말 이제 시작이란것을..&lt;/p&gt;

&lt;p&gt;다음은 위의 폼의 요청에 따라 서버에서 보여지는 로그이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/spring/Spring-HiddenHttpMethodFilter-1.png&quot; style=&quot;width:100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;보이는가..? 서버는 이 요청을 POST로 해석해 해당 URL의 Post 요청에 해당하는 핸들러 메서드를 찾고 있다.&lt;/p&gt;

&lt;p&gt;될리가 있는가.. 우리는 해당 URL이 Put 요청으로 들어왔을 때 처리할 수 있는 핸들러 메서드만 가지고 있는데…&lt;/p&gt;

&lt;p&gt;어찌된 일인가 도통 모르겠다… 일단 해결해 보자!!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;해결-방안&quot;&gt;해결 방안&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;정말 이 이슈를 해결하는데 생각보다 오래걸렸고, 생각보다 힘들었다.&lt;/p&gt;

&lt;p&gt;이제와서 생각이 드는 거지만, 이러한 &lt;strong&gt;이슈들을 해결하는데 오래걸리고 힘든 이유&lt;/strong&gt;는 기존 &lt;strong&gt;내 머리속의 지식 안에서만 문제를 해결&lt;/strong&gt;하려고 하니까 힘들고 오래걸리는 듯 하다.&lt;/p&gt;

&lt;p&gt;말이 길었다. 어떻게 이러한 문제를 해결할 수 있었는지에 대해서 설명하겠다. (Spring Web MVC Document에 친절하게 나와있다.)&lt;/p&gt;

&lt;p&gt;아까 Spring에서 지원해주는 꼼수라는 말을 기억하는가??? 그렇다. Spring Web MVC는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot;/&amp;gt;&lt;/code&gt;를 사용해서 POST를 PUT으로 해석한다.&lt;/p&gt;

&lt;p&gt;하지만, Spring은 신이 아니다… 당연히 이러한 역할을 해주는 Filter가 Bean으로 등록되어야 한다. 이러한 역할을 해주는 Filter는 &lt;strong&gt;HiddenHttpMethodFilter&lt;/strong&gt;이다. 이름 그대로 숨겨진 HTTP Method를 필터하는 클래스이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;정확히 말해서 HiddenHttpMethodFilter는 Hidden 타입의 input 태그의 속성들을 읽어서 HttpServletRequestWrapper.getMethod() 반환 값을 변경해 요청된 HTTP 메소드의 타입을 PUT, DELETE, PATCH로 변경해주는 필터이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그래서 &lt;strong&gt;HiddenHttpMethodFilter&lt;/strong&gt;클래스를 Bean으로 등록하면 위의 이슈(문제는) 해결된다.&lt;/p&gt;

&lt;p&gt;다음의 코드는 HiddenHttpMethodFilter를 Bean으로 등록하는 코드이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MvcConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebMvcConfigurationSupport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HiddenHttpMethodFilter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;httpMethodFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;HiddenHttpMethodFilter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hiddenHttpMethodFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HiddenHttpMethodFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hiddenHttpMethodFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이로써 이번 포스팅은 마친다.&lt;/p&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;참조&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html&quot;&gt;Spring Web MVC Document&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/filter/HiddenHttpMethodFilter.html&quot;&gt;Spring API&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sun, 03 May 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2020/05/03/Spring-HiddenHttpMethodFilter.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2020/05/03/Spring-HiddenHttpMethodFilter.html</guid>
        
        <category>Spring</category>
        
        <category>Data</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>Spring Data란 무엇인가?</title>
        <description>&lt;p&gt;이 글에서는 &lt;strong&gt;Spring Data&lt;/strong&gt;란 무엇인지에 대해서 알아볼 것이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;spring-data&quot;&gt;Spring Data&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;spring-data란&quot;&gt;Spring Data란?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Data의 목적은 기본 데이터 저장소의 특수한 특성을 유지하면서 &lt;strong&gt;데이터 접근을 위한 친숙하고 일관된 Spring 기반의 프로그래밍 모델을 제공&lt;/strong&gt;하는 프로젝트이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Data는 &lt;strong&gt;데이터 접근 기술, relational and non-relational database, map-reduce 프레임워크, 클라우드 기반의 서비스&lt;/strong&gt;를 쉽게 사용할 수 있도록 해준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Data는 데이터베이스와 관련된 많은 하위 프로젝트(Spring Data JPA, Spring Data REST, …)를 포함하는 포괄적인 프로젝트이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-data의-특징&quot;&gt;Spring Data의 특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;강력한 저장소 및 사용자 정의 객체 맵핑 추상화&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;저장소 메소드 이름으로부터 동적 쿼리 파생&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기본 속성을 제공하는 Implementation domain 기본 클래스&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;transparent auditing을 위한 지원 (created, last changed)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자 정의 저장소 코드를 통합할 수 있는 가능성&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JavaConfig 및 custom XML namespaces를 통한 손쉬운 Spring과의 통합&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring MVC 컨트롤러와의 향상된 통합&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;cross-store persistence에 대한 실험적 지원&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;주요-모듈&quot;&gt;주요 모듈&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Spring Data Commons :&lt;/strong&gt; 모든 Spring Module을 뒷받침하는 핵심 Spring 개념 (CrudRepository, PagingAndSortingRepository 인터페이스)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Spring Data JDBC :&lt;/strong&gt; spring-jdbc에 대한 Spring Data 추상화를 제공하는 모듈 (CrudRepository를 구현하는 SimpleJdbcRepository 클래스)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Spring Data JPA :&lt;/strong&gt; JPA를 위한 스프링 데이터 저장소 지원 (JpaRepository 인터페이스, SimpleJpaRepository 클래스)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Spring Data MongoDB :&lt;/strong&gt; MongoDB를 위한 스프링 기반 객체 문서 지원 및 저장소&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Spring Data REST :&lt;/strong&gt; 스프링 데이터 저장소들을 hypermedia 기반의 Restful 리소스로 export 해주는 모듈&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Spring Data Redis :&lt;/strong&gt; Spring Application에서 Redis를 손쉽게 구성 및 접근할 수 있도록 하는 모듈&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;…&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;community-module&quot;&gt;Community Module&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Data Aerospike&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Data ArangoDB&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Data Couchbase&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Data Azure Cosmos DB&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Data Cloud Datastore&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Data Cloud Spanner&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring Data DynamoDB&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;…&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;참조&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Spring Reference&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 30 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2020/04/30/Spring-Data.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2020/04/30/Spring-Data.html</guid>
        
        <category>Spring</category>
        
        <category>Data</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>GitHub Flow란?</title>
        <description>&lt;p&gt;이 글은 GitHub Flow가 무엇인지에 대해 알기위해 &lt;a href=&quot;https://guides.github.com/introduction/flow/&quot;&gt;Github공식문서&lt;/a&gt;를 번역한 글이다.&lt;/p&gt;

&lt;h3 id=&quot;github-flow-이해하기&quot;&gt;GitHub flow 이해하기&lt;/h3&gt;

&lt;p&gt;GitHub flow는 브랜치 기반의 가벼운 workflow 입니다. GitHub flow는 배포가 정기적으로 이루어지는 팀과 프로젝트를 지원합니다.&lt;/p&gt;

&lt;p&gt;지금부터 GitHub flow를 어떻게 그리고 왜 사용하는지에 대해서 설명 하겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;1-create-a-branch&quot;&gt;1. Create a branch&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Git/GitHub-Flow-1.png&quot; style=&quot;width:90%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트를 진행간에 사용자는 특정 시점에 진행중인 다양한 기능 또는 다양한 아이디어를 가지고 있습니다. 그 중 일부는 준비가 되어 있기도 하고 아직 준비가 안된 것이 있기도 합니다. branch를 나누는것은 사용자가 이러한 workflow를 관리하는데 도움을 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;사용자가 본인의 프로젝트에서 branch를 생성할 때, 사용자는 새로운 아이디어를 도전할 환경을 생성합니다.&lt;/strong&gt; branch에서의 변화는 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch에 영향을 주지 않기 때문에, 사용자는 자유롭게 실험하고, 공동 작업중인 누군가가 검토할 준비가 될 때까지 브랜치가 병합되지 않는다는 사실을 알고 변경 사항을 commit합니다.&lt;/p&gt;

&lt;h3 id=&quot;protip&quot;&gt;ProTip&lt;/h3&gt;

&lt;p&gt;Branch를 나누는 것은 Git의 핵심 개념이고 전체 GitHub flow는 Branching에 기초합니다. 한 가지의 가장 중요한 규칙은 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch에 있는 모든 것은 항상 배포할 수 있어야 한다는 것입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이러한 규칙 때문에, &lt;strong&gt;기능 또는 수정 작업시 새로운 branch는 마스터에서 생성하는 것이 매우 중요합니다.&lt;/strong&gt; 다른 작업자들이 어떠한 작업들이 진행되는지 알 수 있도록 branch 이름은 &lt;strong&gt;descriptive&lt;/strong&gt;(설명적이어야 한다 ex. refactor-authentication, user-content-cache-key, make-retina-avatars) 이어야 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;2-add-commits&quot;&gt;2. Add commits&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Git/GitHub-Flow-2.png&quot; style=&quot;width:90%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;branch가 생성이 되어지면, 변화를 시작해야 한다. 사용자는 파일을 추가, 삭제, 편집할 때마다 commit을 하고 branch에 변경사항을 추가합니다. 이러한 &lt;strong&gt;commit을 추가하는 과정은 기능 branch에서 작업 진행 상황을 추적합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;또한 Commit은 다른 사람이 수행한 작업과 이유를 이해하기 위해 따라갈 수 있는 투명한 작업 기록을 만듭니다. 각각의 Commit은 관련된 특정한 변화가 왜 만들어 졌는지에 대해 설명하는 Commit message를 가지고 있습니다. 게다가 각각의 Commit은 분리된 변화의 단위로써 고려되어집니다. 이러한 것들은 버그가 발견되었을 경우에 또는 프로젝트의 방향이 바뀌었을 때 변화를 후퇴할 수 있게 해줍니다.&lt;/p&gt;

&lt;h3 id=&quot;protip-1&quot;&gt;ProTip&lt;/h3&gt;

&lt;p&gt;Commit Messages는 Git이 변화를 추적하고 서버로 push될 때 그들을 보여주기 때문에 특히 중요하다. Commit Message를 명확하게 작성함으로써, 개발자는 다른 사람들이 쉽게 따라하고 피드백을 제공할 수 있게 해줍니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;3-open-a-pull-request&quot;&gt;3. Open a Pull Request&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Git/GitHub-Flow-3.png&quot; style=&quot;width:90%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pull Reqeusts는 Commits에 대한 토론을 시작합니다.&lt;/strong&gt; Git Repository 기반에서 철처하게 통합이 되기 때문에, 요청을 수락하면 누구나 어떤 변경 내용이 병합되는지 정확하게 볼 수 있다.&lt;/p&gt;

&lt;p&gt;개발 프로세스동안에 어느 지점에서도 Pull Request를 열 수 있다. ex) 코드가 적거나 없어도 몇개의 스크린샷 또는 일반적인 아이디어를 팀원들과 공유하고 싶을때, 팀원들의 도움이나 조언이 필요할 때, 누군가가 작업을 검토 할 준비가 되었을 때&lt;/p&gt;

&lt;p&gt;Pull Request message에서 GitHub의 &lt;strong&gt;@mention 시스템&lt;/strong&gt;을 사용함으로써, 사용자는 특정한 사람 또는 팀에게 시간대에 상관없이 피드백을 요청할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;protip-2&quot;&gt;ProTip&lt;/h3&gt;

&lt;p&gt;Pull Request는 공유된 저장소에 변화를 관리하기 위해, 오픈 소스 프로젝트에 기여하기 위해 매우 유용하다. 만약 Fork &amp;amp; Pull Model을 사용한다면 Pull Request는 그것들에게 기여한 변화에 대해서 Project maintainers에게 알려줄 방법을 제공할 것이다. 만약 공유되어지는 Repository Model을 사용하고 있다면, Pull Requests는 master branch에 머지되기전에 제안된 변화들에 대해서 대화와 코드리뷰를 할 수 있도록 도와준다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;4-discuss-and-review-your-code&quot;&gt;4. Discuss and review your code&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Git/GitHub-Flow-4.png&quot; style=&quot;width:90%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pull Request가 열려지면, 너의 변화를 리뷰하는 사람 또는 팀은 아마 질문과 comments를 가지고 있을 것이다. 아마도 코딩 스타일이 프로젝트 지침에 따르지 않았거나, 변경 사항에 단위 테스트가 누락되었거나 모든 것이 멋지게 보이고 구성요소들이 순서대로 표시되었을 수 있습니다. Pull Requests는 이러한 유형의 대화를 장려하고 캡처하도록 설계되었습니다.&lt;/p&gt;

&lt;p&gt;또한 커밋에 대한 토론과 피드백을 반영해 브랜치에 계속 push할 수도 있습니다. 만약 누군가가 당신에게 어떠한 것을 잊어버리셨다 또는 코드에 버그가 있다고 comments를 남기면, 당신은 본인의 브랜치에서 이러한 피드백들을 고치고 변화를 push할 수 있습니다. GitHub는 통합 Pull Request View에서 새로운 Commit과 다른 추가적인 피드백들을 보여줄 것이다.&lt;/p&gt;

&lt;h3 id=&quot;protip-3&quot;&gt;ProTip&lt;/h3&gt;

&lt;p&gt;Pull Requests Comments는 마크다운에서 쓰여지며, 개발자는 이미지와 이모지, 전처리되는 다른 text blocks들을 사용해 삽입할 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;5-deploy&quot;&gt;5. Deploy&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Git/GitHub-Flow-5.png&quot; style=&quot;width:90%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GitHub와 함께, master branch에 merge하기전에 프로덕션 환경에서의 최종 테스트를 위해 branch로부터 배포할 수 있습니다.&lt;/p&gt;

&lt;p&gt;Pull Request가 검토되어지고, branch가 tests를 통과하면, 개발자는 프로덕션 환경에서 이러한 것들을 검증하기 위해 변화를 배포할 수 있습니다. 만약 branch가 이슈를 생성하면, 기존 마스터를 프로덕션에 배포하여 지점을 후퇴할 수 있습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;6-merge&quot;&gt;6. Merge&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Git/GitHub-Flow-6.png&quot; style=&quot;width:90%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;변화들이 프로덕션 환경에서 검증이 되어지면, 코드를 master branch로 통합할 때가 온것입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;한번 merge가 되어지면, Pull Requests는 코드 변화의 기록을 보존하고, 누구든지 왜 어떻게 이러한 결정이 만들어졌는지 이해하기 위해 직접 볼 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;protip-4&quot;&gt;ProTip&lt;/h3&gt;

&lt;p&gt;Pull Requests 텍스트에 특정 키워드를 통합하면 이슈를 코드와 연결할 수 있습니다. Pull Request이 merge되면 관련된 이슈들도 또한 닫힙니다. 예를 들어, Closes # 32 문구를 입력하면 리포지토리의 이슈 번호 32가 닫힙니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;참조&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;https://guides.github.com/introduction/flow/&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 06 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/git/2020/04/06/Understand-GitHub-Flow.html</link>
        <guid isPermaLink="true">http://localhost:4000/git/2020/04/06/Understand-GitHub-Flow.html</guid>
        
        <category>Git</category>
        
        <category>Github</category>
        
        <category>Flow</category>
        
        <category>Version</category>
        
        
        <category>Git</category>
        
      </item>
    
  </channel>
</rss>