<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Green Frog Developer</title>
    <description>오늘보다 나은 내일을 위해 변화를 꿈꾸는 개발자입니다.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 20 Mar 2020 23:46:26 +0900</pubDate>
    <lastBuildDate>Fri, 20 Mar 2020 23:46:26 +0900</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>IoC(Inversion Of Control) / DI(Dependency Injection)</title>
        <description>&lt;p&gt;이 글에서는 Spring이 사용하고 있는 &lt;strong&gt;IoC(Inversion of Control)와 DI(Dependency Injection)&lt;/strong&gt;에 대해서 알아볼 것이다.&lt;/p&gt; &lt;p&gt;IoC/DI에 대해 알아보기 전에 자바에서의 &lt;strong&gt;의존성&lt;/strong&gt;이란 무엇을 의미하는지에 대해서 먼저 알아보자.&lt;/p&gt; &lt;hr /&gt; &lt;h2 id=&quot;프로그래밍에서-의존성이란&quot;&gt;프로그래밍에서 의존성이란?&lt;/h2&gt; &lt;hr...</description>
        <pubDate>Thu, 19 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2020/03/19/IOC,DI.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2020/03/19/IOC,DI.html</guid>
        
        <category>Java</category>
        
        <category>OOP</category>
        
        <category>Spring</category>
        
        <category>IOC</category>
        
        <category>DI</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>Strategy Pattern and Template Callback Pattern</title>
        <description>&lt;h1 id=&quot;spring이-사랑하는-design-pattern&quot;&gt;Spring이 사랑하는 Design Pattern&lt;/h1&gt; &lt;p&gt;이 글에서는 Spring이 사랑하고 Spring이 적용한 디자인 패턴중 &lt;strong&gt;Strategy Pattern, Template Callback Pattern&lt;/strong&gt;에 대해서 알아볼 것이다.&lt;/p&gt; &lt;hr /&gt; &lt;h2 id=&quot;strategy-pattern&quot;&gt;Strategy Pattern&lt;/h2&gt; &lt;hr /&gt; &lt;p&gt;&lt;strong&gt;전략 패턴(Strategy...</description>
        <pubDate>Wed, 18 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2020/03/18/Spring-Design-Pattern(3).html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2020/03/18/Spring-Design-Pattern(3).html</guid>
        
        <category>Java</category>
        
        <category>OOP</category>
        
        <category>Spring</category>
        
        <category>Design-Pattern</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>Singleton, Template Method and Factory Method Pattern</title>
        <description>&lt;h1 id=&quot;spring이-사랑하는-design-pattern&quot;&gt;Spring이 사랑하는 Design Pattern&lt;/h1&gt; &lt;p&gt;이 글에서는 Spring이 사랑하고 Spring이 적용한 디자인 패턴중 &lt;strong&gt;Singleton Pattern, Template Method Pattern, Factory Method Pattern&lt;/strong&gt;에 대해서 알아볼 것이다.&lt;/p&gt; &lt;hr /&gt; &lt;h2 id=&quot;signleton-pattern&quot;&gt;Signleton Pattern&lt;/h2&gt; &lt;hr...</description>
        <pubDate>Tue, 17 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2020/03/17/Spring-Design-Pattern(2).html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2020/03/17/Spring-Design-Pattern(2).html</guid>
        
        <category>Java</category>
        
        <category>OOP</category>
        
        <category>Spring</category>
        
        <category>Design-Pattern</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>Adapter, Proxy and Decorator Pattern</title>
        <description>&lt;h1 id=&quot;spring이-사랑하는-design-pattern&quot;&gt;Spring이 사랑하는 Design Pattern&lt;/h1&gt; &lt;p&gt;이 글에서는 Spring이 사랑하고 Spring이 적용한 디자인 패턴중 &lt;strong&gt;Adapter, Proxy and Decorator Design Pattern&lt;/strong&gt;에 대해서 알아볼 것이다.&lt;/p&gt; &lt;hr /&gt; &lt;h2 id=&quot;adapter-pattern&quot;&gt;Adapter Pattern&lt;/h2&gt; &lt;hr /&gt; &lt;p&gt;어댑터를...</description>
        <pubDate>Tue, 17 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2020/03/17/Spring-Design-Pattern(1).html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2020/03/17/Spring-Design-Pattern(1).html</guid>
        
        <category>Java</category>
        
        <category>OOP</category>
        
        <category>Spring</category>
        
        <category>Design-Pattern</category>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>객체 지향 설계 5원칙 - SOLID</title>
        <description>&lt;h1 id=&quot;객체-지향-설계-5원칙---solid&quot;&gt;객체 지향 설계 5원칙 - SOLID&lt;/h1&gt; &lt;p&gt;이 글에서는 객체 지향 프로그램을 올바르게 설계해 나가는 원칙인 &lt;strong&gt;객체 지향 설계 5원칙 SOLID&lt;/strong&gt;에 대해서 &lt;strong&gt;Java&lt;/strong&gt;를 기반으로 알아볼 것이다.&lt;/p&gt; &lt;p&gt;SOLID는 로버튼 C. 마틴(Robert...</description>
        <pubDate>Sat, 14 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/java/2020/03/14/SOLID%EC%9B%90%EC%B9%99.html</link>
        <guid isPermaLink="true">http://localhost:4000/java/2020/03/14/SOLID%EC%9B%90%EC%B9%99.html</guid>
        
        <category>Java</category>
        
        <category>OOP</category>
        
        <category>SOLID</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Java가 확장한 객체 지향 - (2)</title>
        <description>&lt;h1 id=&quot;java가-확장한-객체지향---2&quot;&gt;Java가 확장한 객체지향 - (2)&lt;/h1&gt; &lt;p&gt;&lt;strong&gt;이 글에서는 자바가 객체 지향을 확장하기 위해 어떠한 방법을 사용했는지 키워드 중심으로 살펴볼 것이다.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;이 포스팅은 &lt;strong&gt;스프링 입문을 위한 자바 객체 지향의 원리와 이해(저자:...</description>
        <pubDate>Thu, 12 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/java/2020/03/12/Java%EA%B0%80%ED%99%95%EC%9E%A5%ED%95%9C%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-(2).html</link>
        <guid isPermaLink="true">http://localhost:4000/java/2020/03/12/Java%EA%B0%80%ED%99%95%EC%9E%A5%ED%95%9C%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-(2).html</guid>
        
        <category>Java</category>
        
        <category>OOP</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Java가 확장한 객체 지향 - (1)</title>
        <description>&lt;h1 id=&quot;java가-확장한-객체지향---1&quot;&gt;Java가 확장한 객체지향 - (1)&lt;/h1&gt; &lt;p&gt;&lt;strong&gt;이 글에서는 자바가 객체 지향을 확장하기 위해 어떠한 방법을 사용했는지 키워드 중심으로 살펴볼 것이다.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;이 포스팅은 &lt;strong&gt;스프링 입문을 위한 자바 객체 지향의 원리와 이해(저자:...</description>
        <pubDate>Thu, 12 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/java/2020/03/12/Java%E1%84%80%E1%85%A1%E1%84%92%E1%85%AA%E1%86%A8%E1%84%8C%E1%85%A1%E1%86%BC%E1%84%92%E1%85%A1%E1%86%AB%E1%84%80%E1%85%A2%E1%86%A8%E1%84%8E%E1%85%A6%E1%84%8C%E1%85%B5%E1%84%92%E1%85%A3%E1%86%BC-(1).html</link>
        <guid isPermaLink="true">http://localhost:4000/java/2020/03/12/Java%E1%84%80%E1%85%A1%E1%84%92%E1%85%AA%E1%86%A8%E1%84%8C%E1%85%A1%E1%86%BC%E1%84%92%E1%85%A1%E1%86%AB%E1%84%80%E1%85%A2%E1%86%A8%E1%84%8E%E1%85%A6%E1%84%8C%E1%85%B5%E1%84%92%E1%85%A3%E1%86%BC-(1).html</guid>
        
        <category>Java</category>
        
        <category>OOP</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>2020-03-08-TIL</title>
        <description>&lt;h1 id=&quot;2020-03-08-til&quot;&gt;2020-03-08-TIL&lt;/h1&gt; &lt;h2 id=&quot;java-enum&quot;&gt;Java enum&lt;/h2&gt; &lt;h3 id=&quot;enum이란&quot;&gt;enum이란?&lt;/h3&gt; &lt;p&gt;enum은 enumeration이라는 셈,계산, 열거, 목록이라는 영어단어의 앞부분만 따서 만든 예약어입니다. 어떤 클래스가 상수만으로 작성되어 있으면 반드시 class로 선언할 필요는 없다. 이럴 땐 class로...</description>
        <pubDate>Sun, 08 Mar 2020 17:43:59 +0900</pubDate>
        <link>http://localhost:4000/til/2020/03/08/TIL.html</link>
        <guid isPermaLink="true">http://localhost:4000/til/2020/03/08/TIL.html</guid>
        
        <category>jekyll</category>
        
        <category>welcome</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>2020-03-07-TIL</title>
        <description>&lt;p&gt;모든 원시값과 문자열을 포장한다 Section : https://www.slipp.net/questions/562&lt;/p&gt;

&lt;p&gt;toString :&lt;/p&gt;

&lt;p&gt;nextxxx() 다음의 nextLine() 에러 : https://hashcode.co.kr/questions/2064/nextxxx-%EB%A9%94%EC%86%8C%EB%93%9C-%ED%9B%84%EC%97%90-nextline-%EB%A9%94%EC%86%8C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%96%88%EC%9D%84-%EB%95%8C%EC%9D%98-scanner%EC%9D%98-%EB%AC%B8%EC%A0%9C&lt;/p&gt;

</description>
        <pubDate>Sat, 07 Mar 2020 17:43:59 +0900</pubDate>
        <link>http://localhost:4000/til/2020/03/07/TIL.html</link>
        <guid isPermaLink="true">http://localhost:4000/til/2020/03/07/TIL.html</guid>
        
        <category>jekyll</category>
        
        <category>welcome</category>
        
        
        <category>TIL</category>
        
      </item>
    
      <item>
        <title>2020-03-06-TIL(일급 컬렉션, 결합도, 응집도, Mock)</title>
        <description>&lt;h2 id=&quot;일급-콜렉션&quot;&gt;일급 콜렉션&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;콜렉션을 포함한 클래스는 반드시 다른 멤버 변수가 없어야 한다.&lt;/li&gt; &lt;li&gt;각 콜렉션은 그 자체로 포장되어 있으므로 이제 콜렉션과 관련된 동작은 근거지가 마련된셈이다.&lt;/li&gt; &lt;li&gt;필터가 일급 콜렉션의 일부가 됨을...</description>
        <pubDate>Fri, 06 Mar 2020 17:43:59 +0900</pubDate>
        <link>http://localhost:4000/til/2020/03/06/TILd.html</link>
        <guid isPermaLink="true">http://localhost:4000/til/2020/03/06/TILd.html</guid>
        
        <category>jekyll</category>
        
        <category>welcome</category>
        
        
        <category>TIL</category>
        
      </item>
    
  </channel>
</rss>
